# CI/CD Pipeline for Pixel AI Creator
name: "Comprehensive Test & Deploy Pipeline"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python (Backend)
      if: matrix.check == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Setup Node.js (Frontend)
      if: matrix.check == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Backend Quality Checks
    - name: Install Python dependencies
      if: matrix.check == 'backend'
      run: |
        cd api
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install flake8 black isort mypy bandit safety

    - name: Run Black formatter check
      if: matrix.check == 'backend'
      run: |
        cd api
        black --check --diff .

    - name: Run isort import sorting check
      if: matrix.check == 'backend'
      run: |
        cd api
        isort --check-only --diff .

    - name: Run Flake8 linting
      if: matrix.check == 'backend'
      run: |
        cd api
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run MyPy type checking
      if: matrix.check == 'backend'
      run: |
        cd api
        mypy . --ignore-missing-imports

    - name: Run Bandit security checks
      if: matrix.check == 'backend'
      run: |
        cd api
        bandit -r . -f json -o bandit-report.json
        bandit -r . --severity-level medium

    - name: Run Safety dependency checks
      if: matrix.check == 'backend'
      run: |
        cd api
        safety check --json --output safety-report.json || true
        safety check

    # Frontend Quality Checks
    - name: Install Node dependencies
      if: matrix.check == 'frontend'
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      if: matrix.check == 'frontend'
      run: |
        cd frontend
        npm run lint

    - name: Run Prettier format check
      if: matrix.check == 'frontend'
      run: |
        cd frontend
        npm run format:check

    - name: Run TypeScript type checking
      if: matrix.check == 'frontend'
      run: |
        cd frontend
        npm run type-check

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports-${{ matrix.check }}
        path: |
          api/bandit-report.json
          api/safety-report.json
          frontend/eslint-report.json
        retention-days: 30

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        component: [backend, frontend]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_pixel_ai
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Backend Tests
    - name: Install Python dependencies
      if: matrix.component == 'backend'
      run: |
        cd api
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run backend unit tests
      if: matrix.component == 'backend'
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_pixel_ai
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        cd api
        pytest tests/test_comprehensive_endpoints.py -v --tb=short --cov=. --cov-report=xml --cov-report=html --junit-xml=pytest-report.xml

    # Frontend Tests
    - name: Install Node dependencies
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm ci

    - name: Run frontend unit tests
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm run test:coverage

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: |
          api/coverage.xml
          frontend/coverage/lcov.info
        flags: ${{ matrix.component }}
        name: codecov-${{ matrix.component }}

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.component }}
        path: |
          api/pytest-report.xml
          api/htmlcov/
          frontend/coverage/
          frontend/test-results/
        retention-days: 30

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_pixel_ai
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd api
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_pixel_ai
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        cd api
        pytest tests/test_integration_workflows.py -v --tb=short --junit-xml=integration-report.xml

    - name: Upload integration test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-reports
        path: api/integration-report.xml
        retention-days: 30

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Playwright
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps chromium

    - name: Start application with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to be ready

    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: Run Playwright tests
      env:
        TEST_BASE_URL: http://localhost:3000
        TEST_API_URL: http://localhost:8000
        HEADLESS: true
      run: |
        cd api
        python -m pytest tests/test_e2e_playwright.py -v --tb=short --html=playwright-report.html --self-contained-html

    - name: Upload Playwright results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: |
          api/playwright-report.html
          api/test-results/
        retention-days: 30

    - name: Stop application
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install locust requests

    - name: Start application
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --host=http://localhost:8000 --users=10 --spawn-rate=2 --run-time=60s --html=performance-report.html --csv=performance-results

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          performance-report.html
          performance-results*.csv
        retention-days: 30

    - name: Stop application
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run OWASP ZAP API scan
      if: github.event_name == 'push'
      run: |
        docker run --rm -v $(pwd):/zap/wrk/:rw \
          owasp/zap2docker-stable zap-api-scan.py \
          -t http://host.docker.internal:8000/openapi.json \
          -f openapi -r zap-api-report.html

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          zap-api-report.html
        retention-days: 30

  # Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        component: [api, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: pixelai/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-images]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # This could be kubectl, helm, or cloud provider specific commands

    - name: Run smoke tests
      run: |
        sleep 60  # Wait for deployment to stabilize
        curl -f https://staging.pixelai.com/health
        curl -f https://staging.pixelai.com/api/health

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-tests, build-images]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here

    - name: Run production smoke tests
      run: |
        sleep 120  # Wait for deployment to stabilize
        curl -f https://pixelai.com/health
        curl -f https://pixelai.com/api/health

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      run: |
        echo "Cleaning up old build artifacts and caches..."
        
    - name: Generate test summary
      run: |
        echo "Generating comprehensive test summary..."
        echo "## Test Summary" > test-summary.md
        echo "- Code Quality: ✅" >> test-summary.md
        echo "- Unit Tests: ✅" >> test-summary.md
        echo "- Integration Tests: ✅" >> test-summary.md
        echo "- E2E Tests: ✅" >> test-summary.md
        echo "- Security Tests: ✅" >> test-summary.md
        echo "- Performance Tests: ✅" >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 90
