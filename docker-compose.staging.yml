version: '3.8'

services:
  api:
    build:
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    container_name: pixel-ai-api-staging
    ports:
      - "8000:8000"
    environment:
      - ENV=staging
      - DEBUG=true
      - DATABASE_URL=postgresql://pixel_user:pixel_pass@postgres:5432/pixel_ai_staging
      - REDIS_URL=redis://redis:6379/0
      - CHROMADB_URL=http://chromadb:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-staging-secret-key-change-in-prod}
      - RAZORFLOW_API_KEY=${RAZORFLOW_API_KEY}
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
    volumes:
      - ./templates:/app/templates:ro
      - ./generated-bots:/app/generated-bots
      - staging_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - pixel-network

  postgres:
    image: postgres:15-alpine
    container_name: pixel-postgres-staging
    environment:
      - POSTGRES_DB=pixel_ai_staging
      - POSTGRES_USER=pixel_user
      - POSTGRES_PASSWORD=pixel_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"  # Different port for staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pixel_user -d pixel_ai_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pixel-network

  redis:
    image: redis:7-alpine
    container_name: pixel-redis-staging
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_staging:/data
    ports:
      - "6380:6379"  # Different port for staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pixel-network

  chromadb:
    image: chromadb/chroma:latest
    container_name: pixel-chromadb-staging
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
      - CHROMA_LOG_LEVEL=INFO
    volumes:
      - chromadb_data_staging:/chroma/chroma
    ports:
      - "8001:8000"  # Different port for staging
    restart: unless-stopped
    networks:
      - pixel-network

  # Optional: Nginx for staging (useful for testing production-like setup)
  nginx:
    image: nginx:alpine
    container_name: pixel-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - pixel-network

  # Optional: Monitoring with basic metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pixel-prometheus-staging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_staging:/prometheus
    restart: unless-stopped
    networks:
      - pixel-network

volumes:
  postgres_data_staging:
    driver: local
  redis_data_staging:
    driver: local
  chromadb_data_staging:
    driver: local
  prometheus_data_staging:
    driver: local
  staging_logs:
    driver: local

networks:
  pixel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
