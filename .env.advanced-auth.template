# Advanced Authentication Environment Variables Template
# Copy this to .env and fill in your actual values

# =============================================================================
# SOCIAL AUTHENTICATION PROVIDERS
# =============================================================================

# Google OAuth2 (Get from Google Cloud Console)
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# GitHub OAuth2 (Get from GitHub Developer Settings)
GITHUB_CLIENT_ID=your_github_client_id_here
GITHUB_CLIENT_SECRET=your_github_client_secret_here

# LinkedIn OAuth2 (Get from LinkedIn Developer Portal)
LINKEDIN_CLIENT_ID=your_linkedin_client_id_here
LINKEDIN_CLIENT_SECRET=your_linkedin_client_secret_here

# =============================================================================
# SECURITY & ENCRYPTION
# =============================================================================

# MFA Encryption Key (Generate a secure 32+ character key)
MFA_ENCRYPTION_KEY=your_very_secure_mfa_encryption_key_here_32_chars_min

# Application Base URL (for OAuth callbacks)
BASE_URL=http://localhost:8000

# =============================================================================
# SOCIAL AUTHENTICATION SETUP INSTRUCTIONS
# =============================================================================

# GOOGLE OAUTH2 SETUP:
# 1. Go to Google Cloud Console (https://console.cloud.google.com/)
# 2. Create a new project or select existing
# 3. Enable Google+ API and Google OAuth2 API
# 4. Go to Credentials > Create Credentials > OAuth 2.0 Client ID
# 5. Set application type to "Web application"
# 6. Add authorized redirect URIs:
#    - http://localhost:8000/auth/advanced/social/callback/google (dev)
#    - https://yourdomain.com/auth/advanced/social/callback/google (prod)
# 7. Copy Client ID and Client Secret to environment variables above

# GITHUB OAUTH2 SETUP:
# 1. Go to GitHub Settings > Developer settings > OAuth Apps
# 2. Click "New OAuth App"
# 3. Fill in application details:
#    - Application name: Your App Name
#    - Homepage URL: http://localhost:8000 (or your domain)
#    - Authorization callback URL: http://localhost:8000/auth/advanced/social/callback/github
# 4. Copy Client ID and Client Secret to environment variables above

# LINKEDIN OAUTH2 SETUP:
# 1. Go to LinkedIn Developer Portal (https://developer.linkedin.com/)
# 2. Create a new app or select existing
# 3. In the app settings:
#    - Add redirect URLs: http://localhost:8000/auth/advanced/social/callback/linkedin
#    - Request access to required scopes: r_liteprofile, r_emailaddress
# 4. Copy Client ID and Client Secret to environment variables above

# =============================================================================
# MFA ENCRYPTION KEY GENERATION
# =============================================================================
# You can generate a secure encryption key using Python:
# 
# import secrets
# import string
# 
# # Generate a 32-character secure key
# key = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))
# print(f"MFA_ENCRYPTION_KEY={key}")

# =============================================================================
# DOCKER ENVIRONMENT VARIABLES
# =============================================================================
# Add these to your docker-compose.yml environment section:
#
# environment:
#   - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
#   - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
#   - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
#   - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
#   - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
#   - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
#   - MFA_ENCRYPTION_KEY=${MFA_ENCRYPTION_KEY}
#   - BASE_URL=${BASE_URL}
