#!/bin/bash

# ===================================
# PIXEL AI CREATOR - POST CLONE SETUP
# VSCode Crash Recovery Script
# ===================================

echo "🚀 Starting Pixel AI Creator Post-Clone Setup..."
echo "📅 $(date)"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "README.md" ] || [ ! -d ".git" ]; then
    print_error "Please run this script from the Pixel-AI-Creator root directory"
    exit 1
fi

print_info "Setting up configuration files from templates..."

# 1. Setup .gitignore
if [ -f "ENHANCED_GITIGNORE.template" ]; then
    cp ENHANCED_GITIGNORE.template .gitignore
    print_status "Enhanced .gitignore created"
else
    print_warning ".gitignore template not found, using existing"
fi

# 2. Setup VSCode settings
if [ -f "VSCODE_SETTINGS.template" ]; then
    mkdir -p .vscode
    cp VSCODE_SETTINGS.template .vscode/settings.json
    print_status "VSCode settings configured"
else
    print_warning "VSCode settings template not found"
fi

# 3. Setup Prettier config
if [ -f "PRETTIERRC.template" ]; then
    cp PRETTIERRC.template .prettierrc
    print_status "Prettier configuration created"
else
    print_warning "Prettier config template not found"
fi

# 4. Setup EditorConfig
if [ -f "EDITORCONFIG.template" ]; then
    cp EDITORCONFIG.template .editorconfig
    print_status "EditorConfig created"
else
    print_warning "EditorConfig template not found"
fi

# 5. Setup environment files
print_info "Setting up environment files..."

if [ ! -f ".env" ] && [ -f ".env.example" ]; then
    cp .env.example .env
    print_status ".env file created from example"
elif [ ! -f ".env" ]; then
    cat > .env << EOF
# PIXEL AI CREATOR - ENVIRONMENT CONFIGURATION
# Generated by post-clone setup script

# Database
DATABASE_URL=sqlite:///./pixel_ai_creator.db

# API Configuration
API_HOST=0.0.0.0
API_PORT=8002
API_RELOAD=true

# Frontend Configuration
FRONTEND_URL=http://localhost:3002
BACKEND_URL=http://localhost:8002

# Security
SECRET_KEY=your-secret-key-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS
CORS_ORIGINS=["http://localhost:3002","http://127.0.0.1:3002"]

# Development
DEBUG=true
ENVIRONMENT=development

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/app.log

# AI Configuration
OPENAI_API_KEY=your-openai-api-key-here
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Vector Database
CHROMA_PERSIST_DIRECTORY=./chroma
EOF
    print_status ".env file created with defaults"
fi

# 6. Create necessary directories
print_info "Creating necessary directories..."

directories=(
    "logs"
    "test-reports"
    "test-results"
    "uploads"
    "backups"
    "generated-bots"
)

for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        print_status "Created directory: $dir"
    fi
done

# 7. Setup Python virtual environment
print_info "Setting up Python virtual environment..."

if [ ! -d "api_venv" ]; then
    python3 -m venv api_venv
    source api_venv/bin/activate
    pip install --upgrade pip
    
    if [ -f "api/requirements.txt" ]; then
        pip install -r api/requirements.txt
        print_status "Python dependencies installed"
    fi
    
    if [ -f "requirements-test.txt" ]; then
        pip install -r requirements-test.txt
        print_status "Test dependencies installed"
    fi
else
    print_warning "Python virtual environment already exists"
fi

# 8. Setup Node.js dependencies
print_info "Setting up Node.js dependencies..."

if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
    cd frontend || exit 1
    if command -v npm &> /dev/null; then
        npm install
        print_status "Frontend dependencies installed"
    else
        print_error "npm not found, please install Node.js"
    fi
    cd .. || exit 1
fi

if [ -d "tests" ] && [ -f "tests/package.json" ]; then
    cd tests || exit 1
    if command -v npm &> /dev/null; then
        npm install
        print_status "Test dependencies installed"
    fi
    cd .. || exit 1
fi

# 9. Setup Playwright
print_info "Setting up Playwright..."
if command -v npx &> /dev/null; then
    npx playwright install
    print_status "Playwright browsers installed"
else
    print_warning "npx not found, Playwright setup skipped"
fi

# 10. Setup Docker (if available)
print_info "Checking Docker setup..."
if command -v docker &> /dev/null; then
    if command -v docker-compose &> /dev/null; then
        print_status "Docker and Docker Compose available"
        print_info "Run 'docker-compose up -d' to start services"
    else
        print_warning "Docker found but Docker Compose not available"
    fi
else
    print_warning "Docker not available"
fi

# 11. Setup Git hooks (optional)
print_info "Setting up Git hooks..."
if [ -f "scripts/pre-commit" ]; then
    cp scripts/pre-commit .git/hooks/pre-commit
    chmod +x .git/hooks/pre-commit
    print_status "Git pre-commit hook installed"
fi

# 12. Create launch configurations
print_info "Creating VS Code launch configurations..."
mkdir -p .vscode

cat > .vscode/launch.json << EOF
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: FastAPI",
            "type": "python",
            "request": "launch",
            "program": "\${workspaceFolder}/api/main.py",
            "console": "integratedTerminal",
            "envFile": "\${workspaceFolder}/.env",
            "python": "\${workspaceFolder}/api_venv/bin/python"
        },
        {
            "name": "Debug Frontend",
            "type": "node",
            "request": "launch",
            "program": "\${workspaceFolder}/frontend/src/index.js",
            "console": "integratedTerminal"
        }
    ]
}
EOF

print_status "VS Code launch configurations created"

# 13. Final checks
print_info "Performing final checks..."

# Check file permissions
chmod +x scripts/*.sh 2>/dev/null || true
chmod +x POST_CLONE_SETUP.sh 2>/dev/null || true

print_status "File permissions set"

echo ""
echo "🎉 Post-clone setup completed successfully!"
echo ""
echo "📋 Next steps:"
echo "   1. Update .env file with your API keys"
echo "   2. Run 'docker-compose up -d' to start services"
echo "   3. Run 'source api_venv/bin/activate' to activate Python env"
echo "   4. Run tests with 'npm test' or 'npx playwright test'"
echo ""
echo "🔗 Useful commands:"
echo "   • Start frontend: cd frontend && npm start"
echo "   • Start backend: source api_venv/bin/activate && python api/main.py"
echo "   • Run tests: npx playwright test --headed"
echo "   • View logs: tail -f logs/app.log"
echo ""
print_status "Setup complete! Happy coding! 🚀"
