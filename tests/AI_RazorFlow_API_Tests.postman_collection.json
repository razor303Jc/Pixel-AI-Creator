{
  "info": {
    "name": "AI Integration & RazorFlow API Tests",
    "description": "Comprehensive tests for AI conversation endpoints and RazorFlow integration",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "clientId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "chatbotId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "buildId",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-login for testing",
          "if (!pm.collectionVariables.get('authToken')) {",
          "  pm.sendRequest({",
          "    url: pm.collectionVariables.get('baseUrl') + '/api/auth/login',",
          "    method: 'POST',",
          "    header: {",
          "      'Content-Type': 'application/json'",
          "    },",
          "    body: {",
          "      mode: 'raw',",
          "      raw: JSON.stringify({",
          "        email: 'test@example.com',",
          "        password: 'testpassword123'",
          "      })",
          "    }",
          "  }, function (err, response) {",
          "    if (response && response.json() && response.json().access_token) {",
          "      pm.collectionVariables.set('authToken', response.json().access_token);",
          "    }",
          "  });",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "AI Integration Tests",
      "item": [
        {
          "name": "AI Chat - Basic Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI reply', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData.response).to.be.a('string');",
                  "    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Response has conversation context', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('conversation_id');",
                  "    pm.expect(jsonData).to.have.property('message_id');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello, I need help with my order status\",\n  \"chatbot_id\": {{chatbotId}},\n  \"personality\": \"customer_support\",\n  \"context\": {\n    \"user_id\": \"test-user\",\n    \"session_id\": \"test-session-001\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            }
          }
        },
        {
          "name": "AI Chat - Streaming Response",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is streaming format', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable for streaming', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(15000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "text/event-stream",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you explain how your AI chatbot works in detail?\",\n  \"chatbot_id\": {{chatbotId}},\n  \"personality\": \"technical_expert\",\n  \"stream\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat/stream",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat", "stream"]
            }
          }
        },
        {
          "name": "AI Personality Configuration",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Configuration updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response includes personality details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('personality');",
                  "    pm.expect(jsonData.personality).to.have.property('name');",
                  "    pm.expect(jsonData.personality).to.have.property('description');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": {{chatbotId}},\n  \"personality\": \"sales_assistant\",\n  \"custom_instructions\": \"Focus on highlighting product benefits and addressing customer concerns with enthusiasm.\",\n  \"response_tone\": \"friendly\",\n  \"response_length\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/personality/configure",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "personality", "configure"]
            }
          }
        },
        {
          "name": "AI Chat - Sales Personality Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response reflects sales personality', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.response).to.be.a('string');",
                  "    // Check for sales-oriented language (case insensitive)",
                  "    const response = jsonData.response.toLowerCase();",
                  "    const salesKeywords = ['product', 'benefit', 'feature', 'offer', 'value', 'solution'];",
                  "    const containsSalesLanguage = salesKeywords.some(keyword => response.includes(keyword));",
                  "    pm.expect(containsSalesLanguage).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has appropriate length', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.response.length).to.be.greaterThan(50);",
                  "    pm.expect(jsonData.response.length).to.be.lessThan(500);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"I'm interested in your premium chatbot package. What makes it better than the basic version?\",\n  \"chatbot_id\": {{chatbotId}},\n  \"personality\": \"sales_assistant\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            }
          }
        },
        {
          "name": "AI Chat - Technical Support Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response reflects technical personality', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.response).to.be.a('string');",
                  "    const response = jsonData.response.toLowerCase();",
                  "    const techKeywords = ['technical', 'configure', 'setting', 'parameter', 'troubleshoot', 'debug'];",
                  "    const containsTechLanguage = techKeywords.some(keyword => response.includes(keyword));",
                  "    pm.expect(containsTechLanguage).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"My API integration is returning 404 errors. How do I troubleshoot this?\",\n  \"chatbot_id\": {{chatbotId}},\n  \"personality\": \"technical_expert\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            }
          }
        }
      ]
    },
    {
      "name": "RazorFlow Integration Tests",
      "item": [
        {
          "name": "Queue Client Build",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Build queued successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('build_id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('queued');",
                  "    ",
                  "    // Store build_id for subsequent tests",
                  "    pm.collectionVariables.set('buildId', jsonData.build_id);",
                  "});",
                  "",
                  "pm.test('Response includes estimated completion time', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('estimated_completion');",
                  "});",
                  "",
                  "pm.test('Template selection is appropriate', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('selected_template');",
                  "    pm.expect(jsonData.selected_template).to.be.a('string');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": {{clientId}},\n  \"template_type\": \"restaurant\",\n  \"priority\": \"high\",\n  \"custom_requirements\": {\n    \"features\": [\"order_taking\", \"reservations\", \"menu_display\"],\n    \"integrations\": [\"stripe\", \"google_calendar\"],\n    \"branding\": {\n      \"primary_color\": \"#2E8B57\",\n      \"logo_url\": \"https://example.com/logo.png\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/razorflow/queue-build",
              "host": ["{{baseUrl}}"],
              "path": ["api", "razorflow", "queue-build"]
            }
          }
        },
        {
          "name": "Check Build Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Build status is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('build_id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    ",
                  "    const validStatuses = ['queued', 'processing', 'completed', 'failed'];",
                  "    pm.expect(validStatuses).to.include(jsonData.status);",
                  "});",
                  "",
                  "pm.test('Progress information is provided', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('progress');",
                  "    pm.expect(jsonData.progress).to.be.a('number');",
                  "    pm.expect(jsonData.progress).to.be.at.least(0);",
                  "    pm.expect(jsonData.progress).to.be.at.most(100);",
                  "});",
                  "",
                  "pm.test('Build details are included', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_type');",
                  "    pm.expect(jsonData).to.have.property('created_at');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/razorflow/build-status/{{buildId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "razorflow", "build-status", "{{buildId}}"]
            }
          }
        },
        {
          "name": "Deploy Default Assistant Suite",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Suite deployment initiated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('deployment_id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('deploying');",
                  "});",
                  "",
                  "pm.test('Assistant suite components listed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('components');",
                  "    pm.expect(jsonData.components).to.be.an('array');",
                  "    pm.expect(jsonData.components.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Deployment URLs provided', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('urls');",
                  "    pm.expect(jsonData.urls).to.be.an('object');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": {{clientId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/razorflow/deploy-default-suite",
              "host": ["{{baseUrl}}"],
              "path": ["api", "razorflow", "deploy-default-suite"]
            }
          }
        },
        {
          "name": "Queue E-commerce Build",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('E-commerce template selected', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.selected_template).to.include('ecommerce');",
                  "});",
                  "",
                  "pm.test('Shopping features configured', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('features');",
                  "    const features = jsonData.features;",
                  "    pm.expect(features).to.include('product_catalog');",
                  "    pm.expect(features).to.include('shopping_cart');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": {{clientId}},\n  \"template_type\": \"ecommerce\",\n  \"priority\": \"normal\",\n  \"custom_requirements\": {\n    \"features\": [\"product_catalog\", \"shopping_cart\", \"order_tracking\", \"payment_processing\"],\n    \"integrations\": [\"shopify\", \"paypal\", \"fedex\"],\n    \"design\": {\n      \"style\": \"modern\",\n      \"color_scheme\": \"blue_white\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/razorflow/queue-build",
              "host": ["{{baseUrl}}"],
              "path": ["api", "razorflow", "queue-build"]
            }
          }
        }
      ]
    },
    {
      "name": "Database Analytics Tests",
      "item": [
        {
          "name": "Get Conversation Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('conversation_volume');",
                  "    pm.expect(jsonData).to.have.property('response_metrics');",
                  "    pm.expect(jsonData).to.have.property('client_satisfaction');",
                  "});",
                  "",
                  "pm.test('Conversation volume data is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.conversation_volume).to.be.an('array');",
                  "    if (jsonData.conversation_volume.length > 0) {",
                  "        const firstEntry = jsonData.conversation_volume[0];",
                  "        pm.expect(firstEntry).to.have.property('date');",
                  "        pm.expect(firstEntry).to.have.property('conversations');",
                  "        pm.expect(firstEntry).to.have.property('messages');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/analytics/conversation-volume?range=7d",
              "host": ["{{baseUrl}}"],
              "path": ["api", "analytics", "conversation-volume"],
              "query": [
                {
                  "key": "range",
                  "value": "7d"
                }
              ]
            }
          }
        },
        {
          "name": "Get Client Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client metrics are comprehensive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalConversations');",
                  "    pm.expect(jsonData).to.have.property('averageRating');",
                  "    pm.expect(jsonData).to.have.property('billingInfo');",
                  "});",
                  "",
                  "pm.test('Billing information is detailed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.billingInfo).to.have.property('currentPlan');",
                  "    pm.expect(jsonData.billingInfo).to.have.property('usage');",
                  "    pm.expect(jsonData.billingInfo.usage).to.have.property('conversations');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/clients/{{clientId}}/metrics?period=30d",
              "host": ["{{baseUrl}}"],
              "path": ["api", "clients", "{{clientId}}", "metrics"],
              "query": [
                {
                  "key": "period",
                  "value": "30d"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Integration Tests",
      "item": [
        {
          "name": "Full Workflow - Create Client to AI Chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Complete workflow succeeds', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI understands client context', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.response).to.be.a('string');",
                  "    pm.expect(jsonData.response.length).to.be.greaterThan(20);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"I just created a new client account and want to build a restaurant chatbot. What's the next step?\",\n  \"chatbot_id\": {{chatbotId}},\n  \"personality\": \"customer_support\",\n  \"context\": {\n    \"client_id\": {{clientId}},\n    \"business_type\": \"restaurant\",\n    \"previous_actions\": [\"account_created\", \"template_selected\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "chat"]
            }
          }
        }
      ]
    }
  ]
}
