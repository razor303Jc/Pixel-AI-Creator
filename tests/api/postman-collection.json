{
	"info": {
		"_postman_id": "pixel-ai-creator-api-tests",
		"name": "Pixel AI Creator - API Test Suite",
		"description": "Comprehensive API testing for Pixel AI Creator application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8002/api",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "api.test@example.com",
			"type": "string"
		},
		{
			"key": "test_password", 
			"value": "ApiTest123!",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Starting API test:', pm.info.requestName);",
					"",
					"// Set timestamp for unique data",
					"pm.globals.set('timestamp', Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has proper headers', function () {",
					"    pm.expect(pm.response.headers.has('content-type')).to.be.true;",
					"});",
					"",
					"console.log('Completed API test:', pm.info.requestName, '- Status:', pm.response.status);"
				]
			}
		}
	],
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Health check response is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					}
				},
				{
					"name": "API Root Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						}
					}
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email for this test",
									"const timestamp = pm.globals.get('timestamp');",
									"const uniqueEmail = `api.test.${timestamp}@example.com`;",
									"pm.environment.set('unique_email', uniqueEmail);",
									"console.log('Using unique email:', uniqueEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});",
									"",
									"// Store user ID for later tests",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.id) {",
									"        pm.environment.set('user_id', jsonData.id);",
									"    } else if (jsonData.user_id) {",
									"        pm.environment.set('user_id', jsonData.user_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Response contains token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
									"});",
									"",
									"// Store token for authenticated requests",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    let token = jsonData.access_token || jsonData.token;",
									"    if (token) {",
									"        pm.environment.set('auth_token', token);",
									"        console.log('Auth token stored for future requests');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Get Current User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile retrieved successfully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Profile contains user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": ["{{base_url}}"],
							"path": ["auth", "me"]
						}
					}
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User list retrieved', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Response is array or paginated object', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.satisfy(function(data) {",
									"            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile update processed', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Updated profile returned', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{user_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "Chat & AI",
			"item": [
				{
					"name": "Get Chat History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Chat history retrieved', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Response contains chat data', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.satisfy(function(data) {",
									"            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/chat/conversations",
							"host": ["{{base_url}}"],
							"path": ["chat", "conversations"]
						}
					}
				},
				{
					"name": "Create New Chat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Chat creation processed', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    pm.test('Chat created successfully', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
									"    });",
									"",
									"    // Store conversation ID for further tests",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.id) {",
									"        pm.environment.set('conversation_id', jsonData.id);",
									"    } else if (jsonData.conversation_id) {",
									"        pm.environment.set('conversation_id', jsonData.conversation_id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat/send",
							"host": ["{{base_url}}"],
							"path": ["chat", "send"]
						}
					}
				},
				{
					"name": "Send Chat Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Message sent successfully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    pm.test('Response contains message data', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat/message",
							"host": ["{{base_url}}"],
							"path": ["chat", "message"]
						}
					}
				}
			]
		},
		{
			"name": "Documents",
			"item": [
				{
					"name": "Get Documents List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Documents list retrieved', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Response contains documents data', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.satisfy(function(data) {",
									"            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/documents",
							"host": ["{{base_url}}"],
							"path": ["documents"]
						}
					}
				},
				{
					"name": "Upload Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Document upload processed', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    pm.test('Document uploaded successfully', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "text",
									"value": "This is a test document content for API testing."
								},
								{
									"key": "filename",
									"value": "api-test-document.txt",
									"type": "text"
								},
								{
									"key": "document_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/documents/upload",
							"host": ["{{base_url}}"],
							"path": ["documents", "upload"]
						}
					}
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Invalid Endpoint - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid endpoint returns 404', function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test('Error response has proper structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/invalid-endpoint-test",
							"host": ["{{base_url}}"],
							"path": ["invalid-endpoint-test"]
						}
					}
				},
				{
					"name": "Unauthorized Request - 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized request returns 401', function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"pm.test('Unauthorized error has proper structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": ["{{base_url}}"],
							"path": ["auth", "me"]
						}
					}
				},
				{
					"name": "Malformed JSON - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Malformed JSON returns 400', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Bad request error has proper structure', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"invalid\": json syntax }"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				}
			]
		}
	]
}