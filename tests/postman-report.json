{
  "collection": {
    "item": [
      {
        "id": "5a30defa-b3df-4aea-96c1-0fc15c5da131",
        "name": "üè• System Health & Infrastructure",
        "description": {
          "content": "Test system health, CORS, and basic connectivity",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d4768343-26c8-4b33-99bb-e273d8f207f1",
            "name": "API Health Check",
            "request": {
              "description": {
                "content": "Verify API is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ba0e8843-a38d-4d2d-b17e-dca2612eaef9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has correct headers', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                  ],
                  "_lastExecutionId": "3b0ae141-6560-419e-9582-ab66b6e3ae2b"
                }
              }
            ]
          },
          {
            "id": "c9034824-631c-4bb8-8cbd-3f6ae4373081",
            "name": "API Documentation/OpenAPI",
            "request": {
              "url": {
                "path": [
                  "docs"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "24e1888a-0a02-4724-a9e1-c50113655815",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API documentation is accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "57c58487-589b-4c05-8dfd-97c565a9f802"
                }
              }
            ]
          },
          {
            "id": "8ee09e36-7fbd-4ae0-b4fd-8ada07eecd7d",
            "name": "CORS Preflight Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Origin",
                  "value": "{{frontend_url}}"
                },
                {
                  "key": "Access-Control-Request-Method",
                  "value": "POST"
                },
                {
                  "key": "Access-Control-Request-Headers",
                  "value": "Content-Type,Authorization"
                }
              ],
              "method": "OPTIONS"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7244044e-b4ec-44d5-9cc0-5d1490828c41",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('CORS headers are present', function () {",
                    "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                    "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                    "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                    "});"
                  ],
                  "_lastExecutionId": "83adcfbc-cec7-4323-8d34-bb90ede9519e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Complete authentication flow testing",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
            "name": "User Registration",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful or user exists', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.test('Response contains user data', function () {",
                    "        pm.expect(response).to.have.property('user');",
                    "        pm.expect(response.user).to.have.property('email');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                }
              }
            ]
          },
          {
            "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
            "name": "User Login",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response contains tokens', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('access_token');",
                    "    pm.expect(response).to.have.property('refresh_token');",
                    "    pm.expect(response).to.have.property('user');",
                    "});",
                    "",
                    "// Store tokens for subsequent requests",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                    "    pm.collectionVariables.set('user_id', response.user.id);",
                    "}"
                  ],
                  "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                }
              }
            ]
          },
          {
            "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieval successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('email');",
                    "    pm.expect(response).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                }
              }
            ]
          },
          {
            "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
            "name": "Token Refresh",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "refresh"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Token refresh successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "}"
                  ],
                  "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                }
              }
            ]
          },
          {
            "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Logout successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "02858302-158e-45da-8eca-07805d4a3b3d",
        "name": "üë• Client Management CRUD",
        "description": {
          "content": "Complete client management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
            "name": "Create Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('client_id', response.id);",
                    "    ",
                    "    pm.test('Client data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('email');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                }
              }
            ]
          },
          {
            "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
            "name": "Get All Clients",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get clients successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                }
              }
            ]
          },
          {
            "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
            "name": "Get Client by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get client by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Client data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                }
              }
            ]
          },
          {
            "id": "25573a6e-66f9-4099-9519-053e574267b2",
            "name": "Update Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "});"
                  ],
                  "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                }
              }
            ]
          },
          {
            "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
            "name": "Delete Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client deletion successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6f870888-8266-43df-a28a-36397485d0a5",
        "name": "ü§ñ Chatbot Management CRUD",
        "description": {
          "content": "Complete chatbot management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
            "name": "Create Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('chatbot_id', response.id);",
                    "    ",
                    "    pm.test('Chatbot data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('personality');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                }
              }
            ]
          },
          {
            "id": "46521e29-2df4-4234-9421-6205c5c34eab",
            "name": "Get All Chatbots",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbots successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                }
              }
            ]
          },
          {
            "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
            "name": "Get Chatbot by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbot by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Chatbot data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('personality');",
                    "});"
                  ],
                  "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                }
              }
            ]
          },
          {
            "id": "b818b601-f844-43c9-93cc-7324f2a96616",
            "name": "Update Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "    pm.expect(response.personality).to.eql('professional');",
                    "});"
                  ],
                  "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6116993d-0fd4-4372-958a-22899a6621f3",
        "name": "üí¨ Chat & Conversation Management",
        "description": {
          "content": "Test chat functionality and conversation management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
            "name": "Start Conversation",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('conversation_id', response.id);",
                    "    ",
                    "    pm.test('Conversation data is correct', function () {",
                    "        pm.expect(response).to.have.property('id');",
                    "        pm.expect(response).to.have.property('chatbot_id');",
                    "        pm.expect(response).to.have.property('messages');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                }
              }
            ]
          },
          {
            "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
            "name": "Send Message",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}",
                  "messages"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ba6006a7-2578-413a-937d-706341171902",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Bot response received', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('bot_response');",
                    "    pm.expect(response.bot_response).to.be.a('string');",
                    "});"
                  ],
                  "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                }
              }
            ]
          },
          {
            "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
            "name": "Get Conversation History",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation history retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Messages are present', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('messages');",
                    "    pm.expect(response.messages).to.be.an('array');",
                    "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                }
              }
            ]
          },
          {
            "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
            "name": "Get All Conversations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get conversations successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8abf2af9-bf0a-4bdd-8f52-677eca7f1dc1",
        "name": "üìä Analytics & Reporting",
        "description": {
          "content": "Test analytics and reporting endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
            "name": "Get Dashboard Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5086b95d-814f-41e2-a258-ab967bada593",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Analytics data retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics contains key metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('total_conversations');",
                    "    pm.expect(response).to.have.property('active_chatbots');",
                    "    pm.expect(response).to.have.property('total_clients');",
                    "});"
                  ],
                  "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
                }
              }
            ]
          },
          {
            "id": "f347511b-4b33-4b88-8168-3d382134c34b",
            "name": "Get Conversation Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "period",
                    "value": "7d"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation analytics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics data is structured', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
                }
              }
            ]
          },
          {
            "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
            "name": "Get Performance Metrics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "performance"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "73e173d6-7541-4a36-a933-b630374be601",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Performance metrics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Performance data contains metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('response_time');",
                    "    pm.expect(response).to.have.property('success_rate');",
                    "});"
                  ],
                  "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d6c772ba-968d-4d6b-9f0d-c546097ec795",
        "name": "üîÑ Error Handling & Edge Cases",
        "description": {
          "content": "Test error scenarios and edge cases",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
            "name": "Unauthorized Access Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "83461649-8040-45fc-9228-2c6daf24a917",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized access blocked', function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test('Error message is informative', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
                }
              }
            ]
          },
          {
            "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
            "name": "Invalid Token Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer invalid-token-12345"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "247ee87e-86b7-485e-873a-36996d53213f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid token rejected', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
                }
              }
            ]
          },
          {
            "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
            "name": "Non-existent Resource Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "99999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Non-existent resource returns 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message is clear', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
                }
              }
            ]
          },
          {
            "id": "0461b28f-8493-44ab-81d0-461906e36e38",
            "name": "Invalid Data Format Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ab7f4a53-0e01-4937-9527-84b290a611fd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid data rejected', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                    "});",
                    "",
                    "pm.test('Validation errors provided', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "72305618-1ded-43c9-881e-d6e3bd956558"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ca2d95d8-5697-4ab2-a337-66577e533f82",
        "name": "‚ö° Performance & Load Tests",
        "description": {
          "content": "Test API performance and load handling",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "3b54133a-7b30-498d-b5ad-dfa095e2414e",
            "name": "Response Time Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "21808b5d-7ccf-4720-8a9f-a28353d0d617",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "",
                    "pm.test('API responds successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "8d5a1003-7ebf-4c2a-842c-d367258611ed"
                }
              }
            ]
          },
          {
            "id": "617a81d1-8c21-45e1-b2fe-ebce0fc35fc4",
            "name": "Concurrent Request Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "70c058f5-4fb4-48f7-93e0-b2376a028421",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles concurrent requests', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response structure is consistent', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "c8a3c038-23b8-49c8-9d01-6c1523c78cf6"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "4170d562-08c2-4c32-9ba8-24e9ae89c74e",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "// Add any global setup here",
            "console.log('Running test:', pm.info.requestName);"
          ],
          "_lastExecutionId": "ddd9e69d-5b28-4d5c-9659-46cc5c8a619c"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "914cdac8-e09d-422c-aafb-7a1ff5c39e98",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Status code is not 5xx', function () {",
            "    pm.expect(pm.response.code).to.be.below(500);",
            "});",
            "",
            "pm.test('Response time is reasonable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});"
          ],
          "_lastExecutionId": "26a77c32-5dad-43c9-90ba-97a25a439603"
        }
      }
    ],
    "variable": [
      {
        "description": {
          "content": "API base URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8002",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Frontend URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:3002",
        "key": "frontend_url"
      },
      {
        "description": {
          "content": "JWT access token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "description": {
          "content": "JWT refresh token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "user_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "client_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "chatbot_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "conversation_id"
      },
      {
        "type": "string",
        "value": "testuser@pixel.ai",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "TestPass123!",
        "key": "test_password"
      }
    ],
    "info": {
      "_postman_id": "7190201c-3e23-4813-a074-8af856f836c5",
      "name": "Pixel-AI-Creator Complete API Test Suite",
      "version": {
        "raw": "3.0.0",
        "major": 3,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "3.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing covering all endpoints, authentication, CRUD operations, error handling, and integration scenarios",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "44153f2a-0d70-43a6-8f30-d3bdc531cfb1",
    "values": []
  },
  "globals": {
    "id": "081bc93b-6595-452d-8a3e-ac40577e9096",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 90,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 111,
        "pending": 0,
        "failed": 38
      },
      "testScripts": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.7,
      "responseMin": 2,
      "responseMax": 44,
      "responseSd": 7.983942217559775,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757606189957,
      "completed": 1757606206198
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 30,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4ec25727-cfb6-49b7-ba82-98fc4c40df64",
          "httpRequestId": "2ea4de8d-4298-440c-b437-bcbaf1283896"
        },
        "item": {
          "id": "d4768343-26c8-4b33-99bb-e273d8f207f1",
          "name": "API Health Check",
          "request": {
            "description": {
              "content": "Verify API is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ba0e8843-a38d-4d2d-b17e-dca2612eaef9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has correct headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "_lastExecutionId": "3b0ae141-6560-419e-9582-ab66b6e3ae2b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify API is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6df889a-7f68-4825-8b2e-cfc2dbd3e192",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3a889ebc-e4a7-44ee-bb01-fbf5ec3d6f6e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "49"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              112,
              105,
              120,
              101,
              108,
              45,
              97,
              105,
              45,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 44,
          "responseSize": 49
        },
        "id": "d4768343-26c8-4b33-99bb-e273d8f207f1",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API is healthy",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has correct headers",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5dd9cc0a-53ae-491c-bb33-5cedba2d182f",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "19383b82-11bc-42e9-becf-18c06d61998b"
        },
        "item": {
          "id": "c9034824-631c-4bb8-8cbd-3f6ae4373081",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24e1888a-0a02-4724-a9e1-c50113655815",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "57c58487-589b-4c05-8dfd-97c565a9f802"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb32dd7b-c9c1-4b35-bc2f-b407f4cf2beb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6f09ee74-3e7f-4d30-9f1a-d477ac0d0070",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 22
        },
        "id": "c9034824-631c-4bb8-8cbd-3f6ae4373081",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API documentation is accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "API documentation is accessible",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6023f571-50bd-4ffd-8465-b062b1f9844d",
          "length": 30,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c549dafe-c0ce-41d9-9677-b27508964be1"
        },
        "item": {
          "id": "8ee09e36-7fbd-4ae0-b4fd-8ada07eecd7d",
          "name": "CORS Preflight Check",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "method": "OPTIONS"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7244044e-b4ec-44d5-9cc0-5d1490828c41",
                "type": "text/javascript",
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                  "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                  "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                  "});"
                ],
                "_lastExecutionId": "83adcfbc-cec7-4323-8d34-bb90ede9519e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "Access-Control-Request-Method",
              "value": "POST"
            },
            {
              "key": "Access-Control-Request-Headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35ccaf34-d4ab-4ed6-bea7-364bb20a891b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "OPTIONS"
        },
        "response": {
          "id": "ac8ac780-a74a-4923-9f35-187d6df7b0c5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-methods",
              "value": "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
            },
            {
              "key": "access-control-max-age",
              "value": "600"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              79,
              75
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 2
        },
        "id": "8ee09e36-7fbd-4ae0-b4fd-8ada07eecd7d",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "CORS headers are present",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3284e7ce-d391-4422-b2e7-1b51d3976024",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f308970b-0220-4127-9e6f-d00ff39d9d6c"
        },
        "item": {
          "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c1e6ec1-dd34-4685-9de7-3718d8256181",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "116",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "7b4587f8-0195-4e03-9c3d-709788f58aff",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "467"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 467
        },
        "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Registration successful or user exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Registration successful or user exists",
              "message": "expected 422 to be one of [ 201, 400, 409 ]",
              "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "20eb3ade-0255-4316-8f71-963939717352",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "404e463c-f33e-4688-8af3-b6b6a510cdaa"
        },
        "item": {
          "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aabe5e79-4c09-4b95-9899-50ca59ee82ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\"\n}"
          }
        },
        "response": {
          "id": "ff7aad64-cd2a-453f-8b9d-5ce61a64f56b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:32 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "32"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 32
        },
        "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response contains tokens",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains tokens",
              "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
              "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "070b485b-6a12-401c-b007-663126696dd7",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "029fdbb9-51d8-44ad-b337-30e56e7d4102"
        },
        "item": {
          "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db2de8eb-1f37-4c3e-ae61-04f0b3d3d6e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a5c98678-dfb0-4c3c-822b-462842c10095",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:33 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Profile retrieval successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieval successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dcb46c3b-efd9-407e-9a4a-5780d50e2a44",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2275cdaf-c3d8-49e8-af65-7683334f805c"
        },
        "item": {
          "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "refresh"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "84945e2f-c64a-4c9e-b634-892c54f38a07",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"refresh_token\": \"\"\n}"
          }
        },
        "response": {
          "id": "b5ae8cf2-e121-4c36-a420-4fc0a821e2e7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:33 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Token refresh successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token refresh successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ffce1e1b-14c9-4edb-a616-20c7aa3ba6c4",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f677e12-ac42-48e1-9737-8cc35088d7d1"
        },
        "item": {
          "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8192b2ca-c5db-4e2f-96fa-17cd5d8b7af0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "14d01c96-1852-443a-b408-e711fcaa5f22",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Logout successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logout successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4402de9e-27f7-42f8-8f67-dbc392c0d122",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7e18a6dc-6413-409e-84a6-880a86f7faee"
        },
        "item": {
          "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "78676f64-0c34-4a93-8650-a73303cc4c16",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "213",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
          }
        },
        "response": {
          "id": "ef17eb2c-4c08-479b-837f-e1b31fa996e5",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "68"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 68
        },
        "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client creation successful",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8bb374b4-76f6-439d-b590-b4c427044db5",
          "length": 30,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "787af48d-ab50-4e02-9114-082c6b808e08"
        },
        "item": {
          "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
          "name": "Get All Clients",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get clients successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4f5f47ec-39c7-4baf-acf4-d2f7631b1b48",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0959f47c-ff5f-4957-bd34-27d142eeb07e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 2748
        },
        "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get clients successful",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "938f548a-d1a1-42d1-b75a-eab7f70cd145",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41de9831-2e66-4775-8623-8b799017cdd8"
        },
        "item": {
          "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7299eef0-3d33-438c-a1cf-610f849ed7eb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e9ce0243-7a84-445f-9c41-bc562d25cf08",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 30
        },
        "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get client by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get client by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Client data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Client data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "13587112-4a24-4165-bcfa-9deb322e36e8",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d34b728c-2310-4ceb-96c5-3773064f3790"
        },
        "item": {
          "id": "25573a6e-66f9-4099-9519-053e574267b2",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0225f70-fc8d-4d4c-9fc8-693231060378",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "188",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
          }
        },
        "response": {
          "id": "6d869b3f-68a3-4af4-9bc3-9fbac4c0f426",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "25573a6e-66f9-4099-9519-053e574267b2",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "adf3fbaa-c11f-4ae8-84d9-14b237ac18bb",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4474f20a-f851-4f45-ba4e-8b5c835b7b3a"
        },
        "item": {
          "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f0a103a4-8cb7-402d-81ee-48eb9999b0f9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "b26fa0c3-70f1-4822-8123-450e73dc0bcc",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 31
        },
        "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client deletion successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client deletion successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad6c75e4-bd7e-4144-9fde-d0009810e14e",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cd080eed-b4db-453e-b93d-57faaed1b411"
        },
        "item": {
          "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e2459230-2098-4e59-9fa4-74e38e89db5f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "217",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "4b09b14f-9a1b-43c7-927a-3d32b974260a",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "043aa5ef-ec8d-4c0d-a49b-d7bf36fa80cf",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fb18a1d0-c2a8-4d1f-94d8-cd2f4ed97684"
        },
        "item": {
          "id": "46521e29-2df4-4234-9421-6205c5c34eab",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8a003d3b-29f2-422b-8cf5-25627021778d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8dcfe672-488a-4716-b72e-a0ea882c81a1",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 30
        },
        "id": "46521e29-2df4-4234-9421-6205c5c34eab",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbots successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbots successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ea179f9f-1da7-49d9-891c-3855846e12fa",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b4ed8b02-1fd9-443f-b3c1-9d9f28b3f787"
        },
        "item": {
          "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "53556a7a-bb73-48ee-8328-fb38e60d0813",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d1616a75-661a-41c9-b2e6-6b85151967b2",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbot by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbot by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Chatbot data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Chatbot data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6576dced-4305-48c3-940a-ca28f8d59663",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10a6315a-e51f-453a-9d6d-79baab6e1b52"
        },
        "item": {
          "id": "b818b601-f844-43c9-93cc-7324f2a96616",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07cb46b9-8c18-429f-a0c7-d80b8f138fb5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "230",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
          }
        },
        "response": {
          "id": "f3daf08d-e608-459e-afee-467f61724ed7",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 31
        },
        "id": "b818b601-f844-43c9-93cc-7324f2a96616",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9750641e-5e4a-41de-a1ef-9ca4ebc5261a",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "169e68d6-1650-4387-963d-3a86cecc6638"
        },
        "item": {
          "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ea04856a-d9a4-453d-a118-56c1bb31436e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chatbot_id\": \"\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "9cb8fc89-7b17-4ff4-8831-76981cb0eba2",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 30
        },
        "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc9d3a25-8cf7-4364-9805-30a7b698ef8d",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4abcc8a6-03e7-4d40-88d6-bf4c37c5c5a3"
        },
        "item": {
          "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ba6006a7-2578-413a-937d-706341171902",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              "",
              "messages"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e70637b2-569b-4582-9c38-365e3f63b55d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "78",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "84ff6798-894f-403e-9079-d2cc87f8c904",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Bot response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bot response received",
              "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "99c4f495-2724-4eaf-a557-626bb907d009",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2667cfba-94b1-46fa-b861-518771716beb"
        },
        "item": {
          "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bfa669bf-cebd-41c5-af2b-7cb4983ed6f5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "07115e6d-3318-4631-adf6-375cc02d7564",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 30
        },
        "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation history retrieved",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Messages are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Messages are present",
              "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "db8251c6-d7a0-45be-855e-6d469493dd52",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "13f7dad4-37de-4f70-8869-2ffc0d2f54d6"
        },
        "item": {
          "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "437b79eb-fc42-4159-b3f2-e949b15b03de",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8d4e4356-a659-45cb-a222-b1e97fd53d8b",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get conversations successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get conversations successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5a6396a-695f-447c-b928-9603988cd948",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "400073f3-3c55-40e0-ac87-e0d9c6f27fab"
        },
        "item": {
          "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5086b95d-814f-41e2-a258-ab967bada593",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9780635f-a40a-448b-96b1-8c0e36778fcc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f1466cae-fac1-4651-913d-60d38e292b19",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Analytics data retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Analytics data retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Analytics contains key metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Analytics contains key metrics",
              "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b9ab32a-4e44-485f-a3b6-cba99b0c55eb",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e02225b5-b9d6-48ab-b9b8-c666b14d991a"
        },
        "item": {
          "id": "f347511b-4b33-4b88-8168-3d382134c34b",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "period",
                "value": "7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "47b2f7f9-7a4c-49ed-a7ca-cbeff9ab2ad6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ae50f553-8d23-4364-ae16-a5b9527e3f38",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "f347511b-4b33-4b88-8168-3d382134c34b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation analytics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation analytics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Analytics data is structured",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2db20d2e-e08e-4dc3-ba22-32061ee3d54d",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e2ea92f1-d8d1-47c6-9166-466f0d756163"
        },
        "item": {
          "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "73e173d6-7541-4a36-a933-b630374be601",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "performance"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02dc98e9-32d0-4323-ad30-6afe4c52a858",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a0dc404f-f4a4-4172-a47d-cd7a3acd4f08",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Performance metrics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Performance metrics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Performance data contains metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Performance data contains metrics",
              "message": "expected { detail: 'Not Found' } to have property 'response_time'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2b8c3e13-108e-4f33-9890-9febd8266840",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d6f803ea-0c79-43e1-9753-3e0b27901732"
        },
        "item": {
          "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83461649-8040-45fc-9228-2c6daf24a917",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5443762e-ceae-4c0c-8d6b-0c0b3879cfa1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "25c58f95-edcf-4887-97ba-4455725dc2cd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 2748
        },
        "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Unauthorized access blocked",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized access blocked",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Error message is informative",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error message is informative",
              "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
              "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f77c6391-dbc6-4440-b43d-d0c87f5056bd",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4f991ff2-7db3-4c25-b83f-91bde3c451b5"
        },
        "item": {
          "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "247ee87e-86b7-485e-873a-36996d53213f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid-token-12345"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "49e9d24f-a1b5-4c03-816b-456cc318139a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b86c8a58-6657-4564-bbfb-379bc9911234",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 2748
        },
        "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid token rejected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Invalid token rejected",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b36c92f6-2cd8-4ead-a1f1-ea30e7758c6e",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "05b9e948-22a9-47e5-acca-7d1062252e45"
        },
        "item": {
          "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              "99999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8a24009d-6296-4186-be34-ae30ee1d928e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0e5735a4-2612-4146-bc3c-a2334b3cf4ac",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Non-existent resource returns 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Non-existent resource returns 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Error message is clear",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5d0ba54-bfbb-4a53-a70c-7e7948e0b69c",
          "length": 30,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "62caf57e-3922-483f-b079-745627f5b6d7"
        },
        "item": {
          "id": "0461b28f-8493-44ab-81d0-461906e36e38",
          "name": "Invalid Data Format Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab7f4a53-0e01-4937-9527-84b290a611fd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Validation errors provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "72305618-1ded-43c9-881e-d6e3bd956558"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8d0c54a8-d24b-4fcb-9dd5-92ac190fbb92",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
          }
        },
        "response": {
          "id": "c9268be6-574c-45e2-992b-c35c5db2ed7a",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 385
        },
        "id": "0461b28f-8493-44ab-81d0-461906e36e38",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid data rejected",
            "skipped": false
          },
          {
            "assertion": "Validation errors provided",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0e34e8f9-663e-4f49-a5e5-0360aa8e6862",
          "length": 30,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c6df15e5-cbe4-4b68-91a1-b4c74dd158e9"
        },
        "item": {
          "id": "3b54133a-7b30-498d-b5ad-dfa095e2414e",
          "name": "Response Time Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "21808b5d-7ccf-4720-8a9f-a28353d0d617",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "8d5a1003-7ebf-4c2a-842c-d367258611ed"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4b894fc8-3ec6-4876-99de-2e742fe95863",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1cf1dc95-8171-4da0-9858-56aee0d2ca41",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 2748
        },
        "id": "3b54133a-7b30-498d-b5ad-dfa095e2414e",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "API responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "19d25947-4a6a-44f6-a0f7-e89afa09578c",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "923c5cf4-d6c0-495c-9af0-556b61c55afa"
        },
        "item": {
          "id": "617a81d1-8c21-45e1-b2fe-ebce0fc35fc4",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70c058f5-4fb4-48f7-93e0-b2376a028421",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "c8a3c038-23b8-49c8-9d01-6c1523c78cf6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a9427443-185e-4307-930c-6bb7dcefb860",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "28ebecab-0890-4451-986e-c2e12c78d7fb",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:56:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "617a81d1-8c21-45e1-b2fe-ebce0fc35fc4",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Handles concurrent requests",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles concurrent requests",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Response structure is consistent",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 12526
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "API documentation is accessible",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "80a0a7d99e1112daaa35c2b6420d67a9",
          "id": "ffebe662-17a6-4487-a130-0cd9b2733050",
          "timestamp": 1757606191150,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c9034824-631c-4bb8-8cbd-3f6ae4373081",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24e1888a-0a02-4724-a9e1-c50113655815",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "57c58487-589b-4c05-8dfd-97c565a9f802"
              }
            }
          ]
        },
        "parent": {
          "id": "5a30defa-b3df-4aea-96c1-0fc15c5da131",
          "name": "üè• System Health & Infrastructure",
          "description": {
            "content": "Test system health, CORS, and basic connectivity",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "d4768343-26c8-4b33-99bb-e273d8f207f1",
              "name": "API Health Check",
              "request": {
                "description": {
                  "content": "Verify API is running and healthy",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba0e8843-a38d-4d2d-b17e-dca2612eaef9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has correct headers', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "3b0ae141-6560-419e-9582-ab66b6e3ae2b"
                  }
                }
              ]
            },
            {
              "id": "c9034824-631c-4bb8-8cbd-3f6ae4373081",
              "name": "API Documentation/OpenAPI",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24e1888a-0a02-4724-a9e1-c50113655815",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API documentation is accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "57c58487-589b-4c05-8dfd-97c565a9f802"
                  }
                }
              ]
            },
            {
              "id": "8ee09e36-7fbd-4ae0-b4fd-8ada07eecd7d",
              "name": "CORS Preflight Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "{{frontend_url}}"
                  },
                  {
                    "key": "Access-Control-Request-Method",
                    "value": "POST"
                  },
                  {
                    "key": "Access-Control-Request-Headers",
                    "value": "Content-Type,Authorization"
                  }
                ],
                "method": "OPTIONS"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7244044e-b4ec-44d5-9cc0-5d1490828c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('CORS headers are present', function () {",
                      "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                      "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                      "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                      "});"
                    ],
                    "_lastExecutionId": "83adcfbc-cec7-4323-8d34-bb90ede9519e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5dd9cc0a-53ae-491c-bb33-5cedba2d182f",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "19383b82-11bc-42e9-becf-18c06d61998b",
          "scriptId": "24e1888a-0a02-4724-a9e1-c50113655815",
          "execution": "57c58487-589b-4c05-8dfd-97c565a9f802"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Registration successful or user exists",
          "message": "expected 422 to be one of [ 201, 400, 409 ]",
          "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "f69628823c5cd7f928373b07f566c976",
          "id": "df205301-0c23-43cc-8d0f-d2c135b06a98",
          "timestamp": 1757606192252,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3284e7ce-d391-4422-b2e7-1b51d3976024",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f308970b-0220-4127-9e6f-d00ff39d9d6c",
          "scriptId": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
          "execution": "1d41d984-3823-4c88-be92-b9d600512bb3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "bf2ffec64b8236201754c4c1c7d1ea04",
          "id": "2e23a48a-b594-44dd-a17c-fff8f316fa42",
          "timestamp": 1757606192807,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "20eb3ade-0255-4316-8f71-963939717352",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "404e463c-f33e-4688-8af3-b6b6a510cdaa",
          "scriptId": "95e67b87-be10-473b-95e6-881f0d3826b9",
          "execution": "d01517ec-41d9-45f3-8a57-7ac786eae288"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains tokens",
          "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
          "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "65c42e8b12b5e4e51c4e835482bcddd8",
          "id": "4066d22f-6090-4950-9468-88594a805dcd",
          "timestamp": 1757606192810,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "20eb3ade-0255-4316-8f71-963939717352",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "404e463c-f33e-4688-8af3-b6b6a510cdaa",
          "scriptId": "95e67b87-be10-473b-95e6-881f0d3826b9",
          "execution": "d01517ec-41d9-45f3-8a57-7ac786eae288"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieval successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a7ed004296ef62f65ad487070dba0be4",
          "id": "4ba86a88-ba4f-447a-bb1e-fba2e2d24978",
          "timestamp": 1757606193352,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "070b485b-6a12-401c-b007-663126696dd7",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "029fdbb9-51d8-44ad-b337-30e56e7d4102",
          "scriptId": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
          "execution": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "8a63d3f10bcfccf73ca45c545ed6394e",
          "id": "3400eeef-4176-4101-8737-4361a74c88f7",
          "timestamp": 1757606193354,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "070b485b-6a12-401c-b007-663126696dd7",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "029fdbb9-51d8-44ad-b337-30e56e7d4102",
          "scriptId": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
          "execution": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token refresh successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8dc8087685865bb2c9b0c357b3d9b3ef",
          "id": "281a1e61-4fa5-48f4-b3d6-8f171aa425ab",
          "timestamp": 1757606193887,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dcb46c3b-efd9-407e-9a4a-5780d50e2a44",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2275cdaf-c3d8-49e8-af65-7683334f805c",
          "scriptId": "2dea8592-321e-4df9-8e98-b4d32012ba91",
          "execution": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logout successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "d9b01805b4dc8168cb7e835a2a713806",
          "id": "bf36d0b9-fb3d-4574-866e-2dc31f3fb157",
          "timestamp": 1757606194421,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
              }
            }
          ]
        },
        "parent": {
          "id": "5018b873-09ff-4309-97b8-bfb265b2cd81",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "340bdcfe-b6fd-42e7-bb68-12776bf79a09",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5457ee8-24de-4c9d-90f6-f1548cd30c1b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d41d984-3823-4c88-be92-b9d600512bb3"
                  }
                }
              ]
            },
            {
              "id": "54ec2881-641b-4f01-937a-5deb99b3a682",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95e67b87-be10-473b-95e6-881f0d3826b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "d01517ec-41d9-45f3-8a57-7ac786eae288"
                  }
                }
              ]
            },
            {
              "id": "e5ccc141-332f-4b88-b5f0-f4749d78069d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ef67a0f-0783-4436-a977-ad5f41dbfb8f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "4f96442b-2b51-4cf3-a325-e61af58fe09c"
                  }
                }
              ]
            },
            {
              "id": "985216ae-fa1c-4c7f-9688-ce56620b4034",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2dea8592-321e-4df9-8e98-b4d32012ba91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "42cda396-7e95-4240-bcdb-5aa106ea0f25"
                  }
                }
              ]
            },
            {
              "id": "cb3b79b4-fa0a-489f-bc00-c2d5bcd065d2",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "37958ce5-9043-4c67-9275-9c9d3df85f96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ffce1e1b-14c9-4edb-a616-20c7aa3ba6c4",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7f677e12-ac42-48e1-9737-8cc35088d7d1",
          "scriptId": "2e3e6db0-7293-4891-93eb-ce314400a3c0",
          "execution": "37958ce5-9043-4c67-9275-9c9d3df85f96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client creation successful",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "17b17297b45d090fd11260c212b8b0da",
          "id": "dab86794-a5db-4801-bf97-e72fd1d9219d",
          "timestamp": 1757606194962,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
              }
            }
          ]
        },
        "parent": {
          "id": "02858302-158e-45da-8eca-07805d4a3b3d",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                  }
                }
              ]
            },
            {
              "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                  }
                }
              ]
            },
            {
              "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                  }
                }
              ]
            },
            {
              "id": "25573a6e-66f9-4099-9519-053e574267b2",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                  }
                }
              ]
            },
            {
              "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4402de9e-27f7-42f8-8f67-dbc392c0d122",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7e18a6dc-6413-409e-84a6-880a86f7faee",
          "scriptId": "626d0700-35ae-4419-99b9-bb420da1b6c6",
          "execution": "812367d2-3a9d-423a-bdc7-c6239dccc181"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get client by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "96f625988eadbbd724a2a69338077272",
          "id": "fda96d54-cd4e-4772-aabc-5d65c2df0a3c",
          "timestamp": 1757606196031,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
              }
            }
          ]
        },
        "parent": {
          "id": "02858302-158e-45da-8eca-07805d4a3b3d",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                  }
                }
              ]
            },
            {
              "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                  }
                }
              ]
            },
            {
              "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                  }
                }
              ]
            },
            {
              "id": "25573a6e-66f9-4099-9519-053e574267b2",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                  }
                }
              ]
            },
            {
              "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "938f548a-d1a1-42d1-b75a-eab7f70cd145",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41de9831-2e66-4775-8623-8b799017cdd8",
          "scriptId": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
          "execution": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Client data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "f506310853bb6b97ed72870e4d92f793",
          "id": "1e60bd04-0dcd-499e-8e62-7413a53a5fce",
          "timestamp": 1757606196033,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
              }
            }
          ]
        },
        "parent": {
          "id": "02858302-158e-45da-8eca-07805d4a3b3d",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                  }
                }
              ]
            },
            {
              "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                  }
                }
              ]
            },
            {
              "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                  }
                }
              ]
            },
            {
              "id": "25573a6e-66f9-4099-9519-053e574267b2",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                  }
                }
              ]
            },
            {
              "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "938f548a-d1a1-42d1-b75a-eab7f70cd145",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41de9831-2e66-4775-8623-8b799017cdd8",
          "scriptId": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
          "execution": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1cf5a2b583858a1135548ac38355999d",
          "id": "8e6f0259-987c-4c54-95e2-90619f519aa7",
          "timestamp": 1757606196568,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "25573a6e-66f9-4099-9519-053e574267b2",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
              }
            }
          ]
        },
        "parent": {
          "id": "02858302-158e-45da-8eca-07805d4a3b3d",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                  }
                }
              ]
            },
            {
              "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                  }
                }
              ]
            },
            {
              "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                  }
                }
              ]
            },
            {
              "id": "25573a6e-66f9-4099-9519-053e574267b2",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                  }
                }
              ]
            },
            {
              "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13587112-4a24-4165-bcfa-9deb322e36e8",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d34b728c-2310-4ceb-96c5-3773064f3790",
          "scriptId": "0c446a68-24da-4baa-b8e9-20b31775bc58",
          "execution": "efe3cef2-1073-4e16-b188-b6c1c684653c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "10d4a63b077a79561acdda3edff711c3",
          "id": "4a2b24ac-3fc4-4a34-afec-1494bdc12445",
          "timestamp": 1757606196569,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "25573a6e-66f9-4099-9519-053e574267b2",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
              }
            }
          ]
        },
        "parent": {
          "id": "02858302-158e-45da-8eca-07805d4a3b3d",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                  }
                }
              ]
            },
            {
              "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                  }
                }
              ]
            },
            {
              "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                  }
                }
              ]
            },
            {
              "id": "25573a6e-66f9-4099-9519-053e574267b2",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                  }
                }
              ]
            },
            {
              "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13587112-4a24-4165-bcfa-9deb322e36e8",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d34b728c-2310-4ceb-96c5-3773064f3790",
          "scriptId": "0c446a68-24da-4baa-b8e9-20b31775bc58",
          "execution": "efe3cef2-1073-4e16-b188-b6c1c684653c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client deletion successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "4493450e4c6607e1cae559563339502e",
          "id": "fca0f169-ff66-4186-8b30-14aac3859c40",
          "timestamp": 1757606197103,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
              }
            }
          ]
        },
        "parent": {
          "id": "02858302-158e-45da-8eca-07805d4a3b3d",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c17f0135-33ab-4c00-a9cb-a730c3bc44cb",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "626d0700-35ae-4419-99b9-bb420da1b6c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "812367d2-3a9d-423a-bdc7-c6239dccc181"
                  }
                }
              ]
            },
            {
              "id": "1f7f3315-2cc0-44fd-9e76-7125f9fa3f36",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9940e2e5-07c7-4120-a8f4-7cd6a96eef36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "4d42b284-9f2b-4ef0-b8de-0460455fc5c6"
                  }
                }
              ]
            },
            {
              "id": "c300c9c1-512b-49bf-9aca-841798b67ae3",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df8ab4c1-43ef-4bc1-8099-3e6c521d5749",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "ed6ba6c0-4704-4579-b77d-f0687f36e070"
                  }
                }
              ]
            },
            {
              "id": "25573a6e-66f9-4099-9519-053e574267b2",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c446a68-24da-4baa-b8e9-20b31775bc58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "efe3cef2-1073-4e16-b188-b6c1c684653c"
                  }
                }
              ]
            },
            {
              "id": "8934a6f8-6802-484d-a104-7fbb6e32cce6",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "273ad935-afd1-4def-b7a1-7c822af5e497",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "adf3fbaa-c11f-4ae8-84d9-14b237ac18bb",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4474f20a-f851-4f45-ba4e-8b5c835b7b3a",
          "scriptId": "273ad935-afd1-4def-b7a1-7c822af5e497",
          "execution": "42b42732-a5cd-41f5-a78e-4b8fbb95b6e6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "eabef9a6ffb6400a330c2c368cf95d41",
          "id": "f6f1a2a9-5fd6-4efa-bb43-c6051d8146ce",
          "timestamp": 1757606197638,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ad6c75e4-bd7e-4144-9fde-d0009810e14e",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cd080eed-b4db-453e-b93d-57faaed1b411",
          "scriptId": "287529b7-709d-4afb-b684-1a58ab682b39",
          "execution": "acb916a9-667e-4bc9-96ec-18e896f8059d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbots successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "d6f39246dba8fe46523ad2aa2e14f725",
          "id": "d3098d5c-a8d2-4879-8826-bb4a5faa8cd1",
          "timestamp": 1757606198173,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "46521e29-2df4-4234-9421-6205c5c34eab",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "043aa5ef-ec8d-4c0d-a49b-d7bf36fa80cf",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fb18a1d0-c2a8-4d1f-94d8-cd2f4ed97684",
          "scriptId": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
          "execution": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "1f5d4cced9d1d28e82c776848860bc18",
          "id": "4e0e2bdc-278e-4d72-9f47-97eff79f80a6",
          "timestamp": 1757606198174,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "46521e29-2df4-4234-9421-6205c5c34eab",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "043aa5ef-ec8d-4c0d-a49b-d7bf36fa80cf",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fb18a1d0-c2a8-4d1f-94d8-cd2f4ed97684",
          "scriptId": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
          "execution": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbot by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "71ab0a54b29a62c80d33eb289ce0189b",
          "id": "339d3c2d-27e8-4430-81d3-529ff280582a",
          "timestamp": 1757606198718,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ea179f9f-1da7-49d9-891c-3855846e12fa",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b4ed8b02-1fd9-443f-b3c1-9d9f28b3f787",
          "scriptId": "551d326d-2d1a-46c2-9469-368748aaf29f",
          "execution": "9358c4d6-8847-4315-9941-595dce32adcd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Chatbot data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "ad178618c7e67b96384574ed5a015906",
          "id": "dfb4647b-bc34-4f42-b4e6-b57702d319a8",
          "timestamp": 1757606198718,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ea179f9f-1da7-49d9-891c-3855846e12fa",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b4ed8b02-1fd9-443f-b3c1-9d9f28b3f787",
          "scriptId": "551d326d-2d1a-46c2-9469-368748aaf29f",
          "execution": "9358c4d6-8847-4315-9941-595dce32adcd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "b36693e3b0a6c2665778679f7cf89418",
          "id": "99fcbfab-b910-422c-bfb7-458c09e30897",
          "timestamp": 1757606199251,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b818b601-f844-43c9-93cc-7324f2a96616",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6576dced-4305-48c3-940a-ca28f8d59663",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10a6315a-e51f-453a-9d6d-79baab6e1b52",
          "scriptId": "83b6481b-e850-427c-8800-452be6c8b7f0",
          "execution": "9669a540-ff57-4e47-be03-63337bb83908"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "6605396d5dfa960f2df20e74ea117867",
          "id": "632fc241-da87-4fdf-a64d-0d96096b1726",
          "timestamp": 1757606199252,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b818b601-f844-43c9-93cc-7324f2a96616",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
              }
            }
          ]
        },
        "parent": {
          "id": "6f870888-8266-43df-a28a-36397485d0a5",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "58219e80-a3df-4322-b517-8aecc79bdccb",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "287529b7-709d-4afb-b684-1a58ab682b39",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "acb916a9-667e-4bc9-96ec-18e896f8059d"
                  }
                }
              ]
            },
            {
              "id": "46521e29-2df4-4234-9421-6205c5c34eab",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0db3c4b9-e58a-4f7b-9d95-90ffe7011076",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "ab3fb790-b6f0-4aac-aeb0-77ffbbf6b19c"
                  }
                }
              ]
            },
            {
              "id": "8089fd88-95e5-45de-bfe5-f8a6419d0ce1",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "551d326d-2d1a-46c2-9469-368748aaf29f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "9358c4d6-8847-4315-9941-595dce32adcd"
                  }
                }
              ]
            },
            {
              "id": "b818b601-f844-43c9-93cc-7324f2a96616",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83b6481b-e850-427c-8800-452be6c8b7f0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9669a540-ff57-4e47-be03-63337bb83908"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6576dced-4305-48c3-940a-ca28f8d59663",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10a6315a-e51f-453a-9d6d-79baab6e1b52",
          "scriptId": "83b6481b-e850-427c-8800-452be6c8b7f0",
          "execution": "9669a540-ff57-4e47-be03-63337bb83908"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "5c86b0639aec75245af52f9fa7cf3615",
          "id": "fc644b65-2ba1-40f3-9732-259b2d92429b",
          "timestamp": 1757606199811,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9750641e-5e4a-41de-a1ef-9ca4ebc5261a",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "169e68d6-1650-4387-963d-3a86cecc6638",
          "scriptId": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
          "execution": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "3d3e25839ea629fc1e5d30f35a0cc7b5",
          "id": "f7cfc7d5-831e-4577-9c99-2a2172f6537a",
          "timestamp": 1757606200339,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ba6006a7-2578-413a-937d-706341171902",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dc9d3a25-8cf7-4364-9805-30a7b698ef8d",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4abcc8a6-03e7-4d40-88d6-bf4c37c5c5a3",
          "scriptId": "ba6006a7-2578-413a-937d-706341171902",
          "execution": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bot response received",
          "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "e698891e922fd739547a86ca7fa54377",
          "id": "bdbd7a0c-4594-44fb-90c5-6c591dfc0e95",
          "timestamp": 1757606200341,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ba6006a7-2578-413a-937d-706341171902",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dc9d3a25-8cf7-4364-9805-30a7b698ef8d",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4abcc8a6-03e7-4d40-88d6-bf4c37c5c5a3",
          "scriptId": "ba6006a7-2578-413a-937d-706341171902",
          "execution": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation history retrieved",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "53418adcf942bd6254463943052fc95c",
          "id": "ff071218-b723-47cf-9df9-eddc93e4a208",
          "timestamp": 1757606200869,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "99c4f495-2724-4eaf-a557-626bb907d009",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2667cfba-94b1-46fa-b861-518771716beb",
          "scriptId": "8783590c-43cb-4263-b870-470d8d01a1a8",
          "execution": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Messages are present",
          "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "c3e00d9df1b4d1d196deb3dbea108533",
          "id": "00e264c4-436d-4b1b-b969-2e504e65a0f5",
          "timestamp": 1757606200870,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "99c4f495-2724-4eaf-a557-626bb907d009",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2667cfba-94b1-46fa-b861-518771716beb",
          "scriptId": "8783590c-43cb-4263-b870-470d8d01a1a8",
          "execution": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get conversations successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "b62167b2a91e528b41e4b2ab7728d895",
          "id": "30435d4c-465f-412c-8989-812dcf91d5ef",
          "timestamp": 1757606201398,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db8251c6-d7a0-45be-855e-6d469493dd52",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "13f7dad4-37de-4f70-8869-2ffc0d2f54d6",
          "scriptId": "cd50fe08-417e-49a5-b862-35966bc4650d",
          "execution": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "6a179b72a3918374b60b4cd4ac2a7d6b",
          "id": "ef37659e-6b79-4d32-a588-30c10c1760ba",
          "timestamp": 1757606201399,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
              }
            }
          ]
        },
        "parent": {
          "id": "6116993d-0fd4-4372-958a-22899a6621f3",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "988479b0-c5a9-4295-99d4-7c662367d09b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff34318b-5ec9-47c2-bfa8-bc61d088a793",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d3dcef97-a92a-4c78-8feb-e3713f94c06b"
                  }
                }
              ]
            },
            {
              "id": "46fe29ea-320a-40d4-a869-5f02f16173fa",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ba6006a7-2578-413a-937d-706341171902",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "6ef9a4f5-2c9c-46d1-b3f9-8cedeaa75285"
                  }
                }
              ]
            },
            {
              "id": "ea62bc51-98be-47f8-80ab-b142ee725a17",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8783590c-43cb-4263-b870-470d8d01a1a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "cb78d09d-d236-4cbe-b22e-b6ae221420dd"
                  }
                }
              ]
            },
            {
              "id": "6bf7dfcd-0a91-462b-8fc0-e807d5b73917",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd50fe08-417e-49a5-b862-35966bc4650d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db8251c6-d7a0-45be-855e-6d469493dd52",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "13f7dad4-37de-4f70-8869-2ffc0d2f54d6",
          "scriptId": "cd50fe08-417e-49a5-b862-35966bc4650d",
          "execution": "1861cc01-c31b-475f-8cd0-0501d5b1b833"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Analytics data retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "9c7f8a840cad5167639396ee07874522",
          "id": "8a0dfe16-e145-498f-8250-aebfdef31784",
          "timestamp": 1757606201927,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5086b95d-814f-41e2-a258-ab967bada593",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
              }
            }
          ]
        },
        "parent": {
          "id": "8abf2af9-bf0a-4bdd-8f52-677eca7f1dc1",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5086b95d-814f-41e2-a258-ab967bada593",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
                  }
                }
              ]
            },
            {
              "id": "f347511b-4b33-4b88-8168-3d382134c34b",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
                  }
                }
              ]
            },
            {
              "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e173d6-7541-4a36-a933-b630374be601",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d5a6396a-695f-447c-b928-9603988cd948",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "400073f3-3c55-40e0-ac87-e0d9c6f27fab",
          "scriptId": "5086b95d-814f-41e2-a258-ab967bada593",
          "execution": "4028963f-a790-4c6e-bf9f-77640ad04a82"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Analytics contains key metrics",
          "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "4685efb4372b72b465200ff206a21599",
          "id": "f1f43de1-4724-4f74-8bed-3dfe23c19263",
          "timestamp": 1757606201928,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5086b95d-814f-41e2-a258-ab967bada593",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
              }
            }
          ]
        },
        "parent": {
          "id": "8abf2af9-bf0a-4bdd-8f52-677eca7f1dc1",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5086b95d-814f-41e2-a258-ab967bada593",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
                  }
                }
              ]
            },
            {
              "id": "f347511b-4b33-4b88-8168-3d382134c34b",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
                  }
                }
              ]
            },
            {
              "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e173d6-7541-4a36-a933-b630374be601",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d5a6396a-695f-447c-b928-9603988cd948",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "400073f3-3c55-40e0-ac87-e0d9c6f27fab",
          "scriptId": "5086b95d-814f-41e2-a258-ab967bada593",
          "execution": "4028963f-a790-4c6e-bf9f-77640ad04a82"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation analytics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "222f308c69cdf27862b3303c9a92bf17",
          "id": "5039e3e9-70fd-45b8-91e6-ab7e96c9abc5",
          "timestamp": 1757606202459,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f347511b-4b33-4b88-8168-3d382134c34b",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
              }
            }
          ]
        },
        "parent": {
          "id": "8abf2af9-bf0a-4bdd-8f52-677eca7f1dc1",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5086b95d-814f-41e2-a258-ab967bada593",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
                  }
                }
              ]
            },
            {
              "id": "f347511b-4b33-4b88-8168-3d382134c34b",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
                  }
                }
              ]
            },
            {
              "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e173d6-7541-4a36-a933-b630374be601",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1b9ab32a-4e44-485f-a3b6-cba99b0c55eb",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e02225b5-b9d6-48ab-b9b8-c666b14d991a",
          "scriptId": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
          "execution": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Performance metrics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "0031538784c482fe2b6ad7cc568f81f7",
          "id": "b2e011d1-bd4c-4eac-9e31-815690269425",
          "timestamp": 1757606202986,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "73e173d6-7541-4a36-a933-b630374be601",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
              }
            }
          ]
        },
        "parent": {
          "id": "8abf2af9-bf0a-4bdd-8f52-677eca7f1dc1",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5086b95d-814f-41e2-a258-ab967bada593",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
                  }
                }
              ]
            },
            {
              "id": "f347511b-4b33-4b88-8168-3d382134c34b",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
                  }
                }
              ]
            },
            {
              "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e173d6-7541-4a36-a933-b630374be601",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2db20d2e-e08e-4dc3-ba22-32061ee3d54d",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e2ea92f1-d8d1-47c6-9166-466f0d756163",
          "scriptId": "73e173d6-7541-4a36-a933-b630374be601",
          "execution": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Performance data contains metrics",
          "message": "expected { detail: 'Not Found' } to have property 'response_time'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "2a8c8dc17871f01da41a93b6622e9516",
          "id": "95d14e29-115e-4a39-b128-f8fa5718d536",
          "timestamp": 1757606202987,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "73e173d6-7541-4a36-a933-b630374be601",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
              }
            }
          ]
        },
        "parent": {
          "id": "8abf2af9-bf0a-4bdd-8f52-677eca7f1dc1",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "5db28fb5-fc0b-420a-8643-85c883db4f72",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5086b95d-814f-41e2-a258-ab967bada593",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "4028963f-a790-4c6e-bf9f-77640ad04a82"
                  }
                }
              ]
            },
            {
              "id": "f347511b-4b33-4b88-8168-3d382134c34b",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43923716-6be6-48b8-bcfc-7bd250b6ac1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "ad462a47-2e39-43fe-8f8c-49010c8c3511"
                  }
                }
              ]
            },
            {
              "id": "e5424fa9-95ac-4b9c-9cff-23734f9d78c9",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73e173d6-7541-4a36-a933-b630374be601",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2db20d2e-e08e-4dc3-ba22-32061ee3d54d",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e2ea92f1-d8d1-47c6-9166-466f0d756163",
          "scriptId": "73e173d6-7541-4a36-a933-b630374be601",
          "execution": "a5cee270-3a85-4651-b6be-e3bbabb552b8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized access blocked",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "665a7d559fea89c6bb7a122c956f0676",
          "id": "60a0fbd6-9f92-41be-bafa-66f8482b5160",
          "timestamp": 1757606203517,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83461649-8040-45fc-9228-2c6daf24a917",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
              }
            }
          ]
        },
        "parent": {
          "id": "d6c772ba-968d-4d6b-9f0d-c546097ec795",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83461649-8040-45fc-9228-2c6daf24a917",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
                  }
                }
              ]
            },
            {
              "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "247ee87e-86b7-485e-873a-36996d53213f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
                  }
                }
              ]
            },
            {
              "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
                  }
                }
              ]
            },
            {
              "id": "0461b28f-8493-44ab-81d0-461906e36e38",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab7f4a53-0e01-4937-9527-84b290a611fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "72305618-1ded-43c9-881e-d6e3bd956558"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2b8c3e13-108e-4f33-9890-9febd8266840",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d6f803ea-0c79-43e1-9753-3e0b27901732",
          "scriptId": "83461649-8040-45fc-9228-2c6daf24a917",
          "execution": "04bad462-abc5-4f51-9478-2247421e407e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error message is informative",
          "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
          "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "adebd60b7cf76e607cf36e74f9bf028a",
          "id": "abf4e7f4-2eff-476c-b123-d7e07b590f16",
          "timestamp": 1757606203518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83461649-8040-45fc-9228-2c6daf24a917",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
              }
            }
          ]
        },
        "parent": {
          "id": "d6c772ba-968d-4d6b-9f0d-c546097ec795",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83461649-8040-45fc-9228-2c6daf24a917",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
                  }
                }
              ]
            },
            {
              "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "247ee87e-86b7-485e-873a-36996d53213f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
                  }
                }
              ]
            },
            {
              "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
                  }
                }
              ]
            },
            {
              "id": "0461b28f-8493-44ab-81d0-461906e36e38",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab7f4a53-0e01-4937-9527-84b290a611fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "72305618-1ded-43c9-881e-d6e3bd956558"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2b8c3e13-108e-4f33-9890-9febd8266840",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d6f803ea-0c79-43e1-9753-3e0b27901732",
          "scriptId": "83461649-8040-45fc-9228-2c6daf24a917",
          "execution": "04bad462-abc5-4f51-9478-2247421e407e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Invalid token rejected",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "bebfa55b9be79c18afafdf5e031b58cc",
          "id": "6cca9580-1ace-45de-ac64-c7206783b05a",
          "timestamp": 1757606204049,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "247ee87e-86b7-485e-873a-36996d53213f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
              }
            }
          ]
        },
        "parent": {
          "id": "d6c772ba-968d-4d6b-9f0d-c546097ec795",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83461649-8040-45fc-9228-2c6daf24a917",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
                  }
                }
              ]
            },
            {
              "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "247ee87e-86b7-485e-873a-36996d53213f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
                  }
                }
              ]
            },
            {
              "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
                  }
                }
              ]
            },
            {
              "id": "0461b28f-8493-44ab-81d0-461906e36e38",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab7f4a53-0e01-4937-9527-84b290a611fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "72305618-1ded-43c9-881e-d6e3bd956558"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f77c6391-dbc6-4440-b43d-d0c87f5056bd",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4f991ff2-7db3-4c25-b83f-91bde3c451b5",
          "scriptId": "247ee87e-86b7-485e-873a-36996d53213f",
          "execution": "33c58d13-0f12-4bed-99c4-f657bac44d99"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Non-existent resource returns 404",
          "message": "expected response to have status code 404 but got 403",
          "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "ee21ee64ae89c94503834a01fbd4094a",
          "id": "65fb809e-4303-44f1-adb2-a4c485d9aaa5",
          "timestamp": 1757606204582,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
              }
            }
          ]
        },
        "parent": {
          "id": "d6c772ba-968d-4d6b-9f0d-c546097ec795",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "9b6e0a14-8e3c-48e1-8b9a-a654686a204b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83461649-8040-45fc-9228-2c6daf24a917",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "04bad462-abc5-4f51-9478-2247421e407e"
                  }
                }
              ]
            },
            {
              "id": "82ab5d6a-5d8d-420d-9ee4-792124efccb6",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "247ee87e-86b7-485e-873a-36996d53213f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "33c58d13-0f12-4bed-99c4-f657bac44d99"
                  }
                }
              ]
            },
            {
              "id": "a1cfe44c-fe3a-44dd-8486-6f4c611fe4b9",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff486872-39a1-4c70-91a1-ea4384ace431",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
                  }
                }
              ]
            },
            {
              "id": "0461b28f-8493-44ab-81d0-461906e36e38",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab7f4a53-0e01-4937-9527-84b290a611fd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "72305618-1ded-43c9-881e-d6e3bd956558"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b36c92f6-2cd8-4ead-a1f1-ea30e7758c6e",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "05b9e948-22a9-47e5-acca-7d1062252e45",
          "scriptId": "ff486872-39a1-4c70-91a1-ea4384ace431",
          "execution": "5e55bef7-de7c-4ffc-9292-bffc53fdb4b7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles concurrent requests",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "d63d7f17cfb8ac12a385b6a5d1cf589e",
          "id": "46b290e9-02eb-4b2d-bb3f-abf576a8eda1",
          "timestamp": 1757606206192,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "617a81d1-8c21-45e1-b2fe-ebce0fc35fc4",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70c058f5-4fb4-48f7-93e0-b2376a028421",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "c8a3c038-23b8-49c8-9d01-6c1523c78cf6"
              }
            }
          ]
        },
        "parent": {
          "id": "ca2d95d8-5697-4ab2-a337-66577e533f82",
          "name": "‚ö° Performance & Load Tests",
          "description": {
            "content": "Test API performance and load handling",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "3b54133a-7b30-498d-b5ad-dfa095e2414e",
              "name": "Response Time Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21808b5d-7ccf-4720-8a9f-a28353d0d617",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('API responds successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8d5a1003-7ebf-4c2a-842c-d367258611ed"
                  }
                }
              ]
            },
            {
              "id": "617a81d1-8c21-45e1-b2fe-ebce0fc35fc4",
              "name": "Concurrent Request Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70c058f5-4fb4-48f7-93e0-b2376a028421",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response structure is consistent', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "c8a3c038-23b8-49c8-9d01-6c1523c78cf6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19d25947-4a6a-44f6-a0f7-e89afa09578c",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "923c5cf4-d6c0-495c-9af0-556b61c55afa",
          "scriptId": "70c058f5-4fb4-48f7-93e0-b2376a028421",
          "execution": "c8a3c038-23b8-49c8-9d01-6c1523c78cf6"
        }
      }
    ],
    "error": null
  }
}