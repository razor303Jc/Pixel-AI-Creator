{
  "info": {
    "name": "Pixel-AI-Creator Complete API Test Suite",
    "description": "Comprehensive API testing covering all endpoints, authentication, CRUD operations, error handling, and integration scenarios",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8002",
      "type": "string",
      "description": "API base URL"
    },
    {
      "key": "frontend_url",
      "value": "http://localhost:3002",
      "type": "string",
      "description": "Frontend URL"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "JWT access token"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string",
      "description": "JWT refresh token"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "client_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "chatbot_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversation_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_email",
      "value": "testuser@pixel.ai",
      "type": "string"
    },
    {
      "key": "test_password",
      "value": "TestPass123!",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• System Health & Infrastructure",
      "description": "Test system health, CORS, and basic connectivity",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Verify API is running and healthy"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has correct headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Documentation/OpenAPI",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/docs",
              "host": ["{{base_url}}"],
              "path": ["docs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "CORS Preflight Check",
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                  "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                  "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîê Authentication & Authorization",
      "description": "Complete authentication flow testing",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Token Refresh",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë• Client Management CRUD",
      "description": "Complete client management operations",
      "item": [
        {
          "name": "Create Client",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Clients",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get clients successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Client by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients/{{client_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "clients", "{{client_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Client",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clients/{{client_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "clients", "{{client_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Client",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients/{{client_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "clients", "{{client_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ü§ñ Chatbot Management CRUD",
      "description": "Complete chatbot management operations",
      "item": [
        {
          "name": "Create Chatbot",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/chatbots",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Chatbots",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/chatbots",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Chatbot by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/chatbots/{{chatbot_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots", "{{chatbot_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Chatbot",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/chatbots/{{chatbot_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots", "{{chatbot_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üí¨ Chat & Conversation Management",
      "description": "Test chat functionality and conversation management",
      "item": [
        {
          "name": "Start Conversation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Conversation History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Analytics & Reporting",
      "description": "Test analytics and reporting endpoints",
      "item": [
        {
          "name": "Get Dashboard Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/analytics/dashboard",
              "host": ["{{base_url}}"],
              "path": ["api", "analytics", "dashboard"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Conversation Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/analytics/conversations?period=7d",
              "host": ["{{base_url}}"],
              "path": ["api", "analytics", "conversations"],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Performance Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/analytics/performance",
              "host": ["{{base_url}}"],
              "path": ["api", "analytics", "performance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîÑ Error Handling & Edge Cases",
      "description": "Test error scenarios and edge cases",
      "item": [
        {
          "name": "Unauthorized Access Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Token Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Non-existent Resource Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients/99999",
              "host": ["{{base_url}}"],
              "path": ["api", "clients", "99999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Data Format Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Validation errors provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚ö° Performance & Load Tests",
      "description": "Test API performance and load handling",
      "item": [
        {
          "name": "Response Time Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Concurrent Request Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/analytics/dashboard",
              "host": ["{{base_url}}"],
              "path": ["api", "analytics", "dashboard"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Add any global setup here",
          "console.log('Running test:', pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Status code is not 5xx', function () {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});",
          "",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});"
        ]
      }
    }
  ]
}
