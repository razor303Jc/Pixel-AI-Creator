{
  "info": {
    "name": "Pixel-AI-Creator Comprehensive API Tests",
    "description": "Complete API testing suite for Frontend-Backend Integration with authentication, CRUD operations, and error handling validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string",
      "description": "Backend API base URL"
    },
    {
      "key": "frontend_url", 
      "value": "http://localhost:3002",
      "type": "string",
      "description": "Frontend application URL"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string",
      "description": "JWT authentication token"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "client_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "chatbot_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• System Health & CORS",
      "description": "Validate system health and CORS configuration",
      "item": [
        {
          "name": "Backend Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Backend is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains API info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Frontend Accessibility Check", 
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{frontend_url}}/",
              "host": ["{{frontend_url}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Frontend is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Frontend serves HTML', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "CORS Preflight Check",
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method", 
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('CORS preflight successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('CORS headers present', function () {",
                  "    pm.expect(pm.response.headers.has('Access-Control-Allow-Origin')).to.be.true;",
                  "    pm.expect(pm.response.headers.has('Access-Control-Allow-Methods')).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîê Authentication Flow",
      "description": "Complete authentication testing including registration, login, and token validation",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@pixelai.com\",\n  \"password\": \"SecurePassword123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"company_name\": \"Pixel AI Test Co\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User data returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.globals.set('user_id', response.user.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"test@pixelai.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('JWT token received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('token_type');",
                  "    pm.globals.set('auth_token', response.access_token);",
                  "});",
                  "",
                  "pm.test('User info included', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Token Validation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token is valid', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('first_name');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë• Client Management CRUD",
      "description": "Test complete client management operations",
      "item": [
        {
          "name": "Create Client",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Corporation\",\n  \"email\": \"contact@acme.com\",\n  \"industry\": \"Technology\",\n  \"company_size\": \"medium\",\n  \"requirements\": \"Customer service chatbot for e-commerce\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Client created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Client data returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.globals.set('client_id', response.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Clients",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients?limit=10&offset=0",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset", 
                  "value": "0"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Clients retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Clients list returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('items');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.items).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Specific Client",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/clients/{{client_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "clients", "{{client_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Client details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client details complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Client",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Corporation Updated\",\n  \"email\": \"contact@acme.com\",\n  \"industry\": \"Technology\",\n  \"company_size\": \"large\",\n  \"requirements\": \"Advanced AI chatbot with multi-language support\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clients/{{client_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "clients", "{{client_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Client updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.company_size).to.equal('large');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ü§ñ Chatbot Management",
      "description": "Test chatbot creation and management operations",
      "item": [
        {
          "name": "Create Chatbot Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Customer Service Bot\",\n  \"description\": \"AI chatbot for customer support\",\n  \"client_id\": \"{{client_id}}\",\n  \"type\": \"chatbot\",\n  \"complexity\": \"advanced\",\n  \"requirements\": \"Handle customer inquiries, product support, and order tracking\",\n  \"personality_traits\": [\"helpful\", \"professional\", \"empathetic\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/chatbots",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Chatbot created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Chatbot data returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.globals.set('chatbot_id', response.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Chatbot Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/chatbots/dashboard/summary",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots", "dashboard", "summary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dashboard data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Dashboard metrics present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_projects');",
                  "    pm.expect(response).to.have.property('active_projects');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Chatbot Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"analyzing\",\n  \"progress\": 25\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/chatbots/{{chatbot_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["api", "chatbots", "{{chatbot_id}}", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Status reflects changes', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('analyzing');",
                  "    pm.expect(response.progress).to.equal(25);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üí¨ Conversation Management",
      "description": "Test conversation handling and messaging",
      "item": [
        {
          "name": "Create Conversation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"title\": \"Customer Support Inquiry\",\n  \"channel\": \"web\",\n  \"metadata\": {\n    \"customer_id\": \"cust_123\",\n    \"priority\": \"medium\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Conversation created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Conversation data returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.globals.set('conversation_id', response.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Message to Conversation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Hello! I need help with my recent order.\",\n  \"sender_type\": \"user\",\n  \"metadata\": {\n    \"timestamp\": \"2025-09-11T12:00:00Z\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Message added successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Message data returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response.sender_type).to.equal('user');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîç Error Handling & Edge Cases",
      "description": "Test error scenarios and validation",
      "item": [
        {
          "name": "Unauthorized Access Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Data Validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"email\": \"invalid-email\",\n  \"company_size\": \"invalid_size\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clients",
              "host": ["{{base_url}}"],
              "path": ["api", "clients"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Validation error returned', function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test('Validation details provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
