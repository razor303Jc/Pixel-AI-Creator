{
  "collection": {
    "item": [
      {
        "id": "2c37ae55-6b11-4dbb-bd28-d56fb2238ff9",
        "name": "üè• System Health & Infrastructure",
        "description": {
          "content": "Test system health, CORS, and basic connectivity",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ecda6d03-a800-46d6-a7e6-52a887ab74a4",
            "name": "API Health Check",
            "request": {
              "description": {
                "content": "Verify API is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "56ecdaf4-c732-48b5-a447-10acdb011c0d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has correct headers', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                  ],
                  "_lastExecutionId": "8af0e1f1-c1d6-48f3-9a86-8d7b3e1facc3"
                }
              }
            ]
          },
          {
            "id": "eebb5701-3d93-4782-b0ed-8d5200a7a965",
            "name": "API Documentation/OpenAPI",
            "request": {
              "url": {
                "path": [
                  "docs"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15d671ab-15c2-4d81-8cf5-8c3cec78e64b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API documentation is accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "a424c268-6457-4845-a28c-3f364ebedd10"
                }
              }
            ]
          },
          {
            "id": "20f78daa-6460-43b2-b9e2-9374399e9701",
            "name": "CORS Preflight Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Origin",
                  "value": "{{frontend_url}}"
                },
                {
                  "key": "Access-Control-Request-Method",
                  "value": "POST"
                },
                {
                  "key": "Access-Control-Request-Headers",
                  "value": "Content-Type,Authorization"
                }
              ],
              "method": "OPTIONS"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "80302155-8887-4d78-8743-9d0b2c8faefc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('CORS headers are present', function () {",
                    "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                    "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                    "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                    "});"
                  ],
                  "_lastExecutionId": "dd568969-7bda-4544-8d78-375ea1b423f4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Complete authentication flow testing",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
            "name": "User Registration",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful or user exists', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.test('Response contains user data', function () {",
                    "        pm.expect(response).to.have.property('user');",
                    "        pm.expect(response.user).to.have.property('email');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                }
              }
            ]
          },
          {
            "id": "6919d7ab-e643-410c-b414-02d023233144",
            "name": "User Login",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response contains tokens', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('access_token');",
                    "    pm.expect(response).to.have.property('refresh_token');",
                    "    pm.expect(response).to.have.property('user');",
                    "});",
                    "",
                    "// Store tokens for subsequent requests",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                    "    pm.collectionVariables.set('user_id', response.user.id);",
                    "}"
                  ],
                  "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                }
              }
            ]
          },
          {
            "id": "16c7bc23-413a-454e-b438-020e9329853d",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieval successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('email');",
                    "    pm.expect(response).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                }
              }
            ]
          },
          {
            "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
            "name": "Token Refresh",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "refresh"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Token refresh successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "}"
                  ],
                  "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                }
              }
            ]
          },
          {
            "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Logout successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "506930d7-91fa-4291-b621-0a3768aa8411",
        "name": "üë• Client Management CRUD",
        "description": {
          "content": "Complete client management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
            "name": "Create Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('client_id', response.id);",
                    "    ",
                    "    pm.test('Client data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('email');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                }
              }
            ]
          },
          {
            "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
            "name": "Get All Clients",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get clients successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                }
              }
            ]
          },
          {
            "id": "822d4d70-864a-4d02-9034-f124ff766307",
            "name": "Get Client by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get client by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Client data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                }
              }
            ]
          },
          {
            "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
            "name": "Update Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "});"
                  ],
                  "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                }
              }
            ]
          },
          {
            "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
            "name": "Delete Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client deletion successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
        "name": "ü§ñ Chatbot Management CRUD",
        "description": {
          "content": "Complete chatbot management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
            "name": "Create Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('chatbot_id', response.id);",
                    "    ",
                    "    pm.test('Chatbot data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('personality');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                }
              }
            ]
          },
          {
            "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
            "name": "Get All Chatbots",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbots successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                }
              }
            ]
          },
          {
            "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
            "name": "Get Chatbot by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbot by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Chatbot data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('personality');",
                    "});"
                  ],
                  "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                }
              }
            ]
          },
          {
            "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
            "name": "Update Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "    pm.expect(response.personality).to.eql('professional');",
                    "});"
                  ],
                  "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
        "name": "üí¨ Chat & Conversation Management",
        "description": {
          "content": "Test chat functionality and conversation management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
            "name": "Start Conversation",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('conversation_id', response.id);",
                    "    ",
                    "    pm.test('Conversation data is correct', function () {",
                    "        pm.expect(response).to.have.property('id');",
                    "        pm.expect(response).to.have.property('chatbot_id');",
                    "        pm.expect(response).to.have.property('messages');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                }
              }
            ]
          },
          {
            "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
            "name": "Send Message",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}",
                  "messages"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Bot response received', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('bot_response');",
                    "    pm.expect(response.bot_response).to.be.a('string');",
                    "});"
                  ],
                  "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                }
              }
            ]
          },
          {
            "id": "663e0252-fe1d-4def-b324-472713a6bf38",
            "name": "Get Conversation History",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation history retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Messages are present', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('messages');",
                    "    pm.expect(response.messages).to.be.an('array');",
                    "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                }
              }
            ]
          },
          {
            "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
            "name": "Get All Conversations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get conversations successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bdfb0812-d9d9-4cd0-bd4e-99b7ab0b2526",
        "name": "üìä Analytics & Reporting",
        "description": {
          "content": "Test analytics and reporting endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
            "name": "Get Dashboard Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Analytics data retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics contains key metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('total_conversations');",
                    "    pm.expect(response).to.have.property('active_chatbots');",
                    "    pm.expect(response).to.have.property('total_clients');",
                    "});"
                  ],
                  "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
                }
              }
            ]
          },
          {
            "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
            "name": "Get Conversation Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "period",
                    "value": "7d"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation analytics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics data is structured', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
                }
              }
            ]
          },
          {
            "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
            "name": "Get Performance Metrics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "performance"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Performance metrics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Performance data contains metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('response_time');",
                    "    pm.expect(response).to.have.property('success_rate');",
                    "});"
                  ],
                  "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c7ce0177-c7ac-475f-89f6-d798733cac7c",
        "name": "üîÑ Error Handling & Edge Cases",
        "description": {
          "content": "Test error scenarios and edge cases",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
            "name": "Unauthorized Access Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized access blocked', function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test('Error message is informative', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
                }
              }
            ]
          },
          {
            "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
            "name": "Invalid Token Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer invalid-token-12345"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid token rejected', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
                }
              }
            ]
          },
          {
            "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
            "name": "Non-existent Resource Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "99999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Non-existent resource returns 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message is clear', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
                }
              }
            ]
          },
          {
            "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
            "name": "Invalid Data Format Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4e82d65c-b432-48e5-b186-49394bae0839",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid data rejected', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                    "});",
                    "",
                    "pm.test('Validation errors provided', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "b99d34cf-98d7-4def-8cf0-882cdd523db6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bbe61ec7-6659-4c93-8832-928e8a02ebd0",
        "name": "‚ö° Performance & Load Tests",
        "description": {
          "content": "Test API performance and load handling",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "b8303497-04b2-481d-a000-585fbe980f72",
            "name": "Response Time Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8d867a10-da8f-4798-8c07-426fba505fc9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "",
                    "pm.test('API responds successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "b7d332c5-1297-4fea-ae06-9bc6f2da44c5"
                }
              }
            ]
          },
          {
            "id": "688fe1ef-e0f1-4611-8614-1add1b6cef92",
            "name": "Concurrent Request Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "68f912bc-03a2-4120-8445-692e8b92b663",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles concurrent requests', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response structure is consistent', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "d2540d54-e708-40bb-a07d-56fddf773862"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "1f96d18b-8c38-4d84-b414-8ac4bc07d004",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "// Add any global setup here",
            "console.log('Running test:', pm.info.requestName);"
          ],
          "_lastExecutionId": "9d523f4a-dd7c-4b49-b65f-7f2c56cf2166"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "e46f48f3-68c7-4f6d-9e9d-e4ef816a212d",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Status code is not 5xx', function () {",
            "    pm.expect(pm.response.code).to.be.below(500);",
            "});",
            "",
            "pm.test('Response time is reasonable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});"
          ],
          "_lastExecutionId": "dd5c840a-4fe2-4307-a4cf-9a84b7873fae"
        }
      }
    ],
    "variable": [
      {
        "description": {
          "content": "API base URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8002",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Frontend URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:3002",
        "key": "frontend_url"
      },
      {
        "description": {
          "content": "JWT access token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "description": {
          "content": "JWT refresh token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "user_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "client_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "chatbot_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "conversation_id"
      },
      {
        "type": "string",
        "value": "testuser@pixel.ai",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "TestPass123!",
        "key": "test_password"
      }
    ],
    "info": {
      "_postman_id": "b4c4c8a3-7187-4aad-8172-0a1547643c71",
      "name": "Pixel-AI-Creator Complete API Test Suite",
      "version": {
        "raw": "3.0.0",
        "major": 3,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "3.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing covering all endpoints, authentication, CRUD operations, error handling, and integration scenarios",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "b4efb7bf-5b85-4fd2-9324-e7b35d694f74",
    "values": []
  },
  "globals": {
    "id": "8a0f3fb5-2620-44f3-a272-3cc13a21d12d",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 90,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 111,
        "pending": 0,
        "failed": 38
      },
      "testScripts": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.966666666666666,
      "responseMin": 2,
      "responseMax": 36,
      "responseSd": 6.15620734615793,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757606362855,
      "completed": 1757606379144
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 30,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f0eed940-7d46-4869-b882-c36b616f245c",
          "httpRequestId": "55b1ea1d-039e-422b-a9e9-ea803312b348"
        },
        "item": {
          "id": "ecda6d03-a800-46d6-a7e6-52a887ab74a4",
          "name": "API Health Check",
          "request": {
            "description": {
              "content": "Verify API is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56ecdaf4-c732-48b5-a447-10acdb011c0d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has correct headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "_lastExecutionId": "8af0e1f1-c1d6-48f3-9a86-8d7b3e1facc3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify API is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a0162aa-87c6-416e-9fad-c4c141b8ba9e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "13547bb7-8a4b-4b42-a053-b03956087e20",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "49"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              112,
              105,
              120,
              101,
              108,
              45,
              97,
              105,
              45,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 36,
          "responseSize": 49
        },
        "id": "ecda6d03-a800-46d6-a7e6-52a887ab74a4",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API is healthy",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has correct headers",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ae26483a-1174-49cb-a114-651dee14689d",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1292464d-36c0-4c2d-a0e6-e62706fab3e7"
        },
        "item": {
          "id": "eebb5701-3d93-4782-b0ed-8d5200a7a965",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15d671ab-15c2-4d81-8cf5-8c3cec78e64b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "a424c268-6457-4845-a28c-3f364ebedd10"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "113cb747-7c1b-4eb1-808b-2d9f7c79f7cf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a620558c-e0b0-45de-840c-6458588650fc",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:23 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "eebb5701-3d93-4782-b0ed-8d5200a7a965",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API documentation is accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "API documentation is accessible",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a9bd326b-804a-4fd6-8662-4f15d3a7c3bd",
          "length": 30,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6eeaf23b-1d0e-4bb2-aa40-4865d723021a"
        },
        "item": {
          "id": "20f78daa-6460-43b2-b9e2-9374399e9701",
          "name": "CORS Preflight Check",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "method": "OPTIONS"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80302155-8887-4d78-8743-9d0b2c8faefc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                  "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                  "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                  "});"
                ],
                "_lastExecutionId": "dd568969-7bda-4544-8d78-375ea1b423f4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "Access-Control-Request-Method",
              "value": "POST"
            },
            {
              "key": "Access-Control-Request-Headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be46c683-05e9-439a-8e51-031575143369",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "OPTIONS"
        },
        "response": {
          "id": "d97eb7fe-0f72-417b-abfe-7f63867bb3ef",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:23 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-methods",
              "value": "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
            },
            {
              "key": "access-control-max-age",
              "value": "600"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              79,
              75
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 2
        },
        "id": "20f78daa-6460-43b2-b9e2-9374399e9701",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "CORS headers are present",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0419f9b3-150c-4853-a180-9d9c02925bb0",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1543a0d4-f510-4e23-b69c-233c356ff20f"
        },
        "item": {
          "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ded337d7-3a0d-4cb2-852f-ba4753050038",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "116",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "190fe18e-b8d8-4ebd-8d0a-bce4ef1e4bbb",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "467"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 467
        },
        "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Registration successful or user exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Registration successful or user exists",
              "message": "expected 422 to be one of [ 201, 400, 409 ]",
              "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d838ae61-af22-4579-af70-a2f18670ff87",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d5bd75f-2169-464f-b8e0-fa9c89870247"
        },
        "item": {
          "id": "6919d7ab-e643-410c-b414-02d023233144",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a24d4161-ff68-42ca-8555-1fa0fdaa2dc8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\"\n}"
          }
        },
        "response": {
          "id": "1ddb28b2-925b-4227-9c03-59e823ea7175",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "32"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 32
        },
        "id": "6919d7ab-e643-410c-b414-02d023233144",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response contains tokens",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains tokens",
              "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
              "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "70d38ec6-d146-4d3a-9107-8b7f465baec5",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "92ba4466-c7d3-4ec0-9daf-8cbdadffba64"
        },
        "item": {
          "id": "16c7bc23-413a-454e-b438-020e9329853d",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9d5ca3fe-a6ff-4905-95fa-73f6b393599f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "737ef624-8ad4-41ab-928d-b42206cfc419",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "16c7bc23-413a-454e-b438-020e9329853d",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Profile retrieval successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieval successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8306a719-0cb7-4177-8ae2-b41303a651d0",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "05da149e-f7ea-4451-9afd-9b0eb41b297f"
        },
        "item": {
          "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "refresh"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b149da33-c66c-4d6c-b36c-3c602bc11c6d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"refresh_token\": \"\"\n}"
          }
        },
        "response": {
          "id": "e10a61cd-c797-44a6-a2e7-ed360aad8867",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Token refresh successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token refresh successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "55757c23-2c11-42ef-b7a4-3b55b9d74fef",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7919bfd0-9aa5-4abf-8566-6bb07db6094f"
        },
        "item": {
          "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bcb4240a-39f1-466f-90f5-7c8f74b3b8d6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "acd6a69f-a509-40ef-ad96-8b7a35ba65cc",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Logout successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logout successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f462e1c4-9822-4882-a855-29da1d04df8f",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b5d3f51c-e9d0-4795-b4b1-19423620f2de"
        },
        "item": {
          "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7bf49383-e47b-4248-b43f-ce89c2a163c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "213",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
          }
        },
        "response": {
          "id": "6b5227ab-f00a-4971-966c-92fd5579f944",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "68"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 68
        },
        "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client creation successful",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e8cf0d1a-674d-4b45-81f7-4699c2a7963c",
          "length": 30,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f90c2914-4e53-4609-8ad4-f2bdb39be637"
        },
        "item": {
          "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
          "name": "Get All Clients",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get clients successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5407c3d4-f6fa-4755-9f77-ccd75d1c614d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "51dca011-7d5c-4799-a1eb-ea377274f4fe",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 2748
        },
        "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get clients successful",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "922a5b4d-d103-4c12-af89-9868cc1dbab8",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bac37f62-1562-46d4-8ded-577fa1fb4f5c"
        },
        "item": {
          "id": "822d4d70-864a-4d02-9034-f124ff766307",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ada8924e-3bb7-4e3e-a333-26d056cf0fae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8fa20987-260a-4baa-812d-edf0262924cf",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "822d4d70-864a-4d02-9034-f124ff766307",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get client by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get client by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Client data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Client data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5004c80-0ff6-41d8-8fee-d43b3050b2eb",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de2f63b2-3958-41d3-bc38-d5cd31913412"
        },
        "item": {
          "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7cafb551-e49c-4047-bec2-ed7c789b67b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "188",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
          }
        },
        "response": {
          "id": "6bac68d5-ee2e-485c-bbd5-6fe16c54bc21",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 31
        },
        "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7475ddc2-5e91-4407-8d19-ac30b2acf4d0",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f292f66b-2d7c-4a3c-9f32-517f3132dfea"
        },
        "item": {
          "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0822bb5e-b153-4b85-b2b0-c48853be2185",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "6468fa1e-fdeb-4fe0-b67a-82fd98bc5e8b",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 31
        },
        "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client deletion successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client deletion successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "91e4a2ce-a762-4e7a-9b6e-53c222f18426",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "497c8dab-b3da-4406-bb5f-e7dabe8a8e53"
        },
        "item": {
          "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "080c5dcd-cc66-4349-9bf3-fe678c8f7369",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "217",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "cd9c7ccc-b2f4-4781-bc1f-31b5536ae67f",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "61d5ae9a-3862-4143-b22a-b70c70713dd1",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5b0012dc-834d-41b2-a837-46a5baa7df7e"
        },
        "item": {
          "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c7597d6a-43ca-4233-9fe6-ed0e007f9c9d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ecc353f2-904f-4b06-804b-5d55dcb75bf4",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbots successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbots successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1bc3eace-1ffe-4d25-bc0d-14773a7131e1",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1a7f810e-75fc-4747-97d8-bf34ed3722af"
        },
        "item": {
          "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6cb0c3ba-25f2-4181-8e30-2c1b5687968b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5fe6e83e-5a35-42b0-87b1-26d23f6222a3",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbot by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbot by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Chatbot data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Chatbot data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "968f8b19-48ed-489c-a0ea-2731170c753b",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4195fdad-370c-40f5-b781-54d8abfda28e"
        },
        "item": {
          "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "017136dc-2d1e-40eb-9d5a-4d03e7c3c4b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "230",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
          }
        },
        "response": {
          "id": "c07e00af-ef96-4e27-aa9c-4fce58c733fb",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 31
        },
        "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "85bfb686-9c55-45e5-aa87-4e38256da19d",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6f6163f8-dbe4-42d3-bb2c-f535397e0719"
        },
        "item": {
          "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a5a00843-5d68-42a2-b56c-97c10052b426",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chatbot_id\": \"\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "d4cd49fd-ea4c-424a-970d-2d393ba849f7",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a129af8e-69f2-4dc5-a2e3-78299f7760ed",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "655d65bd-8799-4725-aa35-172ec59a5906"
        },
        "item": {
          "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              "",
              "messages"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e673409-506b-4c9b-86cb-0f6e69d328ed",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "78",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "9d14b71e-b2c4-4554-888d-e5af77cfb414",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:32 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 22
        },
        "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Bot response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bot response received",
              "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "43af3d44-3aa8-453d-8198-27c12ee444b6",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "55d08432-6eb3-444a-ac75-25f64dcaf4f6"
        },
        "item": {
          "id": "663e0252-fe1d-4def-b324-472713a6bf38",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b86df62-cfe0-4744-92a3-5e7c80895aa6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1cce6c93-d1ce-474d-b497-bfb95023aff1",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:32 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "663e0252-fe1d-4def-b324-472713a6bf38",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation history retrieved",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Messages are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Messages are present",
              "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e498e058-d054-423e-81f7-280ee530f68a",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d848ff63-e192-4717-85a8-daa3b18e661e"
        },
        "item": {
          "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1f28b0e6-1bdc-47ca-a489-4ee081d8ebfe",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9e634288-0eaf-4336-a6f6-b04506d1c6ee",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:33 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get conversations successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get conversations successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2bd37b95-29d1-46a8-b935-bcce55fb7930",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e1143a92-ed64-4c73-8a3e-315923da283c"
        },
        "item": {
          "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09326d8f-96b3-4b66-800b-3d063f0e1e23",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5b0def9d-9e92-429a-ba3d-c8225a7b4c81",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Analytics data retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Analytics data retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Analytics contains key metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Analytics contains key metrics",
              "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dcac26d4-6ca4-454a-a969-30c490ad3cc2",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "17858ec0-5a90-4a6b-b80c-78b698ce6c69"
        },
        "item": {
          "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "period",
                "value": "7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "364b92da-e434-4fb9-b674-5d324150e9f9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b4988dfc-e2b5-4ccc-8aeb-90e9de8efeb0",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation analytics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation analytics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Analytics data is structured",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dfb698b5-e4aa-4eed-8139-9ed39bf7ad8f",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3dbffb57-5ccd-4a70-aa46-3ae997c19673"
        },
        "item": {
          "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "performance"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5a539bb7-1cca-4df4-af30-a6b82eb0dcb5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "100680fa-4475-4a90-b671-d8e4f478e929",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 22
        },
        "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Performance metrics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Performance metrics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Performance data contains metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Performance data contains metrics",
              "message": "expected { detail: 'Not Found' } to have property 'response_time'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e6ac5261-2b8e-4242-a457-88e191bcfc18",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7acd7e1d-5b73-46b2-bcd3-8a1ae344f26a"
        },
        "item": {
          "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c5fcfb3-3177-4d25-8d07-b8f4d1350fd0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "585c256d-a0c4-4e75-aff2-a5e906b1dffe",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 2748
        },
        "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Unauthorized access blocked",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized access blocked",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Error message is informative",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error message is informative",
              "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
              "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ec58b2fe-3b91-4af6-b3c7-6d8c0373b616",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "85635aa7-90b0-487c-b4f7-131aa12c0094"
        },
        "item": {
          "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid-token-12345"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "741ac57c-af57-4ccb-ba48-512311ffea65",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a40efe2a-74e2-4e95-abd8-2310133be2ce",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 2748
        },
        "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid token rejected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Invalid token rejected",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "de2d89a4-0990-4e01-a1b2-2ebb1fc4bec0",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "47c6aa35-0641-4ee0-9b0e-80f72d4c154a"
        },
        "item": {
          "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              "99999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d17b2af4-2cd3-467c-9158-12dd66bc5229",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b659b8a8-2c41-40c4-a6c5-81fb04da3de1",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Non-existent resource returns 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Non-existent resource returns 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Error message is clear",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6e1f0a5-b2a0-4cc1-9764-b01a59f80101",
          "length": 30,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c6531d15-c7ca-4033-a1a3-2139158430f5"
        },
        "item": {
          "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
          "name": "Invalid Data Format Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e82d65c-b432-48e5-b186-49394bae0839",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Validation errors provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "b99d34cf-98d7-4def-8cf0-882cdd523db6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "304bef77-5391-4777-a944-5f5c4e5835ce",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
          }
        },
        "response": {
          "id": "aeff7dde-9154-41fd-9f20-f471ad4b5316",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 385
        },
        "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid data rejected",
            "skipped": false
          },
          {
            "assertion": "Validation errors provided",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e850e81c-b971-4d72-b1db-2682f0b73b6d",
          "length": 30,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "524d0e17-88a4-4430-bc37-be79bd487c76"
        },
        "item": {
          "id": "b8303497-04b2-481d-a000-585fbe980f72",
          "name": "Response Time Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d867a10-da8f-4798-8c07-426fba505fc9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "b7d332c5-1297-4fea-ae06-9bc6f2da44c5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eea0d650-1009-4ee9-9e16-e34f1266b8d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4c02ac37-5f4b-4d2d-b3fc-3830b79752ad",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 2748
        },
        "id": "b8303497-04b2-481d-a000-585fbe980f72",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "API responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a18c5d13-da85-4463-8e10-1a740b044a03",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "427a2d19-96ea-4583-9951-d5f0e7817e8f"
        },
        "item": {
          "id": "688fe1ef-e0f1-4611-8614-1add1b6cef92",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68f912bc-03a2-4120-8445-692e8b92b663",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "d2540d54-e708-40bb-a07d-56fddf773862"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "38553560-edfa-47f2-807c-9b85373ba494",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3dbd72b8-5551-41c7-978d-07ba24572902",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:59:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "688fe1ef-e0f1-4611-8614-1add1b6cef92",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Handles concurrent requests",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles concurrent requests",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Response structure is consistent",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 12526
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "API documentation is accessible",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "80a0a7d99e1112daaa35c2b6420d67a9",
          "id": "d20f1efc-5198-417c-b176-c8d42e92ef17",
          "timestamp": 1757606364000,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "eebb5701-3d93-4782-b0ed-8d5200a7a965",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15d671ab-15c2-4d81-8cf5-8c3cec78e64b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "a424c268-6457-4845-a28c-3f364ebedd10"
              }
            }
          ]
        },
        "parent": {
          "id": "2c37ae55-6b11-4dbb-bd28-d56fb2238ff9",
          "name": "üè• System Health & Infrastructure",
          "description": {
            "content": "Test system health, CORS, and basic connectivity",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ecda6d03-a800-46d6-a7e6-52a887ab74a4",
              "name": "API Health Check",
              "request": {
                "description": {
                  "content": "Verify API is running and healthy",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56ecdaf4-c732-48b5-a447-10acdb011c0d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has correct headers', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "8af0e1f1-c1d6-48f3-9a86-8d7b3e1facc3"
                  }
                }
              ]
            },
            {
              "id": "eebb5701-3d93-4782-b0ed-8d5200a7a965",
              "name": "API Documentation/OpenAPI",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15d671ab-15c2-4d81-8cf5-8c3cec78e64b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API documentation is accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "a424c268-6457-4845-a28c-3f364ebedd10"
                  }
                }
              ]
            },
            {
              "id": "20f78daa-6460-43b2-b9e2-9374399e9701",
              "name": "CORS Preflight Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "{{frontend_url}}"
                  },
                  {
                    "key": "Access-Control-Request-Method",
                    "value": "POST"
                  },
                  {
                    "key": "Access-Control-Request-Headers",
                    "value": "Content-Type,Authorization"
                  }
                ],
                "method": "OPTIONS"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80302155-8887-4d78-8743-9d0b2c8faefc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('CORS headers are present', function () {",
                      "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                      "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                      "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                      "});"
                    ],
                    "_lastExecutionId": "dd568969-7bda-4544-8d78-375ea1b423f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ae26483a-1174-49cb-a114-651dee14689d",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1292464d-36c0-4c2d-a0e6-e62706fab3e7",
          "scriptId": "15d671ab-15c2-4d81-8cf5-8c3cec78e64b",
          "execution": "a424c268-6457-4845-a28c-3f364ebedd10"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Registration successful or user exists",
          "message": "expected 422 to be one of [ 201, 400, 409 ]",
          "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "f69628823c5cd7f928373b07f566c976",
          "id": "5049c18e-3709-4225-98eb-aa0e8096d999",
          "timestamp": 1757606365100,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0419f9b3-150c-4853-a180-9d9c02925bb0",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1543a0d4-f510-4e23-b69c-233c356ff20f",
          "scriptId": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
          "execution": "b8a42549-293f-41fc-9278-d6898bbddd32"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "bf2ffec64b8236201754c4c1c7d1ea04",
          "id": "7e363217-290b-45df-aac2-afbb6a41446b",
          "timestamp": 1757606365640,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6919d7ab-e643-410c-b414-02d023233144",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d838ae61-af22-4579-af70-a2f18670ff87",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d5bd75f-2169-464f-b8e0-fa9c89870247",
          "scriptId": "2728259c-426d-4028-a0c9-a058e93d44e4",
          "execution": "e1fe9b8f-3266-4b70-a496-45e880ded281"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains tokens",
          "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
          "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "65c42e8b12b5e4e51c4e835482bcddd8",
          "id": "09ba7d59-8d23-47e9-b165-4a17a06eb6cb",
          "timestamp": 1757606365642,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6919d7ab-e643-410c-b414-02d023233144",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d838ae61-af22-4579-af70-a2f18670ff87",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d5bd75f-2169-464f-b8e0-fa9c89870247",
          "scriptId": "2728259c-426d-4028-a0c9-a058e93d44e4",
          "execution": "e1fe9b8f-3266-4b70-a496-45e880ded281"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieval successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a7ed004296ef62f65ad487070dba0be4",
          "id": "0e924fee-e402-4736-a3cc-bc99268e0c06",
          "timestamp": 1757606366175,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "16c7bc23-413a-454e-b438-020e9329853d",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "70d38ec6-d146-4d3a-9107-8b7f465baec5",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "92ba4466-c7d3-4ec0-9daf-8cbdadffba64",
          "scriptId": "5d7f37c3-c804-4633-b63a-41c659d5380e",
          "execution": "ab982ef0-b633-482a-99a6-6490fe424c45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "8a63d3f10bcfccf73ca45c545ed6394e",
          "id": "23cf1894-368e-4ce5-965e-05439bbe6bc9",
          "timestamp": 1757606366177,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "16c7bc23-413a-454e-b438-020e9329853d",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "70d38ec6-d146-4d3a-9107-8b7f465baec5",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "92ba4466-c7d3-4ec0-9daf-8cbdadffba64",
          "scriptId": "5d7f37c3-c804-4633-b63a-41c659d5380e",
          "execution": "ab982ef0-b633-482a-99a6-6490fe424c45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token refresh successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8dc8087685865bb2c9b0c357b3d9b3ef",
          "id": "f2f365da-b7c1-415f-8fa6-d86d1577ab76",
          "timestamp": 1757606366718,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8306a719-0cb7-4177-8ae2-b41303a651d0",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "05da149e-f7ea-4451-9afd-9b0eb41b297f",
          "scriptId": "3781b79e-9b8f-4c43-846d-9d48daa30439",
          "execution": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logout successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "d9b01805b4dc8168cb7e835a2a713806",
          "id": "ab114cf6-d20a-4cf8-8b5a-de54ca30b9a8",
          "timestamp": 1757606367267,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
              }
            }
          ]
        },
        "parent": {
          "id": "a8672f44-cb04-4acd-b4d1-80d6ef97d61d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "01600c0e-e7f3-4a6c-b904-4254973dbc52",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed5aee4a-e112-4f8d-8eb2-f80e6bbcef02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b8a42549-293f-41fc-9278-d6898bbddd32"
                  }
                }
              ]
            },
            {
              "id": "6919d7ab-e643-410c-b414-02d023233144",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2728259c-426d-4028-a0c9-a058e93d44e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "e1fe9b8f-3266-4b70-a496-45e880ded281"
                  }
                }
              ]
            },
            {
              "id": "16c7bc23-413a-454e-b438-020e9329853d",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7f37c3-c804-4633-b63a-41c659d5380e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "ab982ef0-b633-482a-99a6-6490fe424c45"
                  }
                }
              ]
            },
            {
              "id": "526523d7-c854-4f6e-8a40-3cee5d3eb345",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3781b79e-9b8f-4c43-846d-9d48daa30439",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "d04599f6-80a8-4ec3-9a43-952d1e306e14"
                  }
                }
              ]
            },
            {
              "id": "3d6ae529-b13e-446d-9991-7ca1c6b0f68b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f403997-0dc9-42dd-8ae3-93661937bc34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "98291aaf-fce0-45da-964b-fd30f252de96"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "55757c23-2c11-42ef-b7a4-3b55b9d74fef",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7919bfd0-9aa5-4abf-8566-6bb07db6094f",
          "scriptId": "4f403997-0dc9-42dd-8ae3-93661937bc34",
          "execution": "98291aaf-fce0-45da-964b-fd30f252de96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client creation successful",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "17b17297b45d090fd11260c212b8b0da",
          "id": "1b4b3d10-5259-454c-9785-7b579b3bf827",
          "timestamp": 1757606367821,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
              }
            }
          ]
        },
        "parent": {
          "id": "506930d7-91fa-4291-b621-0a3768aa8411",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                  }
                }
              ]
            },
            {
              "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                  }
                }
              ]
            },
            {
              "id": "822d4d70-864a-4d02-9034-f124ff766307",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                  }
                }
              ]
            },
            {
              "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                  }
                }
              ]
            },
            {
              "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f462e1c4-9822-4882-a855-29da1d04df8f",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b5d3f51c-e9d0-4795-b4b1-19423620f2de",
          "scriptId": "2845657d-a245-47b2-953e-1b16100e10d0",
          "execution": "6fc74183-4436-468f-81e0-8e4064f18957"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get client by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "96f625988eadbbd724a2a69338077272",
          "id": "6a11108d-cfd1-42eb-a73d-5b4e360b2495",
          "timestamp": 1757606368907,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "822d4d70-864a-4d02-9034-f124ff766307",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
              }
            }
          ]
        },
        "parent": {
          "id": "506930d7-91fa-4291-b621-0a3768aa8411",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                  }
                }
              ]
            },
            {
              "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                  }
                }
              ]
            },
            {
              "id": "822d4d70-864a-4d02-9034-f124ff766307",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                  }
                }
              ]
            },
            {
              "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                  }
                }
              ]
            },
            {
              "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "922a5b4d-d103-4c12-af89-9868cc1dbab8",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bac37f62-1562-46d4-8ded-577fa1fb4f5c",
          "scriptId": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
          "execution": "67087335-0d4f-4d25-b565-62849d547559"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Client data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "f506310853bb6b97ed72870e4d92f793",
          "id": "f4162d97-36cc-43db-a71d-fc54fa6ff62b",
          "timestamp": 1757606368909,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "822d4d70-864a-4d02-9034-f124ff766307",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
              }
            }
          ]
        },
        "parent": {
          "id": "506930d7-91fa-4291-b621-0a3768aa8411",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                  }
                }
              ]
            },
            {
              "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                  }
                }
              ]
            },
            {
              "id": "822d4d70-864a-4d02-9034-f124ff766307",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                  }
                }
              ]
            },
            {
              "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                  }
                }
              ]
            },
            {
              "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "922a5b4d-d103-4c12-af89-9868cc1dbab8",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bac37f62-1562-46d4-8ded-577fa1fb4f5c",
          "scriptId": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
          "execution": "67087335-0d4f-4d25-b565-62849d547559"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1cf5a2b583858a1135548ac38355999d",
          "id": "bb82b531-5c29-4172-9f5d-743b00a677c4",
          "timestamp": 1757606369446,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
              }
            }
          ]
        },
        "parent": {
          "id": "506930d7-91fa-4291-b621-0a3768aa8411",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                  }
                }
              ]
            },
            {
              "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                  }
                }
              ]
            },
            {
              "id": "822d4d70-864a-4d02-9034-f124ff766307",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                  }
                }
              ]
            },
            {
              "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                  }
                }
              ]
            },
            {
              "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d5004c80-0ff6-41d8-8fee-d43b3050b2eb",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de2f63b2-3958-41d3-bc38-d5cd31913412",
          "scriptId": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
          "execution": "1d47469d-9284-4b3d-88a3-96e2942519ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "10d4a63b077a79561acdda3edff711c3",
          "id": "25d5aa16-3d16-451c-b1e1-3a34b0389304",
          "timestamp": 1757606369447,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
              }
            }
          ]
        },
        "parent": {
          "id": "506930d7-91fa-4291-b621-0a3768aa8411",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                  }
                }
              ]
            },
            {
              "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                  }
                }
              ]
            },
            {
              "id": "822d4d70-864a-4d02-9034-f124ff766307",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                  }
                }
              ]
            },
            {
              "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                  }
                }
              ]
            },
            {
              "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d5004c80-0ff6-41d8-8fee-d43b3050b2eb",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de2f63b2-3958-41d3-bc38-d5cd31913412",
          "scriptId": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
          "execution": "1d47469d-9284-4b3d-88a3-96e2942519ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client deletion successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "4493450e4c6607e1cae559563339502e",
          "id": "9627fca4-06d4-42c6-bdd2-869230e5dabc",
          "timestamp": 1757606369986,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
              }
            }
          ]
        },
        "parent": {
          "id": "506930d7-91fa-4291-b621-0a3768aa8411",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "63765fc0-99fb-49f3-9856-21e17c5e0e46",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2845657d-a245-47b2-953e-1b16100e10d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6fc74183-4436-468f-81e0-8e4064f18957"
                  }
                }
              ]
            },
            {
              "id": "1f6baf1f-eb3c-4529-a48c-0d9e9c7934b0",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "accb5e32-e069-4105-8904-3b6ee312b300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5664d774-b9b2-417a-b47b-9d7ed68aee3d"
                  }
                }
              ]
            },
            {
              "id": "822d4d70-864a-4d02-9034-f124ff766307",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c97e895-7148-4c96-ab9b-6144994f4b5b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "67087335-0d4f-4d25-b565-62849d547559"
                  }
                }
              ]
            },
            {
              "id": "0cc4752a-ab33-4915-b73a-95c1aa87801d",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fb20a4d-6a70-4446-8d90-2d72c80e190d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "1d47469d-9284-4b3d-88a3-96e2942519ff"
                  }
                }
              ]
            },
            {
              "id": "b7170b83-e4c2-4985-ae63-8b1b0216da99",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7475ddc2-5e91-4407-8d19-ac30b2acf4d0",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f292f66b-2d7c-4a3c-9f32-517f3132dfea",
          "scriptId": "c907f2ae-cd43-4fe3-a19a-b2c79ddf0501",
          "execution": "d5b0362a-401d-4d1c-ab75-0cb359d1f1ae"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "eabef9a6ffb6400a330c2c368cf95d41",
          "id": "f21d07a7-6f65-4345-9520-4cc38b8e881f",
          "timestamp": 1757606370526,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "91e4a2ce-a762-4e7a-9b6e-53c222f18426",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "497c8dab-b3da-4406-bb5f-e7dabe8a8e53",
          "scriptId": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
          "execution": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbots successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "d6f39246dba8fe46523ad2aa2e14f725",
          "id": "d66987f3-46c7-40f1-ab61-a0f318632f82",
          "timestamp": 1757606371065,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61d5ae9a-3862-4143-b22a-b70c70713dd1",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5b0012dc-834d-41b2-a837-46a5baa7df7e",
          "scriptId": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
          "execution": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "1f5d4cced9d1d28e82c776848860bc18",
          "id": "78f68836-40e5-412e-9df7-40b8b7707502",
          "timestamp": 1757606371066,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61d5ae9a-3862-4143-b22a-b70c70713dd1",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5b0012dc-834d-41b2-a837-46a5baa7df7e",
          "scriptId": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
          "execution": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbot by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "71ab0a54b29a62c80d33eb289ce0189b",
          "id": "4b8f7f5a-b656-4275-8686-9f152e689823",
          "timestamp": 1757606371599,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1bc3eace-1ffe-4d25-bc0d-14773a7131e1",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1a7f810e-75fc-4747-97d8-bf34ed3722af",
          "scriptId": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
          "execution": "f71517b3-c2ce-40e1-8945-2249ac96c136"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Chatbot data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "ad178618c7e67b96384574ed5a015906",
          "id": "1b65f145-3f88-4c5f-93e1-50de2516e829",
          "timestamp": 1757606371601,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1bc3eace-1ffe-4d25-bc0d-14773a7131e1",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1a7f810e-75fc-4747-97d8-bf34ed3722af",
          "scriptId": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
          "execution": "f71517b3-c2ce-40e1-8945-2249ac96c136"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "b36693e3b0a6c2665778679f7cf89418",
          "id": "2e6e5bd2-f2d2-4780-9eb4-f4ad04a8d816",
          "timestamp": 1757606372139,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "968f8b19-48ed-489c-a0ea-2731170c753b",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4195fdad-370c-40f5-b781-54d8abfda28e",
          "scriptId": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
          "execution": "a6ff5156-9b52-4833-b918-972086575edd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "6605396d5dfa960f2df20e74ea117867",
          "id": "bb9d4f90-a197-4b18-955d-81d6955d3134",
          "timestamp": 1757606372140,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
              }
            }
          ]
        },
        "parent": {
          "id": "96d259f0-0fba-4183-bd52-4a3560994a7d",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ba48aeaa-e611-4650-9f3f-c484fb945de5",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb9e469-bee8-4d1d-97d2-3a3aae7c71cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f4a43fe5-9016-42e9-a58c-94ddbdd42ed7"
                  }
                }
              ]
            },
            {
              "id": "85f5b947-9722-4c29-93cb-db2b071bcae9",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c5094f-b1f4-4344-89a4-6eab1733e7ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "286cc230-ca68-4a87-807f-7ed0da26e9e9"
                  }
                }
              ]
            },
            {
              "id": "ff2d86c9-4f5b-439b-8741-328b85fb410f",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d3c3bba-084d-4941-b078-c1ef3c3ccd22",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "f71517b3-c2ce-40e1-8945-2249ac96c136"
                  }
                }
              ]
            },
            {
              "id": "c36ada34-7032-4d04-8f88-9ec3f81a5e75",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "a6ff5156-9b52-4833-b918-972086575edd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "968f8b19-48ed-489c-a0ea-2731170c753b",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4195fdad-370c-40f5-b781-54d8abfda28e",
          "scriptId": "a23f1f20-b6d2-48ea-b164-8e64db7366bd",
          "execution": "a6ff5156-9b52-4833-b918-972086575edd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "5c86b0639aec75245af52f9fa7cf3615",
          "id": "b27458d5-0230-4071-adb8-090ea00fa689",
          "timestamp": 1757606372677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "85bfb686-9c55-45e5-aa87-4e38256da19d",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6f6163f8-dbe4-42d3-bb2c-f535397e0719",
          "scriptId": "4f625ae7-496f-444c-9f03-63b31f18ec83",
          "execution": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "3d3e25839ea629fc1e5d30f35a0cc7b5",
          "id": "856cf3e7-3c11-49c4-b658-2a4db2ffb820",
          "timestamp": 1757606373208,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a129af8e-69f2-4dc5-a2e3-78299f7760ed",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "655d65bd-8799-4725-aa35-172ec59a5906",
          "scriptId": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
          "execution": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bot response received",
          "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "e698891e922fd739547a86ca7fa54377",
          "id": "241ba0c5-23eb-4eec-9768-929556949e11",
          "timestamp": 1757606373209,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a129af8e-69f2-4dc5-a2e3-78299f7760ed",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "655d65bd-8799-4725-aa35-172ec59a5906",
          "scriptId": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
          "execution": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation history retrieved",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "53418adcf942bd6254463943052fc95c",
          "id": "ff130021-c40f-4cd3-9a0d-acea3018c23d",
          "timestamp": 1757606373742,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "663e0252-fe1d-4def-b324-472713a6bf38",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43af3d44-3aa8-453d-8198-27c12ee444b6",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "55d08432-6eb3-444a-ac75-25f64dcaf4f6",
          "scriptId": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
          "execution": "99bab75d-12ad-4164-b920-4b5935dabdc4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Messages are present",
          "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "c3e00d9df1b4d1d196deb3dbea108533",
          "id": "8588f7db-8e9d-4208-9a88-a67907ac586b",
          "timestamp": 1757606373743,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "663e0252-fe1d-4def-b324-472713a6bf38",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43af3d44-3aa8-453d-8198-27c12ee444b6",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "55d08432-6eb3-444a-ac75-25f64dcaf4f6",
          "scriptId": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
          "execution": "99bab75d-12ad-4164-b920-4b5935dabdc4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get conversations successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "b62167b2a91e528b41e4b2ab7728d895",
          "id": "5804f89c-b772-4a26-a505-be93e15ca172",
          "timestamp": 1757606374272,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e498e058-d054-423e-81f7-280ee530f68a",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d848ff63-e192-4717-85a8-daa3b18e661e",
          "scriptId": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
          "execution": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "6a179b72a3918374b60b4cd4ac2a7d6b",
          "id": "979fb41a-14a1-47a5-a65a-2c4f5dfc4995",
          "timestamp": 1757606374273,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
              }
            }
          ]
        },
        "parent": {
          "id": "09f41cc1-9f8a-4727-9473-563937e3429a",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "85b504b8-2221-4004-b3b0-d5ec236f85c5",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f625ae7-496f-444c-9f03-63b31f18ec83",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3e05a159-b2f2-4df7-8f46-1b75cc43a839"
                  }
                }
              ]
            },
            {
              "id": "7aaf084f-d65b-4814-9007-2f6ee36c54ca",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c93e1d9-ba74-4f56-8081-7c8b26f70b7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0a4894d4-2f94-43bc-8e76-feb9beffa416"
                  }
                }
              ]
            },
            {
              "id": "663e0252-fe1d-4def-b324-472713a6bf38",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "329f0cde-266f-4fe4-b1b7-ffd9efae64c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "99bab75d-12ad-4164-b920-4b5935dabdc4"
                  }
                }
              ]
            },
            {
              "id": "a63c302b-2959-4f1c-b9d8-76deceff88d5",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e498e058-d054-423e-81f7-280ee530f68a",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d848ff63-e192-4717-85a8-daa3b18e661e",
          "scriptId": "4399f7e4-13ba-4e9a-86c7-18ebcd3441e3",
          "execution": "dc365a21-db0e-44c6-8aba-6d70167fa40f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Analytics data retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "9c7f8a840cad5167639396ee07874522",
          "id": "49dd64c3-ddae-4132-b621-0297d6da57f0",
          "timestamp": 1757606374805,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
              }
            }
          ]
        },
        "parent": {
          "id": "bdfb0812-d9d9-4cd0-bd4e-99b7ab0b2526",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
                  }
                }
              ]
            },
            {
              "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
                  }
                }
              ]
            },
            {
              "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2bd37b95-29d1-46a8-b935-bcce55fb7930",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e1143a92-ed64-4c73-8a3e-315923da283c",
          "scriptId": "a1b075ef-36d2-4972-921f-2c1487e82631",
          "execution": "3d7acf01-34f4-4368-b35f-71179852409a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Analytics contains key metrics",
          "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "4685efb4372b72b465200ff206a21599",
          "id": "1ccfd08d-09e0-4a48-843f-5df8d47c223e",
          "timestamp": 1757606374806,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
              }
            }
          ]
        },
        "parent": {
          "id": "bdfb0812-d9d9-4cd0-bd4e-99b7ab0b2526",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
                  }
                }
              ]
            },
            {
              "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
                  }
                }
              ]
            },
            {
              "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2bd37b95-29d1-46a8-b935-bcce55fb7930",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e1143a92-ed64-4c73-8a3e-315923da283c",
          "scriptId": "a1b075ef-36d2-4972-921f-2c1487e82631",
          "execution": "3d7acf01-34f4-4368-b35f-71179852409a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation analytics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "222f308c69cdf27862b3303c9a92bf17",
          "id": "dd0e21a0-1682-486a-86ee-f3b8491be54f",
          "timestamp": 1757606375342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
              }
            }
          ]
        },
        "parent": {
          "id": "bdfb0812-d9d9-4cd0-bd4e-99b7ab0b2526",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
                  }
                }
              ]
            },
            {
              "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
                  }
                }
              ]
            },
            {
              "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dcac26d4-6ca4-454a-a969-30c490ad3cc2",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "17858ec0-5a90-4a6b-b80c-78b698ce6c69",
          "scriptId": "db014245-ec67-47bf-bd99-81bf5d3edfde",
          "execution": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Performance metrics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "0031538784c482fe2b6ad7cc568f81f7",
          "id": "d2bdb9b8-a1b8-4a83-8a66-0a53be951f6f",
          "timestamp": 1757606375875,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
              }
            }
          ]
        },
        "parent": {
          "id": "bdfb0812-d9d9-4cd0-bd4e-99b7ab0b2526",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
                  }
                }
              ]
            },
            {
              "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
                  }
                }
              ]
            },
            {
              "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dfb698b5-e4aa-4eed-8139-9ed39bf7ad8f",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3dbffb57-5ccd-4a70-aa46-3ae997c19673",
          "scriptId": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
          "execution": "b960d258-9a94-4d44-9d69-804df36decbb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Performance data contains metrics",
          "message": "expected { detail: 'Not Found' } to have property 'response_time'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "2a8c8dc17871f01da41a93b6622e9516",
          "id": "61283271-2475-4f20-8aaa-7ea9077dabcc",
          "timestamp": 1757606375876,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
              }
            }
          ]
        },
        "parent": {
          "id": "bdfb0812-d9d9-4cd0-bd4e-99b7ab0b2526",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7fc86d47-5ef2-4a16-97b4-d58cde6a54d6",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1b075ef-36d2-4972-921f-2c1487e82631",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "3d7acf01-34f4-4368-b35f-71179852409a"
                  }
                }
              ]
            },
            {
              "id": "d97f769f-35ed-4e9d-b92e-ef77e30114b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db014245-ec67-47bf-bd99-81bf5d3edfde",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "0b8006de-c3b6-4840-b2ea-d97aa6e757e5"
                  }
                }
              ]
            },
            {
              "id": "1a4a317b-06a6-4a23-8a1b-15eb4a32be21",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b960d258-9a94-4d44-9d69-804df36decbb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dfb698b5-e4aa-4eed-8139-9ed39bf7ad8f",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3dbffb57-5ccd-4a70-aa46-3ae997c19673",
          "scriptId": "2449a4f1-15d8-46b9-a2bc-7464f43f6aff",
          "execution": "b960d258-9a94-4d44-9d69-804df36decbb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized access blocked",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "665a7d559fea89c6bb7a122c956f0676",
          "id": "73b58a19-90e0-46fd-9708-bb63de3aa72e",
          "timestamp": 1757606376408,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
              }
            }
          ]
        },
        "parent": {
          "id": "c7ce0177-c7ac-475f-89f6-d798733cac7c",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
                  }
                }
              ]
            },
            {
              "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
                  }
                }
              ]
            },
            {
              "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
                  }
                }
              ]
            },
            {
              "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e82d65c-b432-48e5-b186-49394bae0839",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "b99d34cf-98d7-4def-8cf0-882cdd523db6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e6ac5261-2b8e-4242-a457-88e191bcfc18",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7acd7e1d-5b73-46b2-bcd3-8a1ae344f26a",
          "scriptId": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
          "execution": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error message is informative",
          "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
          "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "adebd60b7cf76e607cf36e74f9bf028a",
          "id": "95230a55-bd27-4d33-aaf6-e29fe7279a4f",
          "timestamp": 1757606376409,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
              }
            }
          ]
        },
        "parent": {
          "id": "c7ce0177-c7ac-475f-89f6-d798733cac7c",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
                  }
                }
              ]
            },
            {
              "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
                  }
                }
              ]
            },
            {
              "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
                  }
                }
              ]
            },
            {
              "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e82d65c-b432-48e5-b186-49394bae0839",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "b99d34cf-98d7-4def-8cf0-882cdd523db6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e6ac5261-2b8e-4242-a457-88e191bcfc18",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7acd7e1d-5b73-46b2-bcd3-8a1ae344f26a",
          "scriptId": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
          "execution": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Invalid token rejected",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "bebfa55b9be79c18afafdf5e031b58cc",
          "id": "73a28114-517d-4588-82a9-182670852205",
          "timestamp": 1757606376970,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
              }
            }
          ]
        },
        "parent": {
          "id": "c7ce0177-c7ac-475f-89f6-d798733cac7c",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
                  }
                }
              ]
            },
            {
              "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
                  }
                }
              ]
            },
            {
              "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
                  }
                }
              ]
            },
            {
              "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e82d65c-b432-48e5-b186-49394bae0839",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "b99d34cf-98d7-4def-8cf0-882cdd523db6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ec58b2fe-3b91-4af6-b3c7-6d8c0373b616",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "85635aa7-90b0-487c-b4f7-131aa12c0094",
          "scriptId": "3c51b31e-3141-4f88-86df-dcff62d0b709",
          "execution": "26b2b5b7-1f74-4257-983e-e33adc818581"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Non-existent resource returns 404",
          "message": "expected response to have status code 404 but got 403",
          "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "ee21ee64ae89c94503834a01fbd4094a",
          "id": "753f3f36-cdb6-4b41-9f85-6a30b863ca42",
          "timestamp": 1757606377518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
              }
            }
          ]
        },
        "parent": {
          "id": "c7ce0177-c7ac-475f-89f6-d798733cac7c",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e11d280f-d0da-4535-8595-2e1a34c10967",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9658c5ea-70f9-4868-96e5-b52cd131aca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "46449eae-09dd-46f8-ad92-fc192b56fb7e"
                  }
                }
              ]
            },
            {
              "id": "79a904ac-5fe6-4e8f-a3ed-c5d7c6baf881",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c51b31e-3141-4f88-86df-dcff62d0b709",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "26b2b5b7-1f74-4257-983e-e33adc818581"
                  }
                }
              ]
            },
            {
              "id": "e61dfb27-1bbc-471d-89b9-c90f12099e29",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5b71f26-b176-45db-b371-2f235b0dc375"
                  }
                }
              ]
            },
            {
              "id": "2faab135-d654-48c1-a95b-cfc325b524e0",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e82d65c-b432-48e5-b186-49394bae0839",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "b99d34cf-98d7-4def-8cf0-882cdd523db6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "de2d89a4-0990-4e01-a1b2-2ebb1fc4bec0",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "47c6aa35-0641-4ee0-9b0e-80f72d4c154a",
          "scriptId": "7b6595f8-968a-4459-aa69-daf9f833dcf2",
          "execution": "a5b71f26-b176-45db-b371-2f235b0dc375"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles concurrent requests",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "d63d7f17cfb8ac12a385b6a5d1cf589e",
          "id": "82fecf4d-30c6-48b2-81ee-b8869ae3581d",
          "timestamp": 1757606379139,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "688fe1ef-e0f1-4611-8614-1add1b6cef92",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68f912bc-03a2-4120-8445-692e8b92b663",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "d2540d54-e708-40bb-a07d-56fddf773862"
              }
            }
          ]
        },
        "parent": {
          "id": "bbe61ec7-6659-4c93-8832-928e8a02ebd0",
          "name": "‚ö° Performance & Load Tests",
          "description": {
            "content": "Test API performance and load handling",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b8303497-04b2-481d-a000-585fbe980f72",
              "name": "Response Time Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d867a10-da8f-4798-8c07-426fba505fc9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('API responds successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "b7d332c5-1297-4fea-ae06-9bc6f2da44c5"
                  }
                }
              ]
            },
            {
              "id": "688fe1ef-e0f1-4611-8614-1add1b6cef92",
              "name": "Concurrent Request Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68f912bc-03a2-4120-8445-692e8b92b663",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response structure is consistent', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "d2540d54-e708-40bb-a07d-56fddf773862"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a18c5d13-da85-4463-8e10-1a740b044a03",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "427a2d19-96ea-4583-9951-d5f0e7817e8f",
          "scriptId": "68f912bc-03a2-4120-8445-692e8b92b663",
          "execution": "d2540d54-e708-40bb-a07d-56fddf773862"
        }
      }
    ],
    "error": null
  }
}