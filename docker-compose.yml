version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pixel-postgres
    environment:
      POSTGRES_DB: pixel_ai
      POSTGRES_USER: pixel_user
      POSTGRES_PASSWORD: pixel_secure_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    networks:
      - pixel-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pixel-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - pixel-network
    restart: unless-stopped

  # FastAPI Backend
  api:
    build: 
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    container_name: pixel-api
    environment:
      - DATABASE_URL=postgresql://pixel_user:pixel_secure_2024@postgres:5432/pixel_ai
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=pixel_ai
      - DATABASE_USER=pixel_user
      - DATABASE_PASSWORD=pixel_secure_2024
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-pixel-ai-secret-key-2024}
    ports:
      - "8002:8000"
    volumes:
      - ./generated-bots:/app/generated-bots
      - ./templates:/app/templates
    depends_on:
      - postgres
      - redis
    networks:
      - pixel-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build: 
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    container_name: pixel-celery-worker
    entrypoint: []
    command: bash -c "cd /app && python -m celery -A core.celery_app worker --loglevel=info --queues=default,conversations,analytics,notifications,maintenance --concurrency=4"
    environment:
      - DATABASE_URL=postgresql://pixel_user:pixel_secure_2024@postgres:5432/pixel_ai
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-pixel-ai-secret-key-2024}
      - C_FORCE_ROOT=1
    volumes:
      - ./generated-bots:/app/generated-bots
      - ./templates:/app/templates
      - celery_logs:/var/log/celery
    depends_on:
      - postgres
      - redis
    networks:
      - pixel-network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build: 
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    container_name: pixel-celery-beat
    entrypoint: []
    command: bash -c "cd /app && python -m celery -A core.celery_app beat --loglevel=info"
    environment:
      - DATABASE_URL=postgresql://pixel_user:pixel_secure_2024@postgres:5432/pixel_ai
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-pixel-ai-secret-key-2024}
      - C_FORCE_ROOT=1
    volumes:
      - ./generated-bots:/app/generated-bots
      - ./templates:/app/templates
      - celery_logs:/var/log/celery
    depends_on:
      - postgres
      - redis
    networks:
      - pixel-network
    restart: unless-stopped

  # Celery Flower Monitoring (Optional)
  celery-flower:
    build: 
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    container_name: pixel-celery-flower
    entrypoint: []
    command: bash -c "cd /app && python -m celery -A core.celery_app flower --port=5555"
    environment:
      - DATABASE_URL=postgresql://pixel_user:pixel_secure_2024@postgres:5432/pixel_ai
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - C_FORCE_ROOT=1
    ports:
      - "5556:5555"
    depends_on:
      - redis
    networks:
      - pixel-network
    restart: unless-stopped

  # React Frontend (Development Mode)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.dev
    container_name: pixel-frontend
    environment:
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3002
      - REACT_APP_API_URL=http://localhost:8002/api
      - REACT_APP_ENVIRONMENT=development
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "3002:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - pixel-network
    restart: unless-stopped

  # ChromaDB Vector Database
  chromadb:
    image: ghcr.io/chroma-core/chroma:0.4.24
    container_name: pixel-chromadb
    environment:
      - ANONYMIZED_TELEMETRY=false
      - IS_PERSISTENT=true
      - PERSIST_DIRECTORY=/chroma/chroma
    ports:
      - "8003:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - pixel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chromadb_data:
    driver: local
  celery_logs:
    driver: local

networks:
  pixel-network:
    driver: bridge
    name: pixel-ai-network
