{
  "collection": {
    "_": {
      "postman_id": "pixel-ai-creator-api-tests"
    },
    "item": [
      {
        "id": "5dba16f0-01f1-4e36-9512-24c7a19dd1b4",
        "name": "Health Check",
        "item": [
          {
            "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
            "name": "API Health Check",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Health check response is valid', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                    "});"
                  ],
                  "_lastExecutionId": "b0a41c39-a767-41a1-a181-1000f73f3efd"
                }
              }
            ]
          },
          {
            "id": "4d6163b8-0a24-4a14-80d7-b6e5cfc94d3f",
            "name": "API Root Endpoint",
            "request": {
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b61096e8-c4c7-4d58-a254-0b2747f8547d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200 or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                    "});",
                    "",
                    "pm.test('Response is JSON', function () {",
                    "    pm.response.to.be.json;",
                    "});"
                  ],
                  "_lastExecutionId": "5704dc72-0fa0-4a37-b648-ad9524c13f8c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b037c333-1c53-43c1-92d3-18efe6030b4a",
        "name": "Authentication",
        "item": [
          {
            "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
            "name": "Register New User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique email for this test",
                    "const timestamp = pm.globals.get('timestamp');",
                    "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                    "pm.environment.set('unique_email', uniqueEmail);",
                    "console.log('Using unique email:', uniqueEmail);"
                  ],
                  "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});",
                    "",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('user_id', jsonData.id);",
                    "    } else if (jsonData.user_id) {",
                    "        pm.environment.set('user_id', jsonData.user_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
                }
              }
            ]
          },
          {
            "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains token', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                    "});",
                    "",
                    "// Store token for authenticated requests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    let token = jsonData.access_token || jsonData.token;",
                    "    if (token) {",
                    "        pm.environment.set('auth_token', token);",
                    "        console.log('Auth token stored for future requests');",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
                }
              }
            ]
          },
          {
            "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieved successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "});"
                  ],
                  "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "141aebe8-74c2-4f9d-a023-8e48747e7ffb",
        "name": "User Management",
        "item": [
          {
            "id": "2139bc7b-796c-4bf3-84e6-cf96f7572093",
            "name": "Get User List",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b912d3a7-fcfb-4af0-a725-9605ca961038",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response is array or paginated object', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "37c2d7ef-c7e3-4b1d-9a24-be415ad22cd4"
                }
              }
            ]
          },
          {
            "id": "4a9b5bc3-0235-42c7-9df9-3348bf9fa0f4",
            "name": "Update User Profile",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{user_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f6b8f60e-d027-4b06-a976-cacc94f24620",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile update processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Updated profile returned', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "aa900010-60a6-499d-a587-6bb9e6a04a85"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "05388e45-ad04-41a3-97a3-563be6644a60",
        "name": "Chat & AI",
        "item": [
          {
            "id": "7db43c7e-b912-4764-b07e-77e2dc94736f",
            "name": "Get Chat History",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bad112ca-2de0-4d5a-b4b9-cca54efbbe6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat history retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains chat data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "1a729191-e473-4731-a011-e46f2dc8b929"
                }
              }
            ]
          },
          {
            "id": "7a58abe4-ce72-43c2-9bfb-08d190cfa357",
            "name": "Create New Chat",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1a475f10-c111-40d4-ad1d-544609369208",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat creation processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Chat created successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                    "    });",
                    "",
                    "    // Store conversation ID for further tests",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('conversation_id', jsonData.id);",
                    "    } else if (jsonData.conversation_id) {",
                    "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "b6478b21-095b-4019-90de-0638e2988628"
                }
              }
            ]
          },
          {
            "id": "4542ed93-fbcd-4228-b6e8-800013095108",
            "name": "Send Chat Message",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "message"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "62f2f437-652b-4206-a428-4928f059dce9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Response contains message data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "c077cbe1-abaa-4b29-8d1a-416aedb36c87"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "21cbbd1e-4013-42dd-be6c-3718d21776d5",
        "name": "Documents",
        "item": [
          {
            "id": "1527e3d2-56f9-4759-a95a-3d3955e3dff8",
            "name": "Get Documents List",
            "request": {
              "url": {
                "path": [
                  "documents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8992d9d5-2ab9-4db2-983a-4c76c449fb59",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Documents list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains documents data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "b4d49d5a-6e02-4c33-89fc-7a9fcc977e16"
                }
              }
            ]
          },
          {
            "id": "cf76bc76-e66a-483f-82ab-25b98eaa1a4e",
            "name": "Upload Document",
            "request": {
              "url": {
                "path": [
                  "documents",
                  "upload"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "file",
                    "value": "This is a test document content for API testing.",
                    "type": "text"
                  },
                  {
                    "key": "filename",
                    "value": "api-test-document.txt",
                    "type": "text"
                  },
                  {
                    "key": "document_type",
                    "value": "text",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "454175a0-cc1c-49eb-90dc-83cb8baaac1c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Document upload processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Document uploaded successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "7668bb9e-113d-403a-bc0e-b8b5fa36f24e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d6627e78-bedd-4e84-ab36-c8ac4d7a000a",
        "name": "Error Handling",
        "item": [
          {
            "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
            "name": "Invalid Endpoint - 404",
            "request": {
              "url": {
                "path": [
                  "invalid-endpoint-test"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid endpoint returns 404', function () {",
                    "    pm.expect(pm.response.code).to.equal(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
                }
              }
            ]
          },
          {
            "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
            "name": "Unauthorized Request - 401",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized request returns 401', function () {",
                    "    pm.expect(pm.response.code).to.equal(401);",
                    "});",
                    "",
                    "pm.test('Unauthorized error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
                }
              }
            ]
          },
          {
            "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
            "name": "Malformed JSON - 400",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \"invalid\": json syntax }"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Malformed JSON returns 400', function () {",
                    "    pm.expect(pm.response.code).to.equal(400);",
                    "});",
                    "",
                    "pm.test('Bad request error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "6a3472a8-c771-4060-a37e-a7d1dc013be6",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Starting API test:', pm.info.requestName);",
            "",
            "// Set timestamp for unique data",
            "pm.globals.set('timestamp', Date.now());"
          ],
          "_lastExecutionId": "b907b6cd-a293-4c39-bbf3-1f659c0ab7c2"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "0dc68ebe-d0c8-464d-8111-bdb0abb9ff32",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Response time is less than 5000ms', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Response has proper headers', function () {",
            "    pm.expect(pm.response.headers.has('content-type')).to.be.true;",
            "});",
            "",
            "console.log('Completed API test:', pm.info.requestName, '- Status:', pm.response.status);"
          ],
          "_lastExecutionId": "4fc0bcaa-da5d-42cf-bbd9-d76c72a933bd"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8002/api",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "api.test@example.com",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "ApiTest123!",
        "key": "test_password"
      },
      {
        "type": "string",
        "value": "",
        "key": "auth_token"
      }
    ],
    "info": {
      "_postman_id": "pixel-ai-creator-api-tests",
      "name": "Pixel AI Creator - API Test Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing for Pixel AI Creator application",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "a570ab94-fb03-4be2-b26f-80bf8b950f94",
    "values": [
      {
        "type": "any",
        "value": "api.test.1757840730673@example.com",
        "key": "unique_email"
      },
      {
        "type": "any",
        "value": 39,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "f0730cca-4576-4a21-b50d-f68c6bb099db",
    "values": [
      {
        "type": "any",
        "value": 1757840731461,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 46,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 16
      },
      "testScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 37.266666666666666,
      "responseMin": 1,
      "responseMax": 265,
      "responseSd": 84.48863171391102,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757840730537,
      "completed": 1757840731480
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55d17b9e-e356-4425-aa2e-855a7b9d5a4e",
          "httpRequestId": "88ecc05b-4b8e-4dbf-b1cd-3650d155dd81"
        },
        "item": {
          "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "b0a41c39-a767-41a1-a181-1000f73f3efd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7da0ea1a-b00c-4171-a485-e38982de5647",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a3626317-1aa5-47be-9cd1-22a93e8cd14b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 22
        },
        "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Health check response is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Health check response is valid",
              "message": "expected { detail: 'Not Found' } to have property 'status'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc063e69-dc9a-4ad4-9dd3-134614ea7ac5",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e561815d-9d79-43fb-aa6d-b8e8ab589aff"
        },
        "item": {
          "id": "4d6163b8-0a24-4a14-80d7-b6e5cfc94d3f",
          "name": "API Root Endpoint",
          "request": {
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b61096e8-c4c7-4d58-a254-0b2747f8547d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "_lastExecutionId": "5704dc72-0fa0-4a37-b648-ad9524c13f8c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "018c020b-5832-4b33-855a-5d32e951083a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a61df506-6318-48e9-8faa-a962bbb8ca3d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 22
        },
        "id": "4d6163b8-0a24-4a14-80d7-b6e5cfc94d3f",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false
          },
          {
            "assertion": "Response is JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6fe66e88-77f6-46e9-b0e1-964ef3e914c8",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ffd6763-58c2-475e-a624-67e1268903a4"
        },
        "item": {
          "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35a448e5-6980-4462-bb67-d190009e775c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"api.test.1757840730673@example.com\",\n    \"password\": \"ApiTest123!\",\n    \"company_name\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "7e36cbfb-9ec7-4327-8e4a-343c1ba0f451",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "114"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              112,
              105,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              55,
              56,
              52,
              48,
              55,
              51,
              48,
              54,
              55,
              51,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 265,
          "responseSize": 114
        },
        "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Registration successful",
            "skipped": false
          },
          {
            "assertion": "Response contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains user data",
              "message": "expected { …(4) } to have property 'id'",
              "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba51f566-7cb5-4595-8cb5-8e1b99cfeece",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38761c66-d466-4888-951b-3fd864ae67da"
        },
        "item": {
          "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "64205412-f1fa-437e-9673-4b05e0cc3c04",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"api.test.1757840730673@example.com\",\n    \"password\": \"ApiTest123!\"\n}"
          }
        },
        "response": {
          "id": "25ab087a-e07c-435a-85af-f0e670242c5d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "329"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              49,
              99,
              50,
              86,
              121,
              88,
              50,
              108,
              107,
              73,
              106,
              111,
              122,
              79,
              83,
              119,
              105,
              90,
              87,
              49,
              104,
              97,
              87,
              119,
              105,
              79,
              105,
              74,
              104,
              99,
              71,
              107,
              117,
              100,
              71,
              86,
              122,
              100,
              67,
              52,
              120,
              78,
              122,
              85,
              51,
              79,
              68,
              81,
              119,
              78,
              122,
              77,
              119,
              78,
              106,
              99,
              122,
              81,
              71,
              86,
              52,
              89,
              87,
              49,
              119,
              98,
              71,
              85,
              117,
              89,
              50,
              57,
              116,
              73,
              105,
              119,
              105,
              99,
              109,
              57,
              115,
              90,
              83,
              73,
              54,
              73,
              110,
              86,
              122,
              90,
              88,
              73,
              105,
              76,
              67,
              74,
              106,
              98,
              71,
              108,
              108,
              98,
              110,
              82,
              102,
              97,
              87,
              81,
              105,
              79,
              106,
              77,
              53,
              76,
              67,
              74,
              108,
              101,
              72,
              65,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              99,
              52,
              78,
              68,
              73,
              49,
              77,
              122,
              69,
              115,
              73,
              110,
              82,
              53,
              99,
              71,
              85,
              105,
              79,
              105,
              74,
              104,
              89,
              50,
              78,
              108,
              99,
              51,
              77,
              105,
              102,
              81,
              46,
              53,
              78,
              116,
              122,
              66,
              48,
              118,
              98,
              80,
              100,
              88,
              90,
              54,
              98,
              69,
              110,
              48,
              104,
              54,
              89,
              51,
              116,
              105,
              45,
              71,
              69,
              113,
              98,
              66,
              122,
              54,
              68,
              98,
              113,
              51,
              88,
              110,
              49,
              50,
              78,
              117,
              56,
              56,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              98,
              101,
              97,
              114,
              101,
              114,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              105,
              110,
              34,
              58,
              49,
              56,
              48,
              48,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              51,
              57,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 239,
          "responseSize": 329
        },
        "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false
          },
          {
            "assertion": "Response contains token",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "Response contains token",
              "message": "Invalid Chai property: or. Did you mean \"of\"?",
              "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "057da55b-6978-4d3a-ad95-f1c13ab73921",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "87f02b48-2687-4395-a86c-4adf78d9574f"
        },
        "item": {
          "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3c5ad00-cdec-40d3-9600-46d8bccba785",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "44a2b722-4639-44bd-9b54-2b2bf7e1d417",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieved successfully",
              "message": "expected 404 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "23be6f11-d614-4e2a-9254-6a2166cf6ecb",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5a2385c3-d1db-48b2-b94c-468c78792de7"
        },
        "item": {
          "id": "2139bc7b-796c-4bf3-84e6-cf96f7572093",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b912d3a7-fcfb-4af0-a725-9605ca961038",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "37c2d7ef-c7e3-4b1d-9a24-be415ad22cd4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0e656242-8528-4536-839d-aa59ea5615f7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "efc81291-2404-4179-8ee0-7c146ad6eba1",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "2139bc7b-796c-4bf3-84e6-cf96f7572093",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "User list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User list retrieved",
              "message": "expected 404 to be one of [ 200, 401, 403 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1d37d878-77a6-43f7-9137-607c5015ab13",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0f683eac-88b8-4ab5-b994-411451000f45"
        },
        "item": {
          "id": "4a9b5bc3-0235-42c7-9df9-3348bf9fa0f4",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6b8f60e-d027-4b06-a976-cacc94f24620",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "aa900010-60a6-499d-a587-6bb9e6a04a85"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users",
              "39"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2e12d954-e117-4cfc-a28d-41bddb3a8317",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "109",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
          }
        },
        "response": {
          "id": "0926d0fb-3b9b-4561-99c8-7b84c2b08e53",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "4a9b5bc3-0235-42c7-9df9-3348bf9fa0f4",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile update processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile update processed",
              "message": "expected 404 to be one of [ 200, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "90836c6c-5c0b-410e-b323-055c3008157d",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3bcd7cde-86dc-4c24-8492-b1ecef93ddc7"
        },
        "item": {
          "id": "7db43c7e-b912-4764-b07e-77e2dc94736f",
          "name": "Get Chat History",
          "request": {
            "url": {
              "path": [
                "chat",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bad112ca-2de0-4d5a-b4b9-cca54efbbe6d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat history retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains chat data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1a729191-e473-4731-a011-e46f2dc8b929"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c0612ad8-952e-4782-953c-79299f4c38e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f6b32243-f0da-497f-8004-0b2057e68109",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "7db43c7e-b912-4764-b07e-77e2dc94736f",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat history retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f4ef1962-eb53-4434-bc45-678b7706a5c9",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ab6e6bff-f1a6-4da6-a2a9-e3bc20fa0f0f"
        },
        "item": {
          "id": "7a58abe4-ce72-43c2-9bfb-08d190cfa357",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a475f10-c111-40d4-ad1d-544609369208",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "b6478b21-095b-4019-90de-0638e2988628"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a4835b5b-954d-4e58-8001-74ad7fde0924",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "95",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
          }
        },
        "response": {
          "id": "fdf24ce3-31e6-4a15-bfb8-f80a9ed5383b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "7a58abe4-ce72-43c2-9bfb-08d190cfa357",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat creation processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chat creation processed",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1d2f34b5-d071-45e7-8337-2b4ebb0fdc7d",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9eb7f464-3f60-42bf-94a2-7aec757f74a4"
        },
        "item": {
          "id": "4542ed93-fbcd-4228-b6e8-800013095108",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62f2f437-652b-4206-a428-4928f059dce9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c077cbe1-abaa-4b29-8d1a-416aedb36c87"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d64ce9f2-5a4d-448b-8170-19871ab26cec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "134",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
          }
        },
        "response": {
          "id": "7523500c-dd59-4d09-970e-cd5abd700fb5",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "4542ed93-fbcd-4228-b6e8-800013095108",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2aeb5f91-c001-48da-b721-a94b85003ec2",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e409ea72-6ddf-4583-ba8c-907415402440"
        },
        "item": {
          "id": "1527e3d2-56f9-4759-a95a-3d3955e3dff8",
          "name": "Get Documents List",
          "request": {
            "url": {
              "path": [
                "documents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8992d9d5-2ab9-4db2-983a-4c76c449fb59",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Documents list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains documents data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b4d49d5a-6e02-4c33-89fc-7a9fcc977e16"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "88e48130-ddb6-4a8a-9c94-f74f5b75084a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3a5dd6d9-7531-4ab3-8e63-af0b64713b9a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "1527e3d2-56f9-4759-a95a-3d3955e3dff8",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Documents list retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "07e94278-db03-4648-831c-1e3015c3d67b",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "70508dbb-c46e-42f1-aae3-efcf24d5f8c1"
        },
        "item": {
          "id": "cf76bc76-e66a-483f-82ab-25b98eaa1a4e",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "454175a0-cc1c-49eb-90dc-83cb8baaac1c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7668bb9e-113d-403a-bc0e-b8b5fa36f24e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozOSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNzMwNjczQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjM5LCJleHAiOjE3NTc4NDI1MzEsInR5cGUiOiJhY2Nlc3MifQ.5NtzB0vbPdXZ6bEn0h6Y3ti-GEqbBz6Dbq3Xn12Nu88"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0c614ab7-0800-469f-ae1e-c80517f78586",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "451",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "value": "This is a test document content for API testing.",
                "type": "text"
              },
              {
                "key": "filename",
                "value": "api-test-document.txt",
                "type": "text"
              },
              {
                "key": "document_type",
                "value": "text",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "4bcad406-caba-4046-ac96-db3c121adeb8",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "DELETE"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 31
        },
        "id": "cf76bc76-e66a-483f-82ab-25b98eaa1a4e",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Document upload processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Document upload processed",
              "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
              "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc19dd28-bb84-427f-aca2-c22446a41b61",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31fa3711-5650-40ac-9e57-fc6b37eb5df6"
        },
        "item": {
          "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "invalid-endpoint-test"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5ec40887-5bf2-4e67-8456-272736d2457c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d0a277f6-9dea-4fbe-99a7-3876af713318",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Invalid endpoint returns 404",
            "skipped": false
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error response has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "39c2a429-23ca-4397-b046-8d3e44bcdbf7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "110826f1-244e-4a49-9028-bc5ce4d9d4d6"
        },
        "item": {
          "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "157a23a6-1d7b-4fb5-8b03-194094739ffd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "01f27ee8-4666-4d93-82cf-eaee862fd9e7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 22
        },
        "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Unauthorized request returns 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized request returns 401",
              "message": "expected 404 to equal 401",
              "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Unauthorized error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Unauthorized error has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d523cfc-ebd5-491e-a855-5dbbbb92dbd4",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d377b743-2c64-4a79-892e-18cea70fe3a6"
        },
        "item": {
          "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ea64f27e-30d3-4c76-ba36-c236facf438c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "26",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"invalid\": json syntax }"
          }
        },
        "response": {
          "id": "7a7b0b86-43dd-47a5-b9ea-4166811e00cb",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:05:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 125
        },
        "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Malformed JSON returns 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Malformed JSON returns 400",
              "message": "expected 422 to equal 400",
              "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Bad request error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bad request error has proper structure",
              "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
              "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 841
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4174ab55415cd8b91968c41aa1025020",
          "id": "cc7ae1db-0df4-4656-9749-d1ee5858eb26",
          "timestamp": 1757840730607,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "b0a41c39-a767-41a1-a181-1000f73f3efd"
              }
            }
          ]
        },
        "parent": {
          "id": "5dba16f0-01f1-4e36-9512-24c7a19dd1b4",
          "name": "Health Check",
          "item": [
            {
              "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "b0a41c39-a767-41a1-a181-1000f73f3efd"
                  }
                }
              ]
            },
            {
              "id": "4d6163b8-0a24-4a14-80d7-b6e5cfc94d3f",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b61096e8-c4c7-4d58-a254-0b2747f8547d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "5704dc72-0fa0-4a37-b648-ad9524c13f8c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55d17b9e-e356-4425-aa2e-855a7b9d5a4e",
          "httpRequestId": "88ecc05b-4b8e-4dbf-b1cd-3650d155dd81",
          "scriptId": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
          "execution": "b0a41c39-a767-41a1-a181-1000f73f3efd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Health check response is valid",
          "message": "expected { detail: 'Not Found' } to have property 'status'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "3fec33c01d5170ce5ae19c74ab2f8cf0",
          "id": "5a064788-4f59-4277-b07c-329d26ca1f44",
          "timestamp": 1757840730611,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "b0a41c39-a767-41a1-a181-1000f73f3efd"
              }
            }
          ]
        },
        "parent": {
          "id": "5dba16f0-01f1-4e36-9512-24c7a19dd1b4",
          "name": "Health Check",
          "item": [
            {
              "id": "999983ff-45f2-41a0-8fee-5181d37da5d6",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "b0a41c39-a767-41a1-a181-1000f73f3efd"
                  }
                }
              ]
            },
            {
              "id": "4d6163b8-0a24-4a14-80d7-b6e5cfc94d3f",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b61096e8-c4c7-4d58-a254-0b2747f8547d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "5704dc72-0fa0-4a37-b648-ad9524c13f8c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55d17b9e-e356-4425-aa2e-855a7b9d5a4e",
          "httpRequestId": "88ecc05b-4b8e-4dbf-b1cd-3650d155dd81",
          "scriptId": "81c9e48d-ed4d-4b0c-9be2-1607d8c570de",
          "execution": "b0a41c39-a767-41a1-a181-1000f73f3efd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains user data",
          "message": "expected { …(4) } to have property 'id'",
          "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "282152ebb61ae5bc2af8dd5de2358177",
          "id": "45b50ed7-58e3-44bb-9800-d5a7c5db8e75",
          "timestamp": 1757840730957,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
              }
            }
          ]
        },
        "parent": {
          "id": "b037c333-1c53-43c1-92d3-18efe6030b4a",
          "name": "Authentication",
          "item": [
            {
              "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
                  }
                }
              ]
            },
            {
              "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
                  }
                }
              ]
            },
            {
              "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6fe66e88-77f6-46e9-b0e1-964ef3e914c8",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ffd6763-58c2-475e-a624-67e1268903a4",
          "scriptId": "9d2475be-d257-492e-848c-3ec34e28e537",
          "execution": "73d455ab-3452-4941-8992-c3b426b0df7d"
        }
      },
      {
        "error": {
          "name": "Error",
          "index": 1,
          "test": "Response contains token",
          "message": "Invalid Chai property: or. Did you mean \"of\"?",
          "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "ee4f665adcf26da82d9bbb5e430da335",
          "id": "f586c4fa-ca31-4f55-bddc-053f61160acd",
          "timestamp": 1757840731224,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
              }
            }
          ]
        },
        "parent": {
          "id": "b037c333-1c53-43c1-92d3-18efe6030b4a",
          "name": "Authentication",
          "item": [
            {
              "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
                  }
                }
              ]
            },
            {
              "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
                  }
                }
              ]
            },
            {
              "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ba51f566-7cb5-4595-8cb5-8e1b99cfeece",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38761c66-d466-4888-951b-3fd864ae67da",
          "scriptId": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
          "execution": "83d16785-2335-4217-aaab-a0437acf73e7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieved successfully",
          "message": "expected 404 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "f45f8aed2e992ff72e00af650c794b81",
          "id": "e3409322-37d1-431c-839d-315948d2c8cf",
          "timestamp": 1757840731249,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
              }
            }
          ]
        },
        "parent": {
          "id": "b037c333-1c53-43c1-92d3-18efe6030b4a",
          "name": "Authentication",
          "item": [
            {
              "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
                  }
                }
              ]
            },
            {
              "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
                  }
                }
              ]
            },
            {
              "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "057da55b-6978-4d3a-ad95-f1c13ab73921",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "87f02b48-2687-4395-a86c-4adf78d9574f",
          "scriptId": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
          "execution": "666e506e-9c35-403a-bd15-bf6ff453487e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "91e550e7570b0dc08f64277821830c36",
          "id": "0b69aa6b-568e-4282-bd04-e7469054ec73",
          "timestamp": 1757840731250,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
              }
            }
          ]
        },
        "parent": {
          "id": "b037c333-1c53-43c1-92d3-18efe6030b4a",
          "name": "Authentication",
          "item": [
            {
              "id": "bf70d2be-d302-4bcd-8f7b-bff525544d44",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "90cf2028-e61c-4238-bbea-00dc563e8714",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "08410a1e-d5ed-4555-a76a-bc509830887e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9d2475be-d257-492e-848c-3ec34e28e537",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "73d455ab-3452-4941-8992-c3b426b0df7d"
                  }
                }
              ]
            },
            {
              "id": "48066b10-d91c-40d6-9d07-bd1c8ba61b6a",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0d8bcff5-ac0d-4113-b6c4-75fe95621ff6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "83d16785-2335-4217-aaab-a0437acf73e7"
                  }
                }
              ]
            },
            {
              "id": "91991d12-c51a-4d9f-be43-093878cc8d36",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "666e506e-9c35-403a-bd15-bf6ff453487e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "057da55b-6978-4d3a-ad95-f1c13ab73921",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "87f02b48-2687-4395-a86c-4adf78d9574f",
          "scriptId": "2d4ebe26-3c10-4a69-ac2e-547920dc5cd5",
          "execution": "666e506e-9c35-403a-bd15-bf6ff453487e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User list retrieved",
          "message": "expected 404 to be one of [ 200, 401, 403 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "dee684aff48b8c31a368ca371bc06b3a",
          "id": "862b4848-567c-4bea-a0cc-82a18d1a1575",
          "timestamp": 1757840731272,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2139bc7b-796c-4bf3-84e6-cf96f7572093",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b912d3a7-fcfb-4af0-a725-9605ca961038",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "37c2d7ef-c7e3-4b1d-9a24-be415ad22cd4"
              }
            }
          ]
        },
        "parent": {
          "id": "141aebe8-74c2-4f9d-a023-8e48747e7ffb",
          "name": "User Management",
          "item": [
            {
              "id": "2139bc7b-796c-4bf3-84e6-cf96f7572093",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b912d3a7-fcfb-4af0-a725-9605ca961038",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "37c2d7ef-c7e3-4b1d-9a24-be415ad22cd4"
                  }
                }
              ]
            },
            {
              "id": "4a9b5bc3-0235-42c7-9df9-3348bf9fa0f4",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6b8f60e-d027-4b06-a976-cacc94f24620",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "aa900010-60a6-499d-a587-6bb9e6a04a85"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "23be6f11-d614-4e2a-9254-6a2166cf6ecb",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5a2385c3-d1db-48b2-b94c-468c78792de7",
          "scriptId": "b912d3a7-fcfb-4af0-a725-9605ca961038",
          "execution": "37c2d7ef-c7e3-4b1d-9a24-be415ad22cd4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile update processed",
          "message": "expected 404 to be one of [ 200, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "3ad691f9c350474b606aa4712ac53ff9",
          "id": "78346c7f-9a29-4d29-a78e-c50badc44c6c",
          "timestamp": 1757840731298,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4a9b5bc3-0235-42c7-9df9-3348bf9fa0f4",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6b8f60e-d027-4b06-a976-cacc94f24620",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "aa900010-60a6-499d-a587-6bb9e6a04a85"
              }
            }
          ]
        },
        "parent": {
          "id": "141aebe8-74c2-4f9d-a023-8e48747e7ffb",
          "name": "User Management",
          "item": [
            {
              "id": "2139bc7b-796c-4bf3-84e6-cf96f7572093",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b912d3a7-fcfb-4af0-a725-9605ca961038",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "37c2d7ef-c7e3-4b1d-9a24-be415ad22cd4"
                  }
                }
              ]
            },
            {
              "id": "4a9b5bc3-0235-42c7-9df9-3348bf9fa0f4",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6b8f60e-d027-4b06-a976-cacc94f24620",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "aa900010-60a6-499d-a587-6bb9e6a04a85"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1d37d878-77a6-43f7-9137-607c5015ab13",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0f683eac-88b8-4ab5-b994-411451000f45",
          "scriptId": "f6b8f60e-d027-4b06-a976-cacc94f24620",
          "execution": "aa900010-60a6-499d-a587-6bb9e6a04a85"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chat creation processed",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "517b49c40884a35fb4070dc67d69990a",
          "id": "f911d437-3532-44bf-b343-f0f0ac643279",
          "timestamp": 1757840731347,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7a58abe4-ce72-43c2-9bfb-08d190cfa357",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a475f10-c111-40d4-ad1d-544609369208",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "b6478b21-095b-4019-90de-0638e2988628"
              }
            }
          ]
        },
        "parent": {
          "id": "05388e45-ad04-41a3-97a3-563be6644a60",
          "name": "Chat & AI",
          "item": [
            {
              "id": "7db43c7e-b912-4764-b07e-77e2dc94736f",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bad112ca-2de0-4d5a-b4b9-cca54efbbe6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1a729191-e473-4731-a011-e46f2dc8b929"
                  }
                }
              ]
            },
            {
              "id": "7a58abe4-ce72-43c2-9bfb-08d190cfa357",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a475f10-c111-40d4-ad1d-544609369208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "b6478b21-095b-4019-90de-0638e2988628"
                  }
                }
              ]
            },
            {
              "id": "4542ed93-fbcd-4228-b6e8-800013095108",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62f2f437-652b-4206-a428-4928f059dce9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c077cbe1-abaa-4b29-8d1a-416aedb36c87"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f4ef1962-eb53-4434-bc45-678b7706a5c9",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ab6e6bff-f1a6-4da6-a2a9-e3bc20fa0f0f",
          "scriptId": "1a475f10-c111-40d4-ad1d-544609369208",
          "execution": "b6478b21-095b-4019-90de-0638e2988628"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "7d883533238ef43427d20169b06b6530",
          "id": "d970c54e-c083-4418-998b-f4854aff44c8",
          "timestamp": 1757840731371,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4542ed93-fbcd-4228-b6e8-800013095108",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62f2f437-652b-4206-a428-4928f059dce9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c077cbe1-abaa-4b29-8d1a-416aedb36c87"
              }
            }
          ]
        },
        "parent": {
          "id": "05388e45-ad04-41a3-97a3-563be6644a60",
          "name": "Chat & AI",
          "item": [
            {
              "id": "7db43c7e-b912-4764-b07e-77e2dc94736f",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bad112ca-2de0-4d5a-b4b9-cca54efbbe6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1a729191-e473-4731-a011-e46f2dc8b929"
                  }
                }
              ]
            },
            {
              "id": "7a58abe4-ce72-43c2-9bfb-08d190cfa357",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a475f10-c111-40d4-ad1d-544609369208",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "b6478b21-095b-4019-90de-0638e2988628"
                  }
                }
              ]
            },
            {
              "id": "4542ed93-fbcd-4228-b6e8-800013095108",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "62f2f437-652b-4206-a428-4928f059dce9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c077cbe1-abaa-4b29-8d1a-416aedb36c87"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1d2f34b5-d071-45e7-8337-2b4ebb0fdc7d",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9eb7f464-3f60-42bf-94a2-7aec757f74a4",
          "scriptId": "62f2f437-652b-4206-a428-4928f059dce9",
          "execution": "c077cbe1-abaa-4b29-8d1a-416aedb36c87"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Document upload processed",
          "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
          "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "f5ce20a503f989c916cb76904f7198ce",
          "id": "794c36fe-fd11-4e6f-b02f-68c0ec32e026",
          "timestamp": 1757840731412,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cf76bc76-e66a-483f-82ab-25b98eaa1a4e",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "454175a0-cc1c-49eb-90dc-83cb8baaac1c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7668bb9e-113d-403a-bc0e-b8b5fa36f24e"
              }
            }
          ]
        },
        "parent": {
          "id": "21cbbd1e-4013-42dd-be6c-3718d21776d5",
          "name": "Documents",
          "item": [
            {
              "id": "1527e3d2-56f9-4759-a95a-3d3955e3dff8",
              "name": "Get Documents List",
              "request": {
                "url": {
                  "path": [
                    "documents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8992d9d5-2ab9-4db2-983a-4c76c449fb59",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Documents list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains documents data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b4d49d5a-6e02-4c33-89fc-7a9fcc977e16"
                  }
                }
              ]
            },
            {
              "id": "cf76bc76-e66a-483f-82ab-25b98eaa1a4e",
              "name": "Upload Document",
              "request": {
                "url": {
                  "path": [
                    "documents",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "value": "This is a test document content for API testing.",
                      "type": "text"
                    },
                    {
                      "key": "filename",
                      "value": "api-test-document.txt",
                      "type": "text"
                    },
                    {
                      "key": "document_type",
                      "value": "text",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "454175a0-cc1c-49eb-90dc-83cb8baaac1c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Document upload processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Document uploaded successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7668bb9e-113d-403a-bc0e-b8b5fa36f24e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "07e94278-db03-4648-831c-1e3015c3d67b",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "70508dbb-c46e-42f1-aae3-efcf24d5f8c1",
          "scriptId": "454175a0-cc1c-49eb-90dc-83cb8baaac1c",
          "execution": "7668bb9e-113d-403a-bc0e-b8b5fa36f24e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error response has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "54a0c4f590dae0b8df599e0cebf0f9c8",
          "id": "25ad46b1-9d32-4cf7-b4e9-ebc226cd0d25",
          "timestamp": 1757840731435,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
              }
            }
          ]
        },
        "parent": {
          "id": "d6627e78-bedd-4e84-ab36-c8ac4d7a000a",
          "name": "Error Handling",
          "item": [
            {
              "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
                  }
                }
              ]
            },
            {
              "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
                  }
                }
              ]
            },
            {
              "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dc19dd28-bb84-427f-aca2-c22446a41b61",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31fa3711-5650-40ac-9e57-fc6b37eb5df6",
          "scriptId": "13d6223d-b373-4d5a-9ce0-01206ad08131",
          "execution": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized request returns 401",
          "message": "expected 404 to equal 401",
          "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "7b3c0af0cf494ab26b3c2934c416969a",
          "id": "2c060658-b530-46b9-9def-e2ef6c6c5cc0",
          "timestamp": 1757840731455,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
              }
            }
          ]
        },
        "parent": {
          "id": "d6627e78-bedd-4e84-ab36-c8ac4d7a000a",
          "name": "Error Handling",
          "item": [
            {
              "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
                  }
                }
              ]
            },
            {
              "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
                  }
                }
              ]
            },
            {
              "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "39c2a429-23ca-4397-b046-8d3e44bcdbf7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "110826f1-244e-4a49-9028-bc5ce4d9d4d6",
          "scriptId": "91001277-e223-4260-aa6a-0e96ca846a19",
          "execution": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Unauthorized error has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "8e5c678810671225d82b6dc1d5130be4",
          "id": "f36e6b06-3d0c-4ac2-80f7-2903ea6877e3",
          "timestamp": 1757840731456,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
              }
            }
          ]
        },
        "parent": {
          "id": "d6627e78-bedd-4e84-ab36-c8ac4d7a000a",
          "name": "Error Handling",
          "item": [
            {
              "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
                  }
                }
              ]
            },
            {
              "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
                  }
                }
              ]
            },
            {
              "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "39c2a429-23ca-4397-b046-8d3e44bcdbf7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "110826f1-244e-4a49-9028-bc5ce4d9d4d6",
          "scriptId": "91001277-e223-4260-aa6a-0e96ca846a19",
          "execution": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Malformed JSON returns 400",
          "message": "expected 422 to equal 400",
          "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "60fc70cc308f1a67aaab5fc2a530a5fc",
          "id": "e33ca34a-80fe-45d7-87f9-acebc63eca48",
          "timestamp": 1757840731475,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
              }
            }
          ]
        },
        "parent": {
          "id": "d6627e78-bedd-4e84-ab36-c8ac4d7a000a",
          "name": "Error Handling",
          "item": [
            {
              "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
                  }
                }
              ]
            },
            {
              "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
                  }
                }
              ]
            },
            {
              "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d523cfc-ebd5-491e-a855-5dbbbb92dbd4",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d377b743-2c64-4a79-892e-18cea70fe3a6",
          "scriptId": "9b7bf127-902b-41f2-bbcc-692728f89b53",
          "execution": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bad request error has proper structure",
          "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
          "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "225cf0641b0ae786b96f702bad5546b5",
          "id": "651f35a6-df34-4970-9b9e-30e919819003",
          "timestamp": 1757840731476,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
              }
            }
          ]
        },
        "parent": {
          "id": "d6627e78-bedd-4e84-ab36-c8ac4d7a000a",
          "name": "Error Handling",
          "item": [
            {
              "id": "0b5220aa-e66b-4e2b-8709-ff17c94cc8b5",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13d6223d-b373-4d5a-9ce0-01206ad08131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed4cbdbd-421e-4339-a507-3584ff25ea5b"
                  }
                }
              ]
            },
            {
              "id": "c2ba61f7-2729-458c-8ac1-2be4977b0bab",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91001277-e223-4260-aa6a-0e96ca846a19",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "49a1a756-a02a-4a58-92d1-e37a49ee9a9a"
                  }
                }
              ]
            },
            {
              "id": "05ad79d7-6908-47b0-b31d-380ee9989eee",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b7bf127-902b-41f2-bbcc-692728f89b53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d523cfc-ebd5-491e-a855-5dbbbb92dbd4",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d377b743-2c64-4a79-892e-18cea70fe3a6",
          "scriptId": "9b7bf127-902b-41f2-bbcc-692728f89b53",
          "execution": "a5d2d67b-14e4-4b41-9ddd-91471a800068"
        }
      }
    ],
    "error": null
  }
}