{
  "collection": {
    "_": {
      "postman_id": "pixel-ai-creator-api-tests"
    },
    "item": [
      {
        "id": "e57ceb49-b365-4045-b254-fbdf07adbdd2",
        "name": "Health Check",
        "item": [
          {
            "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
            "name": "API Health Check",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Health check response is valid', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                    "});"
                  ],
                  "_lastExecutionId": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
                }
              }
            ]
          },
          {
            "id": "7a80422c-6d40-4542-84fa-2f2dab3fac4c",
            "name": "API Root Endpoint",
            "request": {
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a70fb65a-7a1e-442e-a3f6-57fc2da18bf8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200 or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                    "});",
                    "",
                    "pm.test('Response is JSON', function () {",
                    "    pm.response.to.be.json;",
                    "});"
                  ],
                  "_lastExecutionId": "0f4b9a8c-2bc3-48dc-a840-c3059641f993"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4ad2e24d-a398-4222-89ed-f5d6cba0bffb",
        "name": "Authentication",
        "item": [
          {
            "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
            "name": "Register New User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f83eef2d-8dff-43dc-b5fc-8e6888823d58",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique email for this test",
                    "const timestamp = pm.globals.get('timestamp');",
                    "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                    "pm.environment.set('unique_email', uniqueEmail);",
                    "console.log('Using unique email:', uniqueEmail);"
                  ],
                  "_lastExecutionId": "533d7a9d-bac0-41ec-bc08-c6254304aa1f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});",
                    "",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('user_id', jsonData.id);",
                    "    } else if (jsonData.user_id) {",
                    "        pm.environment.set('user_id', jsonData.user_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
                }
              }
            ]
          },
          {
            "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains token', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                    "});",
                    "",
                    "// Store token for authenticated requests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    let token = jsonData.access_token || jsonData.token;",
                    "    if (token) {",
                    "        pm.environment.set('auth_token', token);",
                    "        console.log('Auth token stored for future requests');",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
                }
              }
            ]
          },
          {
            "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieved successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "});"
                  ],
                  "_lastExecutionId": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f4d3fbb3-8cbc-45e0-bbcd-3627d19039ae",
        "name": "User Management",
        "item": [
          {
            "id": "3a974352-a389-4d7c-9ccb-7724868dcf18",
            "name": "Get User List",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c422fe73-016b-4e04-85d4-9e0aa063e25b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response is array or paginated object', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "be575503-cc75-4708-8fae-f4af440b1e79"
                }
              }
            ]
          },
          {
            "id": "ebc6d238-7e2f-4e99-baab-985f59c2583c",
            "name": "Update User Profile",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{user_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a55f8b42-86b2-49a3-8571-fdbbf793b33f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile update processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Updated profile returned', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "188d12dc-1fed-4eb9-b367-072c6079ddf2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bb247a44-ccd4-487f-8811-4fc1c421501f",
        "name": "Chat & AI",
        "item": [
          {
            "id": "8a8e7dfc-c2e5-4626-8266-5c84a3328339",
            "name": "Get Chat History",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0eed40fd-d717-4651-b04b-52a11a0c685f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat history retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains chat data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "0322afab-86ac-4cfa-8bc8-20c42aa8dc3d"
                }
              }
            ]
          },
          {
            "id": "fe3b94d8-d964-4063-ad9f-495b551487c7",
            "name": "Create New Chat",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1b3d4320-cd2d-4dd1-8f7e-9755d27796d8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat creation processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Chat created successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                    "    });",
                    "",
                    "    // Store conversation ID for further tests",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('conversation_id', jsonData.id);",
                    "    } else if (jsonData.conversation_id) {",
                    "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "fb222eca-d4e8-46ca-8675-b36b1e05ef92"
                }
              }
            ]
          },
          {
            "id": "6ee9315d-e15c-4039-9365-598f6a6f8df8",
            "name": "Send Chat Message",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "message"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9d73391f-71e9-4798-b28d-2613ffd4cfad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Response contains message data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "fd54d711-9769-4b74-ab41-737c355a9a3d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8e136f65-7810-4d77-8f93-d3ee9efd7de1",
        "name": "Documents",
        "item": [
          {
            "id": "564b7158-3cdf-49f8-96e8-822a5ad5e022",
            "name": "Get Documents List",
            "request": {
              "url": {
                "path": [
                  "documents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0593c531-e052-4c91-a6ad-787c9c7b857f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Documents list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains documents data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "aeb69d80-71dd-4ca9-bf20-c1234fe3ffac"
                }
              }
            ]
          },
          {
            "id": "1f3150a5-e66b-4712-98f2-0d7990af9ce4",
            "name": "Upload Document",
            "request": {
              "url": {
                "path": [
                  "documents",
                  "upload"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "file",
                    "value": "This is a test document content for API testing.",
                    "type": "text"
                  },
                  {
                    "key": "filename",
                    "value": "api-test-document.txt",
                    "type": "text"
                  },
                  {
                    "key": "document_type",
                    "value": "text",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "80a1d060-5919-455f-a13a-52b18ee6a09f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Document upload processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Document uploaded successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "317bb143-6ca7-439b-b0fe-bce2abb25ecd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b9f32ea1-ca76-4e71-be45-05638e53ea2b",
        "name": "Error Handling",
        "item": [
          {
            "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
            "name": "Invalid Endpoint - 404",
            "request": {
              "url": {
                "path": [
                  "invalid-endpoint-test"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid endpoint returns 404', function () {",
                    "    pm.expect(pm.response.code).to.equal(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
                }
              }
            ]
          },
          {
            "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
            "name": "Unauthorized Request - 401",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized request returns 401', function () {",
                    "    pm.expect(pm.response.code).to.equal(401);",
                    "});",
                    "",
                    "pm.test('Unauthorized error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
                }
              }
            ]
          },
          {
            "id": "03168bd7-19de-47d8-9129-da211439742b",
            "name": "Malformed JSON - 400",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \"invalid\": json syntax }"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Malformed JSON returns 400', function () {",
                    "    pm.expect(pm.response.code).to.equal(400);",
                    "});",
                    "",
                    "pm.test('Bad request error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "77f86b1a-f946-443b-a331-a74546519311",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Starting API test:', pm.info.requestName);",
            "",
            "// Set timestamp for unique data",
            "pm.globals.set('timestamp', Date.now());"
          ],
          "_lastExecutionId": "e2ee674c-dee0-43bf-8e59-c7256c99787b"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "85f19096-40c3-4593-9006-6c814b2294f2",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Response time is less than 5000ms', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Response has proper headers', function () {",
            "    pm.expect(pm.response.headers.has('content-type')).to.be.true;",
            "});",
            "",
            "console.log('Completed API test:', pm.info.requestName, '- Status:', pm.response.status);"
          ],
          "_lastExecutionId": "02b705fa-9bd5-4540-aeb1-b1f745fe3b49"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8002/api",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "api.test@example.com",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "ApiTest123!",
        "key": "test_password"
      },
      {
        "type": "string",
        "value": "",
        "key": "auth_token"
      }
    ],
    "info": {
      "_postman_id": "pixel-ai-creator-api-tests",
      "name": "Pixel AI Creator - API Test Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing for Pixel AI Creator application",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "56f067b3-c259-477c-949a-9af948c9cedd",
    "values": [
      {
        "type": "any",
        "value": "api.test.1757843437540@example.com",
        "key": "unique_email"
      },
      {
        "type": "any",
        "value": 59,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "5b16bd7c-26b7-4780-bb5f-f2cc3c3ad7b5",
    "values": [
      {
        "type": "any",
        "value": 1757843438505,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 46,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 54,
        "pending": 0,
        "failed": 15
      },
      "testScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 46.86666666666667,
      "responseMin": 2,
      "responseMax": 324,
      "responseSd": 104.0857765926204,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757843437414,
      "completed": 1757843438522
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e180c973-6b7d-42ba-9e72-7604c5b84726",
          "httpRequestId": "99d6b223-062e-4740-864b-df35b0e34f42"
        },
        "item": {
          "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9125ca8-15db-4aba-93f6-966510ebc854",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2dd21d01-055c-4509-97da-60b449e9b21e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 22
        },
        "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Health check response is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Health check response is valid",
              "message": "expected { detail: 'Not Found' } to have property 'status'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d438a59-961d-48c1-afd6-447f43bbccf1",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "77a49daf-338d-440b-a540-a95eaa64cd38"
        },
        "item": {
          "id": "7a80422c-6d40-4542-84fa-2f2dab3fac4c",
          "name": "API Root Endpoint",
          "request": {
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a70fb65a-7a1e-442e-a3f6-57fc2da18bf8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "_lastExecutionId": "0f4b9a8c-2bc3-48dc-a840-c3059641f993"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "093c054c-d62e-4716-b7d9-4767de86181f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "039584bc-2d2e-4182-8e8b-938a8367ab7e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 22
        },
        "id": "7a80422c-6d40-4542-84fa-2f2dab3fac4c",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false
          },
          {
            "assertion": "Response is JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e3efc139-d0b7-45cb-bbed-48f7c8278f55",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "afbe236b-6aa8-4927-bbfb-7db304c235d6"
        },
        "item": {
          "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f83eef2d-8dff-43dc-b5fc-8e6888823d58",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "533d7a9d-bac0-41ec-bc08-c6254304aa1f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d39fb040-7464-4bda-ad16-3c1bf456b7c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"api.test.1757843437540@example.com\",\n    \"password\": \"ApiTest123!\",\n    \"company_name\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "556cf2ce-64b1-4fe4-bfd3-d8a2dcd5efd8",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "114"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              53,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              112,
              105,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              55,
              56,
              52,
              51,
              52,
              51,
              55,
              53,
              52,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 324,
          "responseSize": 114
        },
        "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Registration successful",
            "skipped": false
          },
          {
            "assertion": "Response contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains user data",
              "message": "expected { …(4) } to have property 'id'",
              "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fe5934df-fa24-44fa-9a81-3c33bebc6b26",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce47b6d2-cb0d-4a72-be38-865163c7d225"
        },
        "item": {
          "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "39ee3bd0-59c0-412e-97ff-e271dbc5bf97",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"api.test.1757843437540@example.com\",\n    \"password\": \"ApiTest123!\"\n}"
          }
        },
        "response": {
          "id": "41f303bf-4a7c-482f-aab4-9f7a3cce82f8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "329"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              49,
              99,
              50,
              86,
              121,
              88,
              50,
              108,
              107,
              73,
              106,
              111,
              49,
              79,
              83,
              119,
              105,
              90,
              87,
              49,
              104,
              97,
              87,
              119,
              105,
              79,
              105,
              74,
              104,
              99,
              71,
              107,
              117,
              100,
              71,
              86,
              122,
              100,
              67,
              52,
              120,
              78,
              122,
              85,
              51,
              79,
              68,
              81,
              122,
              78,
              68,
              77,
              51,
              78,
              84,
              81,
              119,
              81,
              71,
              86,
              52,
              89,
              87,
              49,
              119,
              98,
              71,
              85,
              117,
              89,
              50,
              57,
              116,
              73,
              105,
              119,
              105,
              99,
              109,
              57,
              115,
              90,
              83,
              73,
              54,
              73,
              110,
              86,
              122,
              90,
              88,
              73,
              105,
              76,
              67,
              74,
              106,
              98,
              71,
              108,
              108,
              98,
              110,
              82,
              102,
              97,
              87,
              81,
              105,
              79,
              106,
              85,
              53,
              76,
              67,
              74,
              108,
              101,
              72,
              65,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              99,
              52,
              78,
              68,
              85,
              121,
              77,
              122,
              103,
              115,
              73,
              110,
              82,
              53,
              99,
              71,
              85,
              105,
              79,
              105,
              74,
              104,
              89,
              50,
              78,
              108,
              99,
              51,
              77,
              105,
              102,
              81,
              46,
              78,
              118,
              66,
              115,
              74,
              115,
              86,
              112,
              72,
              95,
              73,
              74,
              86,
              102,
              68,
              56,
              118,
              109,
              67,
              75,
              113,
              115,
              81,
              86,
              69,
              99,
              122,
              102,
              70,
              97,
              104,
              98,
              54,
              112,
              101,
              82,
              75,
              107,
              55,
              99,
              89,
              51,
              56,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              98,
              101,
              97,
              114,
              101,
              114,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              105,
              110,
              34,
              58,
              49,
              56,
              48,
              48,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              53,
              57,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 299,
          "responseSize": 329
        },
        "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false
          },
          {
            "assertion": "Response contains token",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "Response contains token",
              "message": "Invalid Chai property: or. Did you mean \"of\"?",
              "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "78d8ec3e-d7fa-4a93-b80e-ce9259de5b9e",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "87c83ccb-a81a-45e1-8a41-1f3e35f9d406"
        },
        "item": {
          "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3a7f4756-2043-47df-8e46-7886e4b2fd1d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a5ab6205-afaf-4e02-9e25-5c116de12c70",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "250"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              57,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              112,
              105,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              55,
              56,
              52,
              51,
              52,
              51,
              55,
              53,
              52,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              80,
              73,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              44,
              34,
              105,
              115,
              95,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              52,
              84,
              48,
              57,
              58,
              53,
              48,
              58,
              51,
              55,
              46,
              56,
              55,
              56,
              49,
              51,
              51,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              108,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              52,
              84,
              48,
              57,
              58,
              53,
              48,
              58,
              51,
              56,
              46,
              50,
              48,
              54,
              49,
              49,
              53,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 250
        },
        "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile retrieved successfully",
            "skipped": false
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "Profile contains user data",
              "message": "Invalid Chai property: or. Did you mean \"of\"?",
              "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a7adcbc6-c51c-437c-b530-fd55e2d8f43c",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "644a9039-1da9-4437-b7a0-df28de4b35d7"
        },
        "item": {
          "id": "3a974352-a389-4d7c-9ccb-7724868dcf18",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c422fe73-016b-4e04-85d4-9e0aa063e25b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "be575503-cc75-4708-8fae-f4af440b1e79"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f87ec65a-9324-4976-ac1d-9d05553ae14d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "aea24729-c5e9-4aec-aa57-3c81441e0273",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "3a974352-a389-4d7c-9ccb-7724868dcf18",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "User list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User list retrieved",
              "message": "expected 404 to be one of [ 200, 401, 403 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "24050db0-501e-459f-9e03-1a717852aa6b",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bbf2de52-6626-49fa-be12-b41ed065b303"
        },
        "item": {
          "id": "ebc6d238-7e2f-4e99-baab-985f59c2583c",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a55f8b42-86b2-49a3-8571-fdbbf793b33f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "188d12dc-1fed-4eb9-b367-072c6079ddf2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users",
              "59"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07b910e9-15be-4b54-bf46-baf2e3672df9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "109",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
          }
        },
        "response": {
          "id": "5fbfa09c-c66d-42bd-a57c-a934c0aea667",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "ebc6d238-7e2f-4e99-baab-985f59c2583c",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile update processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile update processed",
              "message": "expected 404 to be one of [ 200, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "acbbd2fb-6710-47b4-8060-5a495b733c71",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2941d1eb-5684-4bd1-b3a6-8951c3ca89cc"
        },
        "item": {
          "id": "8a8e7dfc-c2e5-4626-8266-5c84a3328339",
          "name": "Get Chat History",
          "request": {
            "url": {
              "path": [
                "chat",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0eed40fd-d717-4651-b04b-52a11a0c685f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat history retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains chat data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "0322afab-86ac-4cfa-8bc8-20c42aa8dc3d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aae737c0-7622-4199-9e63-ec28b0f24115",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "228a82c1-44c4-445f-86e2-eab2906ab667",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 2
        },
        "id": "8a8e7dfc-c2e5-4626-8266-5c84a3328339",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat history retrieved",
            "skipped": false
          },
          {
            "assertion": "Response contains chat data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "112dcd01-45b7-4f84-9136-0e6a5fdde5be",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9fb95eea-979c-4acd-8c08-a3fa0894dfa7"
        },
        "item": {
          "id": "fe3b94d8-d964-4063-ad9f-495b551487c7",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b3d4320-cd2d-4dd1-8f7e-9755d27796d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "fb222eca-d4e8-46ca-8675-b36b1e05ef92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4fdf4500-3f76-4e12-94f1-d0f2877d9cee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "95",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
          }
        },
        "response": {
          "id": "1dff6dd3-1a9a-4cca-b36d-08b6b4a37027",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "425"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              72,
              101,
              108,
              108,
              111,
              33,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              46,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              104,
              97,
              116,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              72,
              101,
              108,
              108,
              111,
              33,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              101,
              115,
              116,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              32,
              115,
              117,
              105,
              116,
              101,
              46,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              104,
              97,
              116,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 425
        },
        "id": "fe3b94d8-d964-4063-ad9f-495b551487c7",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat creation processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chat creation processed",
              "message": "expected 422 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 422 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6bfedfb6-6868-4fc7-8617-6e806f5a9bcb",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de5608e1-6e34-4dab-9a78-0beeb7990114"
        },
        "item": {
          "id": "6ee9315d-e15c-4039-9365-598f6a6f8df8",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d73391f-71e9-4798-b28d-2613ffd4cfad",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fd54d711-9769-4b74-ab41-737c355a9a3d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "633e6cd9-9e59-4342-b744-3e2d94bc8615",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "134",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
          }
        },
        "response": {
          "id": "09dabe33-563c-49fa-9360-1395ef74b45f",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "491"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
              34,
              58,
              34,
              123,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
              125,
              125,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              32,
              121,
              111,
              117,
              32,
              104,
              101,
              108,
              112,
              32,
              109,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              116,
              104,
              105,
              115,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              63,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
              34,
              58,
              34,
              123,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              95,
              105,
              100,
              125,
              125,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              32,
              121,
              111,
              117,
              32,
              104,
              101,
              108,
              112,
              32,
              109,
              101,
              32,
              116,
              101,
              115,
              116,
              32,
              116,
              104,
              105,
              115,
              32,
              65,
              80,
              73,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              63,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              95,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 491
        },
        "id": "6ee9315d-e15c-4039-9365-598f6a6f8df8",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected 422 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 422 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7eea501d-93e3-4243-9b7a-823d79270b9b",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e520e886-14db-4f59-89e0-f42785975afd"
        },
        "item": {
          "id": "564b7158-3cdf-49f8-96e8-822a5ad5e022",
          "name": "Get Documents List",
          "request": {
            "url": {
              "path": [
                "documents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0593c531-e052-4c91-a6ad-787c9c7b857f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Documents list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains documents data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "aeb69d80-71dd-4ca9-bf20-c1234fe3ffac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1e87c7aa-1346-448d-9df5-d7eea06647d1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "de5c299c-c450-4ff4-b6ed-ac6fe87ffcb8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "564b7158-3cdf-49f8-96e8-822a5ad5e022",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Documents list retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "96a35fc2-ca1b-481b-9d49-58bcec64c9e6",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "33878512-77ea-4850-952b-ce5ac9b78364"
        },
        "item": {
          "id": "1f3150a5-e66b-4712-98f2-0d7990af9ce4",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80a1d060-5919-455f-a13a-52b18ee6a09f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "317bb143-6ca7-439b-b0fe-bce2abb25ecd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo1OSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQzNDM3NTQwQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjU5LCJleHAiOjE3NTc4NDUyMzgsInR5cGUiOiJhY2Nlc3MifQ.NvBsJsVpH_IJVfD8vmCKqsQVEczfFahb6peRKk7cY38"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c6de7cc-e665-49df-9c3b-613d3e992c57",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "451",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "value": "This is a test document content for API testing.",
                "type": "text"
              },
              {
                "key": "filename",
                "value": "api-test-document.txt",
                "type": "text"
              },
              {
                "key": "document_type",
                "value": "text",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "b9be3a07-5972-477a-894f-63798642c002",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "DELETE"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 31
        },
        "id": "1f3150a5-e66b-4712-98f2-0d7990af9ce4",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Document upload processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Document upload processed",
              "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
              "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5c33414d-bd45-47ab-929b-45f0e9fbf7a5",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "09c0efea-4e08-4035-8292-64b628f5eefb"
        },
        "item": {
          "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "invalid-endpoint-test"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "092e26e7-93e2-47fd-ae27-5a39535e7f74",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4426edd9-e51a-4ff1-b067-2cf1cec9fb98",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Invalid endpoint returns 404",
            "skipped": false
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error response has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ee3f00a-9b59-4d72-a306-6eff4c9b3a2a",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7993bab4-6a77-40c3-8071-d09714f612b6"
        },
        "item": {
          "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d427ccd6-55f3-4b80-9734-92b1d2be9c62",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f223c33d-7d8e-42a4-9a8e-e56f29e03f34",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 30
        },
        "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Unauthorized request returns 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized request returns 401",
              "message": "expected 403 to equal 401",
              "stack": "AssertionError: expected 403 to equal 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Unauthorized error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Unauthorized error has proper structure",
              "message": "expected { detail: 'Not authenticated' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd362831-71c1-4ddb-ab25-5ffbc14adff7",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ed510b6-21f7-49e5-a0a4-ad627724ed05"
        },
        "item": {
          "id": "03168bd7-19de-47d8-9129-da211439742b",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3eb1caa7-d88c-4467-b258-44c6e31e6e26",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "26",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"invalid\": json syntax }"
          }
        },
        "response": {
          "id": "b6b96d53-dc3a-4d4e-a4ee-7d0b3e655be4",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:50:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 125
        },
        "id": "03168bd7-19de-47d8-9129-da211439742b",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Malformed JSON returns 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Malformed JSON returns 400",
              "message": "expected 422 to equal 400",
              "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Bad request error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bad request error has proper structure",
              "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
              "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1929
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4174ab55415cd8b91968c41aa1025020",
          "id": "ac0f4263-6177-47dc-b6e4-17a7cbfc7bce",
          "timestamp": 1757843437497,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
              }
            }
          ]
        },
        "parent": {
          "id": "e57ceb49-b365-4045-b254-fbdf07adbdd2",
          "name": "Health Check",
          "item": [
            {
              "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
                  }
                }
              ]
            },
            {
              "id": "7a80422c-6d40-4542-84fa-2f2dab3fac4c",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a70fb65a-7a1e-442e-a3f6-57fc2da18bf8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "0f4b9a8c-2bc3-48dc-a840-c3059641f993"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e180c973-6b7d-42ba-9e72-7604c5b84726",
          "httpRequestId": "99d6b223-062e-4740-864b-df35b0e34f42",
          "scriptId": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
          "execution": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Health check response is valid",
          "message": "expected { detail: 'Not Found' } to have property 'status'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "3fec33c01d5170ce5ae19c74ab2f8cf0",
          "id": "fe02417c-f6f7-4315-94a4-e15ed854bc97",
          "timestamp": 1757843437501,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
              }
            }
          ]
        },
        "parent": {
          "id": "e57ceb49-b365-4045-b254-fbdf07adbdd2",
          "name": "Health Check",
          "item": [
            {
              "id": "f997550d-d506-40b7-96ca-a5d3c0a899ed",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
                  }
                }
              ]
            },
            {
              "id": "7a80422c-6d40-4542-84fa-2f2dab3fac4c",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a70fb65a-7a1e-442e-a3f6-57fc2da18bf8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "0f4b9a8c-2bc3-48dc-a840-c3059641f993"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e180c973-6b7d-42ba-9e72-7604c5b84726",
          "httpRequestId": "99d6b223-062e-4740-864b-df35b0e34f42",
          "scriptId": "7571b4bd-cca2-4515-8798-8c8ec3014e57",
          "execution": "e332d449-fc43-4878-9de6-1d22ea14fd1a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains user data",
          "message": "expected { …(4) } to have property 'id'",
          "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "282152ebb61ae5bc2af8dd5de2358177",
          "id": "45748149-b152-43a9-b5e0-30ef4f7cdba7",
          "timestamp": 1757843437896,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f83eef2d-8dff-43dc-b5fc-8e6888823d58",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "533d7a9d-bac0-41ec-bc08-c6254304aa1f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
              }
            }
          ]
        },
        "parent": {
          "id": "4ad2e24d-a398-4222-89ed-f5d6cba0bffb",
          "name": "Authentication",
          "item": [
            {
              "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f83eef2d-8dff-43dc-b5fc-8e6888823d58",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "533d7a9d-bac0-41ec-bc08-c6254304aa1f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
                  }
                }
              ]
            },
            {
              "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
                  }
                }
              ]
            },
            {
              "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e3efc139-d0b7-45cb-bbed-48f7c8278f55",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "afbe236b-6aa8-4927-bbfb-7db304c235d6",
          "scriptId": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
          "execution": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
        }
      },
      {
        "error": {
          "name": "Error",
          "index": 1,
          "test": "Response contains token",
          "message": "Invalid Chai property: or. Did you mean \"of\"?",
          "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "ee4f665adcf26da82d9bbb5e430da335",
          "id": "b36481b0-90e8-4f4e-94be-481c501ed4b8",
          "timestamp": 1757843438223,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
              }
            }
          ]
        },
        "parent": {
          "id": "4ad2e24d-a398-4222-89ed-f5d6cba0bffb",
          "name": "Authentication",
          "item": [
            {
              "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f83eef2d-8dff-43dc-b5fc-8e6888823d58",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "533d7a9d-bac0-41ec-bc08-c6254304aa1f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
                  }
                }
              ]
            },
            {
              "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
                  }
                }
              ]
            },
            {
              "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe5934df-fa24-44fa-9a81-3c33bebc6b26",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ce47b6d2-cb0d-4a72-be38-865163c7d225",
          "scriptId": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
          "execution": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
        }
      },
      {
        "error": {
          "name": "Error",
          "index": 1,
          "test": "Profile contains user data",
          "message": "Invalid Chai property: or. Did you mean \"of\"?",
          "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "ed077a8220a6f5e52011d5c10a82a4b0",
          "id": "9f8e6100-becf-48e7-b7a3-95263081b93d",
          "timestamp": 1757843438262,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
              }
            }
          ]
        },
        "parent": {
          "id": "4ad2e24d-a398-4222-89ed-f5d6cba0bffb",
          "name": "Authentication",
          "item": [
            {
              "id": "46bcb6a9-c454-40a4-a6a1-4c665ec32ad2",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f83eef2d-8dff-43dc-b5fc-8e6888823d58",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "533d7a9d-bac0-41ec-bc08-c6254304aa1f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "bc531aca-ea6b-4920-81c2-f528bc3c8f3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "3959cfd0-fba8-4b7f-8617-d0ad3a6b0281"
                  }
                }
              ]
            },
            {
              "id": "d81e2e9e-e056-40b3-b9ba-45b433d025a7",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "18d2ef02-60ae-45f3-bf46-3a6d4373a1cc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "67eb0b8f-2c5c-4d7b-99d0-669d8b007e86"
                  }
                }
              ]
            },
            {
              "id": "9b2c8b44-86be-4549-a1a2-11295eaecf75",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "78d8ec3e-d7fa-4a93-b80e-ce9259de5b9e",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "87c83ccb-a81a-45e1-8a41-1f3e35f9d406",
          "scriptId": "b8f6cf4a-b70e-4938-b1ec-8456ba12bcf0",
          "execution": "b8e09bc4-149b-47d8-aaac-c35337224bb0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User list retrieved",
          "message": "expected 404 to be one of [ 200, 401, 403 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "dee684aff48b8c31a368ca371bc06b3a",
          "id": "5f1df680-1d96-4f43-bcdc-ee109b436a79",
          "timestamp": 1757843438288,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3a974352-a389-4d7c-9ccb-7724868dcf18",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c422fe73-016b-4e04-85d4-9e0aa063e25b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "be575503-cc75-4708-8fae-f4af440b1e79"
              }
            }
          ]
        },
        "parent": {
          "id": "f4d3fbb3-8cbc-45e0-bbcd-3627d19039ae",
          "name": "User Management",
          "item": [
            {
              "id": "3a974352-a389-4d7c-9ccb-7724868dcf18",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c422fe73-016b-4e04-85d4-9e0aa063e25b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "be575503-cc75-4708-8fae-f4af440b1e79"
                  }
                }
              ]
            },
            {
              "id": "ebc6d238-7e2f-4e99-baab-985f59c2583c",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a55f8b42-86b2-49a3-8571-fdbbf793b33f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "188d12dc-1fed-4eb9-b367-072c6079ddf2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a7adcbc6-c51c-437c-b530-fd55e2d8f43c",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "644a9039-1da9-4437-b7a0-df28de4b35d7",
          "scriptId": "c422fe73-016b-4e04-85d4-9e0aa063e25b",
          "execution": "be575503-cc75-4708-8fae-f4af440b1e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile update processed",
          "message": "expected 404 to be one of [ 200, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "3ad691f9c350474b606aa4712ac53ff9",
          "id": "a637c969-828a-4e1c-82df-3a4e8b257910",
          "timestamp": 1757843438314,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ebc6d238-7e2f-4e99-baab-985f59c2583c",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a55f8b42-86b2-49a3-8571-fdbbf793b33f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "188d12dc-1fed-4eb9-b367-072c6079ddf2"
              }
            }
          ]
        },
        "parent": {
          "id": "f4d3fbb3-8cbc-45e0-bbcd-3627d19039ae",
          "name": "User Management",
          "item": [
            {
              "id": "3a974352-a389-4d7c-9ccb-7724868dcf18",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c422fe73-016b-4e04-85d4-9e0aa063e25b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "be575503-cc75-4708-8fae-f4af440b1e79"
                  }
                }
              ]
            },
            {
              "id": "ebc6d238-7e2f-4e99-baab-985f59c2583c",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a55f8b42-86b2-49a3-8571-fdbbf793b33f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "188d12dc-1fed-4eb9-b367-072c6079ddf2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "24050db0-501e-459f-9e03-1a717852aa6b",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bbf2de52-6626-49fa-be12-b41ed065b303",
          "scriptId": "a55f8b42-86b2-49a3-8571-fdbbf793b33f",
          "execution": "188d12dc-1fed-4eb9-b367-072c6079ddf2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chat creation processed",
          "message": "expected 422 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 422 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "ff315d3f2daa583cff9d4f5657ddf4eb",
          "id": "636b7d7f-f0b5-46cd-9bf5-9269c1d4efa9",
          "timestamp": 1757843438375,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fe3b94d8-d964-4063-ad9f-495b551487c7",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b3d4320-cd2d-4dd1-8f7e-9755d27796d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "fb222eca-d4e8-46ca-8675-b36b1e05ef92"
              }
            }
          ]
        },
        "parent": {
          "id": "bb247a44-ccd4-487f-8811-4fc1c421501f",
          "name": "Chat & AI",
          "item": [
            {
              "id": "8a8e7dfc-c2e5-4626-8266-5c84a3328339",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0eed40fd-d717-4651-b04b-52a11a0c685f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0322afab-86ac-4cfa-8bc8-20c42aa8dc3d"
                  }
                }
              ]
            },
            {
              "id": "fe3b94d8-d964-4063-ad9f-495b551487c7",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b3d4320-cd2d-4dd1-8f7e-9755d27796d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "fb222eca-d4e8-46ca-8675-b36b1e05ef92"
                  }
                }
              ]
            },
            {
              "id": "6ee9315d-e15c-4039-9365-598f6a6f8df8",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d73391f-71e9-4798-b28d-2613ffd4cfad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fd54d711-9769-4b74-ab41-737c355a9a3d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "112dcd01-45b7-4f84-9136-0e6a5fdde5be",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9fb95eea-979c-4acd-8c08-a3fa0894dfa7",
          "scriptId": "1b3d4320-cd2d-4dd1-8f7e-9755d27796d8",
          "execution": "fb222eca-d4e8-46ca-8675-b36b1e05ef92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected 422 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 422 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "9fe1d258b8094842b2c5d18ac70d10a3",
          "id": "b8edb412-9d84-4978-bcc8-aaf246e56e11",
          "timestamp": 1757843438400,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6ee9315d-e15c-4039-9365-598f6a6f8df8",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d73391f-71e9-4798-b28d-2613ffd4cfad",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fd54d711-9769-4b74-ab41-737c355a9a3d"
              }
            }
          ]
        },
        "parent": {
          "id": "bb247a44-ccd4-487f-8811-4fc1c421501f",
          "name": "Chat & AI",
          "item": [
            {
              "id": "8a8e7dfc-c2e5-4626-8266-5c84a3328339",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0eed40fd-d717-4651-b04b-52a11a0c685f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0322afab-86ac-4cfa-8bc8-20c42aa8dc3d"
                  }
                }
              ]
            },
            {
              "id": "fe3b94d8-d964-4063-ad9f-495b551487c7",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1b3d4320-cd2d-4dd1-8f7e-9755d27796d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "fb222eca-d4e8-46ca-8675-b36b1e05ef92"
                  }
                }
              ]
            },
            {
              "id": "6ee9315d-e15c-4039-9365-598f6a6f8df8",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d73391f-71e9-4798-b28d-2613ffd4cfad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fd54d711-9769-4b74-ab41-737c355a9a3d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6bfedfb6-6868-4fc7-8617-6e806f5a9bcb",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de5608e1-6e34-4dab-9a78-0beeb7990114",
          "scriptId": "9d73391f-71e9-4798-b28d-2613ffd4cfad",
          "execution": "fd54d711-9769-4b74-ab41-737c355a9a3d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Document upload processed",
          "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
          "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "f5ce20a503f989c916cb76904f7198ce",
          "id": "ec2ab6df-64c1-4b77-9a44-cb51d8fb54dc",
          "timestamp": 1757843438449,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f3150a5-e66b-4712-98f2-0d7990af9ce4",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "80a1d060-5919-455f-a13a-52b18ee6a09f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "317bb143-6ca7-439b-b0fe-bce2abb25ecd"
              }
            }
          ]
        },
        "parent": {
          "id": "8e136f65-7810-4d77-8f93-d3ee9efd7de1",
          "name": "Documents",
          "item": [
            {
              "id": "564b7158-3cdf-49f8-96e8-822a5ad5e022",
              "name": "Get Documents List",
              "request": {
                "url": {
                  "path": [
                    "documents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0593c531-e052-4c91-a6ad-787c9c7b857f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Documents list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains documents data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "aeb69d80-71dd-4ca9-bf20-c1234fe3ffac"
                  }
                }
              ]
            },
            {
              "id": "1f3150a5-e66b-4712-98f2-0d7990af9ce4",
              "name": "Upload Document",
              "request": {
                "url": {
                  "path": [
                    "documents",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "value": "This is a test document content for API testing.",
                      "type": "text"
                    },
                    {
                      "key": "filename",
                      "value": "api-test-document.txt",
                      "type": "text"
                    },
                    {
                      "key": "document_type",
                      "value": "text",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "80a1d060-5919-455f-a13a-52b18ee6a09f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Document upload processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Document uploaded successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "317bb143-6ca7-439b-b0fe-bce2abb25ecd"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "96a35fc2-ca1b-481b-9d49-58bcec64c9e6",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "33878512-77ea-4850-952b-ce5ac9b78364",
          "scriptId": "80a1d060-5919-455f-a13a-52b18ee6a09f",
          "execution": "317bb143-6ca7-439b-b0fe-bce2abb25ecd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error response has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "54a0c4f590dae0b8df599e0cebf0f9c8",
          "id": "ef8b1759-586e-48be-8511-38e5c53f3326",
          "timestamp": 1757843438476,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
              }
            }
          ]
        },
        "parent": {
          "id": "b9f32ea1-ca76-4e71-be45-05638e53ea2b",
          "name": "Error Handling",
          "item": [
            {
              "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
                  }
                }
              ]
            },
            {
              "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
                  }
                }
              ]
            },
            {
              "id": "03168bd7-19de-47d8-9129-da211439742b",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c33414d-bd45-47ab-929b-45f0e9fbf7a5",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "09c0efea-4e08-4035-8292-64b628f5eefb",
          "scriptId": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
          "execution": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized request returns 401",
          "message": "expected 403 to equal 401",
          "stack": "AssertionError: expected 403 to equal 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "728fb16e33f9bc5c7eff9c05e44d6b17",
          "id": "8f09dd37-e071-4989-8d21-28b4c41fb40c",
          "timestamp": 1757843438497,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
              }
            }
          ]
        },
        "parent": {
          "id": "b9f32ea1-ca76-4e71-be45-05638e53ea2b",
          "name": "Error Handling",
          "item": [
            {
              "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
                  }
                }
              ]
            },
            {
              "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
                  }
                }
              ]
            },
            {
              "id": "03168bd7-19de-47d8-9129-da211439742b",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8ee3f00a-9b59-4d72-a306-6eff4c9b3a2a",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7993bab4-6a77-40c3-8071-d09714f612b6",
          "scriptId": "7103888e-2a8e-4757-a9e6-82eb19611abd",
          "execution": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Unauthorized error has proper structure",
          "message": "expected { detail: 'Not authenticated' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "c7a4073ffc557204ead1d21b8277a549",
          "id": "cba70c7c-2d22-4f5c-a6bc-3434bfd373e5",
          "timestamp": 1757843438498,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
              }
            }
          ]
        },
        "parent": {
          "id": "b9f32ea1-ca76-4e71-be45-05638e53ea2b",
          "name": "Error Handling",
          "item": [
            {
              "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
                  }
                }
              ]
            },
            {
              "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
                  }
                }
              ]
            },
            {
              "id": "03168bd7-19de-47d8-9129-da211439742b",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8ee3f00a-9b59-4d72-a306-6eff4c9b3a2a",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7993bab4-6a77-40c3-8071-d09714f612b6",
          "scriptId": "7103888e-2a8e-4757-a9e6-82eb19611abd",
          "execution": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Malformed JSON returns 400",
          "message": "expected 422 to equal 400",
          "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "60fc70cc308f1a67aaab5fc2a530a5fc",
          "id": "3ed86c30-abe0-4871-9403-37e8b66fb19e",
          "timestamp": 1757843438518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "03168bd7-19de-47d8-9129-da211439742b",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
              }
            }
          ]
        },
        "parent": {
          "id": "b9f32ea1-ca76-4e71-be45-05638e53ea2b",
          "name": "Error Handling",
          "item": [
            {
              "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
                  }
                }
              ]
            },
            {
              "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
                  }
                }
              ]
            },
            {
              "id": "03168bd7-19de-47d8-9129-da211439742b",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cd362831-71c1-4ddb-ab25-5ffbc14adff7",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ed510b6-21f7-49e5-a0a4-ad627724ed05",
          "scriptId": "a4de7a97-5837-4833-9733-6a0214ec2f18",
          "execution": "d9be25af-cd05-4385-8e88-b040c5b7f797"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bad request error has proper structure",
          "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
          "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "225cf0641b0ae786b96f702bad5546b5",
          "id": "07e328d7-6c18-4732-b855-214cdc89a47d",
          "timestamp": 1757843438518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "03168bd7-19de-47d8-9129-da211439742b",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
              }
            }
          ]
        },
        "parent": {
          "id": "b9f32ea1-ca76-4e71-be45-05638e53ea2b",
          "name": "Error Handling",
          "item": [
            {
              "id": "e65511d0-122d-4785-82cd-934fc8bd6b83",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca4107cc-ab45-4aa0-a251-bb09c7edb889",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d20b1d08-116f-4ad1-b0c7-11ccafdf2c68"
                  }
                }
              ]
            },
            {
              "id": "fc9df948-6ab6-43a0-8467-1232dda548f4",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7103888e-2a8e-4757-a9e6-82eb19611abd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2ffdc2-43ad-485e-b76f-9ee362c1bf7f"
                  }
                }
              ]
            },
            {
              "id": "03168bd7-19de-47d8-9129-da211439742b",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4de7a97-5837-4833-9733-6a0214ec2f18",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "d9be25af-cd05-4385-8e88-b040c5b7f797"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cd362831-71c1-4ddb-ab25-5ffbc14adff7",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8ed510b6-21f7-49e5-a0a4-ad627724ed05",
          "scriptId": "a4de7a97-5837-4833-9733-6a0214ec2f18",
          "execution": "d9be25af-cd05-4385-8e88-b040c5b7f797"
        }
      }
    ],
    "error": null
  }
}