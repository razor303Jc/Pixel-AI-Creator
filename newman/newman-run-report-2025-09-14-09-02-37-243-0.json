{
  "collection": {
    "_": {
      "postman_id": "pixel-ai-creator-api-tests"
    },
    "item": [
      {
        "id": "65c88152-c40e-4864-b254-f63eac04e80e",
        "name": "Health Check",
        "item": [
          {
            "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
            "name": "API Health Check",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6327f68c-8efb-4411-8f12-34397effff4a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Health check response is valid', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                    "});"
                  ],
                  "_lastExecutionId": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
                }
              }
            ]
          },
          {
            "id": "b558745a-7f3d-4e04-99f6-1d3cfa88aea4",
            "name": "API Root Endpoint",
            "request": {
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "feb337ed-f5fb-4383-b79b-3985b9f6a068",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200 or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                    "});",
                    "",
                    "pm.test('Response is JSON', function () {",
                    "    pm.response.to.be.json;",
                    "});"
                  ],
                  "_lastExecutionId": "af79c01b-9524-40e1-b39a-d1698cdce958"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7aad71b4-8534-43df-afe1-ebfada86c1d3",
        "name": "Authentication",
        "item": [
          {
            "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
            "name": "Register New User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique email for this test",
                    "const timestamp = pm.globals.get('timestamp');",
                    "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                    "pm.environment.set('unique_email', uniqueEmail);",
                    "console.log('Using unique email:', uniqueEmail);"
                  ],
                  "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});",
                    "",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('user_id', jsonData.id);",
                    "    } else if (jsonData.user_id) {",
                    "        pm.environment.set('user_id', jsonData.user_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
                }
              }
            ]
          },
          {
            "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains token', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                    "});",
                    "",
                    "// Store token for authenticated requests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    let token = jsonData.access_token || jsonData.token;",
                    "    if (token) {",
                    "        pm.environment.set('auth_token', token);",
                    "        console.log('Auth token stored for future requests');",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
                }
              }
            ]
          },
          {
            "id": "b57a0037-79c3-490d-a55a-09f165716268",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieved successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "});"
                  ],
                  "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5bce32e0-e9ce-43d6-bb17-ed5613cc1a63",
        "name": "User Management",
        "item": [
          {
            "id": "78b6058d-69a9-4d2c-9a28-22251261d2f5",
            "name": "Get User List",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8733a2f4-219d-46f3-82c8-7a3d685944a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response is array or paginated object', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "a4175a8b-6f5d-4f89-a56c-75fa5377a262"
                }
              }
            ]
          },
          {
            "id": "846fa198-540c-4390-a75f-cf3daeeb65a4",
            "name": "Update User Profile",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{user_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "91ed7e59-101f-456b-b4bb-908c65dc2b78",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile update processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Updated profile returned', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "34746a46-22e8-48d5-a43d-eae3164e4579"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7b28a495-c76c-485b-a6ce-66954fc6138c",
        "name": "Chat & AI",
        "item": [
          {
            "id": "a1f8ef5e-15fc-41e2-acb3-936ccb317e13",
            "name": "Get Chat History",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ebb34960-0073-4431-874b-1027d75200ce",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat history retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains chat data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "2e716f11-92fd-4743-b383-018d66348aab"
                }
              }
            ]
          },
          {
            "id": "ffb7be46-0320-4c86-bdbb-7e6a6acb9c3a",
            "name": "Create New Chat",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2bab125c-c013-431c-bcce-910c42b9087b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat creation processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Chat created successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                    "    });",
                    "",
                    "    // Store conversation ID for further tests",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('conversation_id', jsonData.id);",
                    "    } else if (jsonData.conversation_id) {",
                    "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "e555127d-37fb-4422-855c-c3713c2387f4"
                }
              }
            ]
          },
          {
            "id": "53b60462-7525-4336-a459-524d37f63dbc",
            "name": "Send Chat Message",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "message"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3afe5f22-0c2b-4c72-b13b-fdb161c845e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Response contains message data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "4c736fd5-09f5-49b9-aba1-0965f78dd0db"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13e51062-541a-4c39-b39f-67e856e1435f",
        "name": "Documents",
        "item": [
          {
            "id": "37a490f1-7d4a-4d30-a162-69dc8a9763b2",
            "name": "Get Documents List",
            "request": {
              "url": {
                "path": [
                  "documents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8e548c52-d1a2-4b26-8ef0-40179fe2e65e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Documents list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains documents data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "0b5d57eb-b9c1-4e72-ac2b-49e89b016730"
                }
              }
            ]
          },
          {
            "id": "e71c4198-53af-45cc-ab90-a0881618bca0",
            "name": "Upload Document",
            "request": {
              "url": {
                "path": [
                  "documents",
                  "upload"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "file",
                    "value": "This is a test document content for API testing.",
                    "type": "text"
                  },
                  {
                    "key": "filename",
                    "value": "api-test-document.txt",
                    "type": "text"
                  },
                  {
                    "key": "document_type",
                    "value": "text",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b6621027-e50c-47be-a0a0-e09a343205a2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Document upload processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Document uploaded successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "8041b2ba-d65d-476a-a1c9-0d9985f2fa6b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6c3dfc26-69aa-4172-8bf6-9028b7de0ba6",
        "name": "Error Handling",
        "item": [
          {
            "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
            "name": "Invalid Endpoint - 404",
            "request": {
              "url": {
                "path": [
                  "invalid-endpoint-test"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid endpoint returns 404', function () {",
                    "    pm.expect(pm.response.code).to.equal(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
                }
              }
            ]
          },
          {
            "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
            "name": "Unauthorized Request - 401",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized request returns 401', function () {",
                    "    pm.expect(pm.response.code).to.equal(401);",
                    "});",
                    "",
                    "pm.test('Unauthorized error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
                }
              }
            ]
          },
          {
            "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
            "name": "Malformed JSON - 400",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \"invalid\": json syntax }"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Malformed JSON returns 400', function () {",
                    "    pm.expect(pm.response.code).to.equal(400);",
                    "});",
                    "",
                    "pm.test('Bad request error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "87ccfa68-743e-443f-8aa6-38543549da9a",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Starting API test:', pm.info.requestName);",
            "",
            "// Set timestamp for unique data",
            "pm.globals.set('timestamp', Date.now());"
          ],
          "_lastExecutionId": "5767f055-c960-4719-bbc1-268346013831"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "4d40fe7c-52c9-4030-a465-693b4a5bf0ac",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Response time is less than 5000ms', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Response has proper headers', function () {",
            "    pm.expect(pm.response.headers.has('content-type')).to.be.true;",
            "});",
            "",
            "console.log('Completed API test:', pm.info.requestName, '- Status:', pm.response.status);"
          ],
          "_lastExecutionId": "7c531292-cbc7-44ad-8774-0b666f4a3b1e"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8002/api",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "api.test@example.com",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "ApiTest123!",
        "key": "test_password"
      },
      {
        "type": "string",
        "value": "",
        "key": "auth_token"
      }
    ],
    "info": {
      "_postman_id": "pixel-ai-creator-api-tests",
      "name": "Pixel AI Creator - API Test Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing for Pixel AI Creator application",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "304061de-bfac-426e-a736-ef04719a2641",
    "values": [
      {
        "type": "any",
        "value": "api.test.1757840556419@example.com",
        "key": "unique_email"
      },
      {
        "type": "any",
        "value": 30,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "86be658a-7ebf-4fc7-afc9-18d2aefbd71d",
    "values": [
      {
        "type": "any",
        "value": 1757840557219,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 46,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 16
      },
      "testScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 38.2,
      "responseMin": 2,
      "responseMax": 279,
      "responseSd": 86.71654974686203,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757840556305,
      "completed": 1757840557238
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "18aae89e-f47b-41e8-b04f-ddf699cda79f",
          "httpRequestId": "f1298675-e3fd-4254-8d85-7d3afa33148a"
        },
        "item": {
          "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6327f68c-8efb-4411-8f12-34397effff4a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c64ff37d-5dfb-48ba-a3de-6eaddfc10bc2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c5a4f16e-d9e2-4eb6-8998-ff5ee6fe623f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 22
        },
        "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Health check response is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Health check response is valid",
              "message": "expected { detail: 'Not Found' } to have property 'status'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "59f374d7-f091-41cb-81c1-7bee98f99727",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "895714c2-366c-424d-a278-a088e83350b1"
        },
        "item": {
          "id": "b558745a-7f3d-4e04-99f6-1d3cfa88aea4",
          "name": "API Root Endpoint",
          "request": {
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "feb337ed-f5fb-4383-b79b-3985b9f6a068",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "_lastExecutionId": "af79c01b-9524-40e1-b39a-d1698cdce958"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "36f42d51-e055-4f98-ae1a-1bbd5599e0c2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "57ae6c4a-ac38-4745-bafa-94e6951d757c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "b558745a-7f3d-4e04-99f6-1d3cfa88aea4",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false
          },
          {
            "assertion": "Response is JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6bf28019-58f4-4726-9748-dc5e593351a4",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fca16128-1e13-4ff5-8c27-5764a44bf5ac"
        },
        "item": {
          "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c1ee28a-ed0b-4113-b3d2-de6d31978317",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"api.test.1757840556419@example.com\",\n    \"password\": \"ApiTest123!\",\n    \"company_name\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "874d499e-15db-4c22-bdac-4eaf3a006957",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "114"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              51,
              48,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              112,
              105,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              55,
              56,
              52,
              48,
              53,
              53,
              54,
              52,
              49,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 279,
          "responseSize": 114
        },
        "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Registration successful",
            "skipped": false
          },
          {
            "assertion": "Response contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains user data",
              "message": "expected { …(4) } to have property 'id'",
              "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "746281f7-007a-46d9-9615-0521375bd4d3",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ca5b0ee-7f2d-47f1-b7b8-e825d88120ff"
        },
        "item": {
          "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c9e63a81-d607-4e15-958a-93d14fd792e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"api.test.1757840556419@example.com\",\n    \"password\": \"ApiTest123!\"\n}"
          }
        },
        "response": {
          "id": "4e430b34-3a73-4fdc-8909-5d118c4f0343",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "329"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              49,
              99,
              50,
              86,
              121,
              88,
              50,
              108,
              107,
              73,
              106,
              111,
              122,
              77,
              67,
              119,
              105,
              90,
              87,
              49,
              104,
              97,
              87,
              119,
              105,
              79,
              105,
              74,
              104,
              99,
              71,
              107,
              117,
              100,
              71,
              86,
              122,
              100,
              67,
              52,
              120,
              78,
              122,
              85,
              51,
              79,
              68,
              81,
              119,
              78,
              84,
              85,
              50,
              78,
              68,
              69,
              53,
              81,
              71,
              86,
              52,
              89,
              87,
              49,
              119,
              98,
              71,
              85,
              117,
              89,
              50,
              57,
              116,
              73,
              105,
              119,
              105,
              99,
              109,
              57,
              115,
              90,
              83,
              73,
              54,
              73,
              110,
              86,
              122,
              90,
              88,
              73,
              105,
              76,
              67,
              74,
              106,
              98,
              71,
              108,
              108,
              98,
              110,
              82,
              102,
              97,
              87,
              81,
              105,
              79,
              106,
              77,
              119,
              76,
              67,
              74,
              108,
              101,
              72,
              65,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              99,
              52,
              78,
              68,
              73,
              122,
              78,
              84,
              89,
              115,
              73,
              110,
              82,
              53,
              99,
              71,
              85,
              105,
              79,
              105,
              74,
              104,
              89,
              50,
              78,
              108,
              99,
              51,
              77,
              105,
              102,
              81,
              46,
              101,
              79,
              120,
              55,
              57,
              84,
              83,
              78,
              119,
              88,
              84,
              55,
              97,
              75,
              115,
              77,
              80,
              102,
              106,
              83,
              111,
              49,
              108,
              69,
              119,
              84,
              117,
              55,
              89,
              111,
              77,
              121,
              116,
              76,
              84,
              99,
              68,
              57,
              122,
              105,
              104,
              45,
              48,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              98,
              101,
              97,
              114,
              101,
              114,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              105,
              110,
              34,
              58,
              49,
              56,
              48,
              48,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              51,
              48,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 237,
          "responseSize": 329
        },
        "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false
          },
          {
            "assertion": "Response contains token",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "Response contains token",
              "message": "Invalid Chai property: or. Did you mean \"of\"?",
              "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "39a99070-f52e-48ff-8435-986a353dfd4a",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ecae7721-006f-4f27-9d68-36efeb80b04f"
        },
        "item": {
          "id": "b57a0037-79c3-490d-a55a-09f165716268",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ec1f67d9-f8ec-406f-a404-d9263d963bd4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "820a4879-e761-4211-bd0d-8454ea451b61",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "b57a0037-79c3-490d-a55a-09f165716268",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieved successfully",
              "message": "expected 404 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "575c55d2-9178-4abf-9e76-e3e6183f5669",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c626d11f-8797-42fd-9c36-1ece1e8f342d"
        },
        "item": {
          "id": "78b6058d-69a9-4d2c-9a28-22251261d2f5",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8733a2f4-219d-46f3-82c8-7a3d685944a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a4175a8b-6f5d-4f89-a56c-75fa5377a262"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42efc020-26de-4fab-b764-f1ba9d79a911",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e8707f66-77aa-4f54-bbae-67101857a040",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "78b6058d-69a9-4d2c-9a28-22251261d2f5",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "User list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User list retrieved",
              "message": "expected 404 to be one of [ 200, 401, 403 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d3222639-661a-42ee-859f-8a49d6bbe004",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ce4ce4fe-6efe-42f1-9f63-56ace8b2b035"
        },
        "item": {
          "id": "846fa198-540c-4390-a75f-cf3daeeb65a4",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91ed7e59-101f-456b-b4bb-908c65dc2b78",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "34746a46-22e8-48d5-a43d-eae3164e4579"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users",
              "30"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "80f9f26f-013c-4afa-9f74-f1c406ffc32b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "109",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
          }
        },
        "response": {
          "id": "493486b5-a8b5-477d-81c4-a6d4c3d0d15f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "846fa198-540c-4390-a75f-cf3daeeb65a4",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile update processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile update processed",
              "message": "expected 404 to be one of [ 200, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b4913343-310b-466f-af01-e36218c7bbe1",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ce053546-472a-4e1a-90a5-fa809759ca2e"
        },
        "item": {
          "id": "a1f8ef5e-15fc-41e2-acb3-936ccb317e13",
          "name": "Get Chat History",
          "request": {
            "url": {
              "path": [
                "chat",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebb34960-0073-4431-874b-1027d75200ce",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat history retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains chat data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2e716f11-92fd-4743-b383-018d66348aab"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0e0e1a1a-d15a-4eb0-8745-0c732a2339a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "823176b1-f2ea-448b-8c67-272590de950b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "a1f8ef5e-15fc-41e2-acb3-936ccb317e13",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat history retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9696ab04-8211-4755-b49e-1b30e7627f52",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8953ed08-cb42-4aa2-a57f-64f8db691fb0"
        },
        "item": {
          "id": "ffb7be46-0320-4c86-bdbb-7e6a6acb9c3a",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2bab125c-c013-431c-bcce-910c42b9087b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "e555127d-37fb-4422-855c-c3713c2387f4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f38deb4-6ef1-4286-b564-ce2ec751360a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "95",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
          }
        },
        "response": {
          "id": "3290b90c-a4ef-4993-a20c-d7fd5d2506c6",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "ffb7be46-0320-4c86-bdbb-7e6a6acb9c3a",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat creation processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chat creation processed",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b3e8590e-686a-4e92-8004-687fd47cea3e",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5462f5b2-eec1-4786-b2d2-8b23d4c6b64e"
        },
        "item": {
          "id": "53b60462-7525-4336-a459-524d37f63dbc",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3afe5f22-0c2b-4c72-b13b-fdb161c845e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4c736fd5-09f5-49b9-aba1-0965f78dd0db"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e6a9230f-a092-4959-af52-f4b70c158d6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "134",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
          }
        },
        "response": {
          "id": "64013b7c-8895-4c99-bce2-26183e7a3e10",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "53b60462-7525-4336-a459-524d37f63dbc",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b26a77e-4787-4972-8367-e27985134016",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "972bb09c-192c-437b-bdcf-788d64018bd5"
        },
        "item": {
          "id": "37a490f1-7d4a-4d30-a162-69dc8a9763b2",
          "name": "Get Documents List",
          "request": {
            "url": {
              "path": [
                "documents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e548c52-d1a2-4b26-8ef0-40179fe2e65e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Documents list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains documents data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "0b5d57eb-b9c1-4e72-ac2b-49e89b016730"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b7b11ba7-710e-4b68-938e-26d478fc3eb3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c208ee41-2e81-4440-b20d-8cd093d73525",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "37a490f1-7d4a-4d30-a162-69dc8a9763b2",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Documents list retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "071d3507-1955-4480-ab77-81d097c3527a",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6d62efc3-5f39-4a9f-9913-c0b3b8a8ecbd"
        },
        "item": {
          "id": "e71c4198-53af-45cc-ab90-a0881618bca0",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6621027-e50c-47be-a0a0-e09a343205a2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8041b2ba-d65d-476a-a1c9-0d9985f2fa6b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMCwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNTU2NDE5QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMwLCJleHAiOjE3NTc4NDIzNTYsInR5cGUiOiJhY2Nlc3MifQ.eOx79TSNwXT7aKsMPfjSo1lEwTu7YoMytLTcD9zih-0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1904f313-3994-4c6c-9a73-91ffb2b15717",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "451",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "value": "This is a test document content for API testing.",
                "type": "text"
              },
              {
                "key": "filename",
                "value": "api-test-document.txt",
                "type": "text"
              },
              {
                "key": "document_type",
                "value": "text",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "3ff10498-9e30-42f5-b7aa-8f5afea25a60",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "DELETE"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 31
        },
        "id": "e71c4198-53af-45cc-ab90-a0881618bca0",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Document upload processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Document upload processed",
              "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
              "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dfcc402a-63b9-4a55-b44d-fffbd1903c06",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2918423a-a4ec-4535-8007-80488237fdd4"
        },
        "item": {
          "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "invalid-endpoint-test"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c444f057-eba1-45ab-880e-9c81e9b4b4f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9b26dc9f-defb-423c-9f52-733aceaa24b5",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Invalid endpoint returns 404",
            "skipped": false
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error response has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9842a333-318c-4f71-b823-4fb0d85d66a3",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b11c52b9-c0f4-419d-91f4-5cdfe2215732"
        },
        "item": {
          "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c3ff3aee-edcf-4b98-907a-f207b5b4902c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7e5acf0c-aaaa-4d53-a43a-f1e8031721ee",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Unauthorized request returns 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized request returns 401",
              "message": "expected 404 to equal 401",
              "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Unauthorized error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Unauthorized error has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c01688cf-6890-481b-9e68-c1ecd8511257",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "98adc86f-8f68-4fb8-9d65-f02167e74fe9"
        },
        "item": {
          "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d5bbb502-dd09-4a51-9ee2-795a559f5fdf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "26",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"invalid\": json syntax }"
          }
        },
        "response": {
          "id": "1f57120f-6ffb-41ea-8c2e-7c23a7649203",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:02:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 125
        },
        "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Malformed JSON returns 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Malformed JSON returns 400",
              "message": "expected 422 to equal 400",
              "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Bad request error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bad request error has proper structure",
              "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
              "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 841
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4174ab55415cd8b91968c41aa1025020",
          "id": "458bfe67-20d0-471d-b38f-10d75b262d02",
          "timestamp": 1757840556375,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6327f68c-8efb-4411-8f12-34397effff4a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
              }
            }
          ]
        },
        "parent": {
          "id": "65c88152-c40e-4864-b254-f63eac04e80e",
          "name": "Health Check",
          "item": [
            {
              "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6327f68c-8efb-4411-8f12-34397effff4a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
                  }
                }
              ]
            },
            {
              "id": "b558745a-7f3d-4e04-99f6-1d3cfa88aea4",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "feb337ed-f5fb-4383-b79b-3985b9f6a068",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "af79c01b-9524-40e1-b39a-d1698cdce958"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "18aae89e-f47b-41e8-b04f-ddf699cda79f",
          "httpRequestId": "f1298675-e3fd-4254-8d85-7d3afa33148a",
          "scriptId": "6327f68c-8efb-4411-8f12-34397effff4a",
          "execution": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Health check response is valid",
          "message": "expected { detail: 'Not Found' } to have property 'status'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "3fec33c01d5170ce5ae19c74ab2f8cf0",
          "id": "33381ac4-0398-428d-90fb-2c8f60461ea0",
          "timestamp": 1757840556386,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6327f68c-8efb-4411-8f12-34397effff4a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
              }
            }
          ]
        },
        "parent": {
          "id": "65c88152-c40e-4864-b254-f63eac04e80e",
          "name": "Health Check",
          "item": [
            {
              "id": "557392a5-a800-4ab0-928b-41c28a2666ff",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6327f68c-8efb-4411-8f12-34397effff4a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
                  }
                }
              ]
            },
            {
              "id": "b558745a-7f3d-4e04-99f6-1d3cfa88aea4",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "feb337ed-f5fb-4383-b79b-3985b9f6a068",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "af79c01b-9524-40e1-b39a-d1698cdce958"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "18aae89e-f47b-41e8-b04f-ddf699cda79f",
          "httpRequestId": "f1298675-e3fd-4254-8d85-7d3afa33148a",
          "scriptId": "6327f68c-8efb-4411-8f12-34397effff4a",
          "execution": "85bde4ef-cbe6-4aca-b131-bb8a810fe7f9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains user data",
          "message": "expected { …(4) } to have property 'id'",
          "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "282152ebb61ae5bc2af8dd5de2358177",
          "id": "03eea945-c5ab-4ded-873c-5dfbed73d852",
          "timestamp": 1757840556715,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
              }
            }
          ]
        },
        "parent": {
          "id": "7aad71b4-8534-43df-afe1-ebfada86c1d3",
          "name": "Authentication",
          "item": [
            {
              "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
                  }
                }
              ]
            },
            {
              "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
                  }
                }
              ]
            },
            {
              "id": "b57a0037-79c3-490d-a55a-09f165716268",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6bf28019-58f4-4726-9748-dc5e593351a4",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fca16128-1e13-4ff5-8c27-5764a44bf5ac",
          "scriptId": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
          "execution": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
        }
      },
      {
        "error": {
          "name": "Error",
          "index": 1,
          "test": "Response contains token",
          "message": "Invalid Chai property: or. Did you mean \"of\"?",
          "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "ee4f665adcf26da82d9bbb5e430da335",
          "id": "c0897044-c93f-4795-8ea5-8c18886d768b",
          "timestamp": 1757840556978,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
              }
            }
          ]
        },
        "parent": {
          "id": "7aad71b4-8534-43df-afe1-ebfada86c1d3",
          "name": "Authentication",
          "item": [
            {
              "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
                  }
                }
              ]
            },
            {
              "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
                  }
                }
              ]
            },
            {
              "id": "b57a0037-79c3-490d-a55a-09f165716268",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "746281f7-007a-46d9-9615-0521375bd4d3",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ca5b0ee-7f2d-47f1-b7b8-e825d88120ff",
          "scriptId": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
          "execution": "deac21a7-d95a-43de-9183-e908ff050bd9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieved successfully",
          "message": "expected 404 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "f45f8aed2e992ff72e00af650c794b81",
          "id": "d0f0f369-d111-46ec-b7ad-395ef7ec6c64",
          "timestamp": 1757840557001,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b57a0037-79c3-490d-a55a-09f165716268",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
              }
            }
          ]
        },
        "parent": {
          "id": "7aad71b4-8534-43df-afe1-ebfada86c1d3",
          "name": "Authentication",
          "item": [
            {
              "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
                  }
                }
              ]
            },
            {
              "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
                  }
                }
              ]
            },
            {
              "id": "b57a0037-79c3-490d-a55a-09f165716268",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "39a99070-f52e-48ff-8435-986a353dfd4a",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ecae7721-006f-4f27-9d68-36efeb80b04f",
          "scriptId": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
          "execution": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "91e550e7570b0dc08f64277821830c36",
          "id": "ee0f9c1f-4e85-4ded-9260-54f84f347ae0",
          "timestamp": 1757840557002,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b57a0037-79c3-490d-a55a-09f165716268",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
              }
            }
          ]
        },
        "parent": {
          "id": "7aad71b4-8534-43df-afe1-ebfada86c1d3",
          "name": "Authentication",
          "item": [
            {
              "id": "35f342d5-8009-4e91-b705-1d9728bd4c5f",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2fc8e399-ddbf-4018-a04a-8684d1047b51",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "e7826b70-3c8a-4ff3-a1e7-723510829e28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7ec30085-dbd4-4c5d-911f-ce839204f9e0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "e966de21-5be1-40f2-927f-f6c2e4c19c86"
                  }
                }
              ]
            },
            {
              "id": "c5ef12f0-f11e-4817-a56a-e44f1b798fd2",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5a4ba-169c-49db-adb7-6f12e1eae55a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "deac21a7-d95a-43de-9183-e908ff050bd9"
                  }
                }
              ]
            },
            {
              "id": "b57a0037-79c3-490d-a55a-09f165716268",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "39a99070-f52e-48ff-8435-986a353dfd4a",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ecae7721-006f-4f27-9d68-36efeb80b04f",
          "scriptId": "dd370888-122d-4bef-89ed-8e6d34c0eca5",
          "execution": "37b38c51-b200-4b71-a8e0-c98f1dc64d5e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User list retrieved",
          "message": "expected 404 to be one of [ 200, 401, 403 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "dee684aff48b8c31a368ca371bc06b3a",
          "id": "4d46ab55-af73-49ab-a4b3-8af50085ecc1",
          "timestamp": 1757840557023,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "78b6058d-69a9-4d2c-9a28-22251261d2f5",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8733a2f4-219d-46f3-82c8-7a3d685944a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a4175a8b-6f5d-4f89-a56c-75fa5377a262"
              }
            }
          ]
        },
        "parent": {
          "id": "5bce32e0-e9ce-43d6-bb17-ed5613cc1a63",
          "name": "User Management",
          "item": [
            {
              "id": "78b6058d-69a9-4d2c-9a28-22251261d2f5",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8733a2f4-219d-46f3-82c8-7a3d685944a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a4175a8b-6f5d-4f89-a56c-75fa5377a262"
                  }
                }
              ]
            },
            {
              "id": "846fa198-540c-4390-a75f-cf3daeeb65a4",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91ed7e59-101f-456b-b4bb-908c65dc2b78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "34746a46-22e8-48d5-a43d-eae3164e4579"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "575c55d2-9178-4abf-9e76-e3e6183f5669",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c626d11f-8797-42fd-9c36-1ece1e8f342d",
          "scriptId": "8733a2f4-219d-46f3-82c8-7a3d685944a6",
          "execution": "a4175a8b-6f5d-4f89-a56c-75fa5377a262"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile update processed",
          "message": "expected 404 to be one of [ 200, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "3ad691f9c350474b606aa4712ac53ff9",
          "id": "c13f483e-85f0-4dc9-9d0e-2ee17adcb912",
          "timestamp": 1757840557046,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "846fa198-540c-4390-a75f-cf3daeeb65a4",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91ed7e59-101f-456b-b4bb-908c65dc2b78",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "34746a46-22e8-48d5-a43d-eae3164e4579"
              }
            }
          ]
        },
        "parent": {
          "id": "5bce32e0-e9ce-43d6-bb17-ed5613cc1a63",
          "name": "User Management",
          "item": [
            {
              "id": "78b6058d-69a9-4d2c-9a28-22251261d2f5",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8733a2f4-219d-46f3-82c8-7a3d685944a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a4175a8b-6f5d-4f89-a56c-75fa5377a262"
                  }
                }
              ]
            },
            {
              "id": "846fa198-540c-4390-a75f-cf3daeeb65a4",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91ed7e59-101f-456b-b4bb-908c65dc2b78",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "34746a46-22e8-48d5-a43d-eae3164e4579"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d3222639-661a-42ee-859f-8a49d6bbe004",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ce4ce4fe-6efe-42f1-9f63-56ace8b2b035",
          "scriptId": "91ed7e59-101f-456b-b4bb-908c65dc2b78",
          "execution": "34746a46-22e8-48d5-a43d-eae3164e4579"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chat creation processed",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "517b49c40884a35fb4070dc67d69990a",
          "id": "efcfef30-abfd-4779-934c-f01d9bdcaf22",
          "timestamp": 1757840557092,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ffb7be46-0320-4c86-bdbb-7e6a6acb9c3a",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2bab125c-c013-431c-bcce-910c42b9087b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "e555127d-37fb-4422-855c-c3713c2387f4"
              }
            }
          ]
        },
        "parent": {
          "id": "7b28a495-c76c-485b-a6ce-66954fc6138c",
          "name": "Chat & AI",
          "item": [
            {
              "id": "a1f8ef5e-15fc-41e2-acb3-936ccb317e13",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebb34960-0073-4431-874b-1027d75200ce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2e716f11-92fd-4743-b383-018d66348aab"
                  }
                }
              ]
            },
            {
              "id": "ffb7be46-0320-4c86-bdbb-7e6a6acb9c3a",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bab125c-c013-431c-bcce-910c42b9087b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "e555127d-37fb-4422-855c-c3713c2387f4"
                  }
                }
              ]
            },
            {
              "id": "53b60462-7525-4336-a459-524d37f63dbc",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3afe5f22-0c2b-4c72-b13b-fdb161c845e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "4c736fd5-09f5-49b9-aba1-0965f78dd0db"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9696ab04-8211-4755-b49e-1b30e7627f52",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8953ed08-cb42-4aa2-a57f-64f8db691fb0",
          "scriptId": "2bab125c-c013-431c-bcce-910c42b9087b",
          "execution": "e555127d-37fb-4422-855c-c3713c2387f4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "7d883533238ef43427d20169b06b6530",
          "id": "ffc5cad0-fb09-478b-a7a1-edc842ed3366",
          "timestamp": 1757840557116,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "53b60462-7525-4336-a459-524d37f63dbc",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3afe5f22-0c2b-4c72-b13b-fdb161c845e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4c736fd5-09f5-49b9-aba1-0965f78dd0db"
              }
            }
          ]
        },
        "parent": {
          "id": "7b28a495-c76c-485b-a6ce-66954fc6138c",
          "name": "Chat & AI",
          "item": [
            {
              "id": "a1f8ef5e-15fc-41e2-acb3-936ccb317e13",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebb34960-0073-4431-874b-1027d75200ce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2e716f11-92fd-4743-b383-018d66348aab"
                  }
                }
              ]
            },
            {
              "id": "ffb7be46-0320-4c86-bdbb-7e6a6acb9c3a",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bab125c-c013-431c-bcce-910c42b9087b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "e555127d-37fb-4422-855c-c3713c2387f4"
                  }
                }
              ]
            },
            {
              "id": "53b60462-7525-4336-a459-524d37f63dbc",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3afe5f22-0c2b-4c72-b13b-fdb161c845e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "4c736fd5-09f5-49b9-aba1-0965f78dd0db"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b3e8590e-686a-4e92-8004-687fd47cea3e",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5462f5b2-eec1-4786-b2d2-8b23d4c6b64e",
          "scriptId": "3afe5f22-0c2b-4c72-b13b-fdb161c845e4",
          "execution": "4c736fd5-09f5-49b9-aba1-0965f78dd0db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Document upload processed",
          "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
          "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "f5ce20a503f989c916cb76904f7198ce",
          "id": "cf44301f-8131-4e40-a939-e21f405f1a64",
          "timestamp": 1757840557162,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e71c4198-53af-45cc-ab90-a0881618bca0",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6621027-e50c-47be-a0a0-e09a343205a2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8041b2ba-d65d-476a-a1c9-0d9985f2fa6b"
              }
            }
          ]
        },
        "parent": {
          "id": "13e51062-541a-4c39-b39f-67e856e1435f",
          "name": "Documents",
          "item": [
            {
              "id": "37a490f1-7d4a-4d30-a162-69dc8a9763b2",
              "name": "Get Documents List",
              "request": {
                "url": {
                  "path": [
                    "documents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e548c52-d1a2-4b26-8ef0-40179fe2e65e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Documents list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains documents data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0b5d57eb-b9c1-4e72-ac2b-49e89b016730"
                  }
                }
              ]
            },
            {
              "id": "e71c4198-53af-45cc-ab90-a0881618bca0",
              "name": "Upload Document",
              "request": {
                "url": {
                  "path": [
                    "documents",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "value": "This is a test document content for API testing.",
                      "type": "text"
                    },
                    {
                      "key": "filename",
                      "value": "api-test-document.txt",
                      "type": "text"
                    },
                    {
                      "key": "document_type",
                      "value": "text",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6621027-e50c-47be-a0a0-e09a343205a2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Document upload processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Document uploaded successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8041b2ba-d65d-476a-a1c9-0d9985f2fa6b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "071d3507-1955-4480-ab77-81d097c3527a",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6d62efc3-5f39-4a9f-9913-c0b3b8a8ecbd",
          "scriptId": "b6621027-e50c-47be-a0a0-e09a343205a2",
          "execution": "8041b2ba-d65d-476a-a1c9-0d9985f2fa6b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error response has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "54a0c4f590dae0b8df599e0cebf0f9c8",
          "id": "2baae1c2-a843-4c53-a116-ab028a73217d",
          "timestamp": 1757840557190,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
              }
            }
          ]
        },
        "parent": {
          "id": "6c3dfc26-69aa-4172-8bf6-9028b7de0ba6",
          "name": "Error Handling",
          "item": [
            {
              "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
                  }
                }
              ]
            },
            {
              "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
                  }
                }
              ]
            },
            {
              "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dfcc402a-63b9-4a55-b44d-fffbd1903c06",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2918423a-a4ec-4535-8007-80488237fdd4",
          "scriptId": "7990fbbc-7507-4f4c-8c79-e59116079a00",
          "execution": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized request returns 401",
          "message": "expected 404 to equal 401",
          "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "7b3c0af0cf494ab26b3c2934c416969a",
          "id": "6f617523-9159-4ff4-bb51-e020ca990327",
          "timestamp": 1757840557211,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
              }
            }
          ]
        },
        "parent": {
          "id": "6c3dfc26-69aa-4172-8bf6-9028b7de0ba6",
          "name": "Error Handling",
          "item": [
            {
              "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
                  }
                }
              ]
            },
            {
              "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
                  }
                }
              ]
            },
            {
              "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9842a333-318c-4f71-b823-4fb0d85d66a3",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b11c52b9-c0f4-419d-91f4-5cdfe2215732",
          "scriptId": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
          "execution": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Unauthorized error has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "8e5c678810671225d82b6dc1d5130be4",
          "id": "1a879511-7dce-43cc-a686-b96b0662d403",
          "timestamp": 1757840557212,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
              }
            }
          ]
        },
        "parent": {
          "id": "6c3dfc26-69aa-4172-8bf6-9028b7de0ba6",
          "name": "Error Handling",
          "item": [
            {
              "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
                  }
                }
              ]
            },
            {
              "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
                  }
                }
              ]
            },
            {
              "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9842a333-318c-4f71-b823-4fb0d85d66a3",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b11c52b9-c0f4-419d-91f4-5cdfe2215732",
          "scriptId": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
          "execution": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Malformed JSON returns 400",
          "message": "expected 422 to equal 400",
          "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "60fc70cc308f1a67aaab5fc2a530a5fc",
          "id": "fe7f0813-46ca-45b0-9e03-a1c6ae7aa49d",
          "timestamp": 1757840557233,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
              }
            }
          ]
        },
        "parent": {
          "id": "6c3dfc26-69aa-4172-8bf6-9028b7de0ba6",
          "name": "Error Handling",
          "item": [
            {
              "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
                  }
                }
              ]
            },
            {
              "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
                  }
                }
              ]
            },
            {
              "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c01688cf-6890-481b-9e68-c1ecd8511257",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "98adc86f-8f68-4fb8-9d65-f02167e74fe9",
          "scriptId": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
          "execution": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bad request error has proper structure",
          "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
          "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "225cf0641b0ae786b96f702bad5546b5",
          "id": "44d3d76d-d80d-4db7-aaa4-bb6d4ba9e530",
          "timestamp": 1757840557234,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
              }
            }
          ]
        },
        "parent": {
          "id": "6c3dfc26-69aa-4172-8bf6-9028b7de0ba6",
          "name": "Error Handling",
          "item": [
            {
              "id": "285327f9-a5e2-4115-94c0-40697b6ca0c6",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7990fbbc-7507-4f4c-8c79-e59116079a00",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "75081b7d-7cf6-4c8d-aadb-5ab627b40d7f"
                  }
                }
              ]
            },
            {
              "id": "88dce836-1105-4d63-b033-125afe8ea4ce",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "925ff9d6-8077-4fa7-866d-9ef4ed96aa58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "671ac917-4eb6-4e63-af2a-94ddec7996eb"
                  }
                }
              ]
            },
            {
              "id": "d70ffbd7-9ade-43f4-8ec3-eeddb42e47a2",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c01688cf-6890-481b-9e68-c1ecd8511257",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "98adc86f-8f68-4fb8-9d65-f02167e74fe9",
          "scriptId": "afae43e3-772d-4e21-89c9-f4f0d7ba8cf6",
          "execution": "191ae191-ac0c-4cf1-92d5-496fe48bf2b2"
        }
      }
    ],
    "error": null
  }
}