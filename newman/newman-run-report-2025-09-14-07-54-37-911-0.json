{
  "collection": {
    "_": {
      "postman_id": "pixel-ai-creator-api-tests"
    },
    "item": [
      {
        "id": "4679a4b4-3c55-4e11-8fe9-4303b970f34f",
        "name": "Health Check",
        "item": [
          {
            "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
            "name": "API Health Check",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Health check response is valid', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                    "});"
                  ],
                  "_lastExecutionId": "c8858dc4-3a5e-4878-b879-427a3b86b368"
                }
              }
            ]
          },
          {
            "id": "f407f985-aa31-4250-be2d-48a5686a1c75",
            "name": "API Root Endpoint",
            "request": {
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4674dbb1-6d9c-41ff-9b03-b31ab5f13692",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200 or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                    "});",
                    "",
                    "pm.test('Response is JSON', function () {",
                    "    pm.response.to.be.json;",
                    "});"
                  ],
                  "_lastExecutionId": "aacd51fb-68f9-44e7-9a8d-8c4bdcfc52a1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1f4417e8-fb68-4268-a858-fd5dd0c35770",
        "name": "Authentication",
        "item": [
          {
            "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
            "name": "Register New User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique email for this test",
                    "const timestamp = pm.globals.get('timestamp');",
                    "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                    "pm.environment.set('unique_email', uniqueEmail);",
                    "console.log('Using unique email:', uniqueEmail);"
                  ],
                  "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});",
                    "",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('user_id', jsonData.id);",
                    "    } else if (jsonData.user_id) {",
                    "        pm.environment.set('user_id', jsonData.user_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
                }
              }
            ]
          },
          {
            "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains token', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                    "});",
                    "",
                    "// Store token for authenticated requests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    let token = jsonData.access_token || jsonData.token;",
                    "    if (token) {",
                    "        pm.environment.set('auth_token', token);",
                    "        console.log('Auth token stored for future requests');",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
                }
              }
            ]
          },
          {
            "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieved successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "});"
                  ],
                  "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cbac2e31-3ed6-46b4-84a6-a28c305ceffc",
        "name": "User Management",
        "item": [
          {
            "id": "a84bcec3-39b3-4553-9752-c95ed215f189",
            "name": "Get User List",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2fc11bea-ef49-4564-8943-1d3c68e4b3dd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response is array or paginated object', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "b5a29b23-443e-4a71-91bf-93ce5fda20f3"
                }
              }
            ]
          },
          {
            "id": "3ba4f6f4-2a61-41f4-bc40-4485cd7f11d2",
            "name": "Update User Profile",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{user_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8baa9ff4-be07-42b7-8de5-86fe06a2b44b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile update processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Updated profile returned', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "47aafa03-d44c-4d16-ae5d-ed056d2e1fc6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "17caec3b-3bd5-409f-a6bc-8ae9c6b1c3cb",
        "name": "Chat & AI",
        "item": [
          {
            "id": "9d0baa56-b4de-4e00-a2b9-07ccda6ade0d",
            "name": "Get Chat History",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d5d00620-e789-4838-8620-96204f8adbb2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat history retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains chat data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "c8388825-0c7d-4d61-9d13-30a04c9dba94"
                }
              }
            ]
          },
          {
            "id": "e13de10c-0480-4ed2-81e8-a9831c99f8b9",
            "name": "Create New Chat",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "744efd83-63d9-4e47-8248-5df4b01dd5c6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat creation processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Chat created successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                    "    });",
                    "",
                    "    // Store conversation ID for further tests",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('conversation_id', jsonData.id);",
                    "    } else if (jsonData.conversation_id) {",
                    "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "b250612e-635c-4b6c-879d-ca45c3c5076c"
                }
              }
            ]
          },
          {
            "id": "385e51bf-d916-440b-8010-532d8a5d583a",
            "name": "Send Chat Message",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "message"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "800a3050-c801-497f-a8ac-37f345f5526f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Response contains message data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "28db3d68-8ba8-4adb-8fb0-197b43a62636"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ff9a2b21-147f-47cc-bbbd-9e1417a60091",
        "name": "Documents",
        "item": [
          {
            "id": "ae0371ff-944a-486e-a518-2cdf98a2ffe6",
            "name": "Get Documents List",
            "request": {
              "url": {
                "path": [
                  "documents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "96208757-deba-4010-ae60-977278da0f52",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Documents list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains documents data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "7c59149a-80ab-4aee-adc5-54f13252f622"
                }
              }
            ]
          },
          {
            "id": "6b8cdd15-c846-42e4-88eb-ce2934c284d9",
            "name": "Upload Document",
            "request": {
              "url": {
                "path": [
                  "documents",
                  "upload"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "file",
                    "value": "This is a test document content for API testing.",
                    "type": "text"
                  },
                  {
                    "key": "filename",
                    "value": "api-test-document.txt",
                    "type": "text"
                  },
                  {
                    "key": "document_type",
                    "value": "text",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22c72d25-2dff-4bed-938c-2103b501d745",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Document upload processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Document uploaded successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "6caf5992-c359-4010-bffb-22ad05d31b7a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8dd2f860-d2f5-48f1-b67c-b5181f2ed222",
        "name": "Error Handling",
        "item": [
          {
            "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
            "name": "Invalid Endpoint - 404",
            "request": {
              "url": {
                "path": [
                  "invalid-endpoint-test"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid endpoint returns 404', function () {",
                    "    pm.expect(pm.response.code).to.equal(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
                }
              }
            ]
          },
          {
            "id": "5d25512b-3302-4063-99d9-e4362149eb83",
            "name": "Unauthorized Request - 401",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized request returns 401', function () {",
                    "    pm.expect(pm.response.code).to.equal(401);",
                    "});",
                    "",
                    "pm.test('Unauthorized error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
                }
              }
            ]
          },
          {
            "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
            "name": "Malformed JSON - 400",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \"invalid\": json syntax }"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Malformed JSON returns 400', function () {",
                    "    pm.expect(pm.response.code).to.equal(400);",
                    "});",
                    "",
                    "pm.test('Bad request error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "99716742-b8d9-4c6f-befc-7a9c5a8d132d",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Starting API test:', pm.info.requestName);",
            "",
            "// Set timestamp for unique data",
            "pm.globals.set('timestamp', Date.now());"
          ],
          "_lastExecutionId": "32bef49e-6f4c-4575-ac90-a2ea5742909a"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "97b37e27-894b-4aa2-92c4-29a2da7b6fb7",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Response time is less than 5000ms', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Response has proper headers', function () {",
            "    pm.expect(pm.response.headers.has('content-type')).to.be.true;",
            "});",
            "",
            "console.log('Completed API test:', pm.info.requestName, '- Status:', pm.response.status);"
          ],
          "_lastExecutionId": "821c61c5-863e-4b09-9b1d-73fc338c86ba"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8002/api",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "api.test@example.com",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "ApiTest123!",
        "key": "test_password"
      },
      {
        "type": "string",
        "value": "",
        "key": "auth_token"
      }
    ],
    "info": {
      "_postman_id": "pixel-ai-creator-api-tests",
      "name": "Pixel AI Creator - API Test Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing for Pixel AI Creator application",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "3be26601-f266-4e0d-8be0-cb95dd0eedf5",
    "values": [
      {
        "type": "any",
        "value": "api.test.1757836476851@example.com",
        "key": "unique_email"
      },
      {
        "type": "any",
        "value": 13,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "fed2b524-9a24-4a96-b9c1-43991f6d3e4d",
    "values": [
      {
        "type": "any",
        "value": 1757836477869,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 46,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 16
      },
      "testScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 44.8,
      "responseMin": 2,
      "responseMax": 310,
      "responseSd": 99.73845797885589,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757836476712,
      "completed": 1757836477900
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5fa8f06b-001f-401b-8fab-4d84930a10da",
          "httpRequestId": "6424e79b-9567-4dfc-ad0c-5252bf6dffc8"
        },
        "item": {
          "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "c8858dc4-3a5e-4878-b879-427a3b86b368"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c960c7f9-8d73-438f-857e-eb8418c1b177",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4a350436-ad17-4290-93d8-7e039ce4fea8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 22
        },
        "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Health check response is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Health check response is valid",
              "message": "expected { detail: 'Not Found' } to have property 'status'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d9640169-f285-4a29-9bed-d98fe4bd2017",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "263fc1d5-b2ed-41bf-b790-034ad465dda6"
        },
        "item": {
          "id": "f407f985-aa31-4250-be2d-48a5686a1c75",
          "name": "API Root Endpoint",
          "request": {
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4674dbb1-6d9c-41ff-9b03-b31ab5f13692",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "_lastExecutionId": "aacd51fb-68f9-44e7-9a8d-8c4bdcfc52a1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25e85312-57d2-46a5-96c7-d764f967f667",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "38d00c75-2763-4c9c-acfd-7c6d59954b8b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "f407f985-aa31-4250-be2d-48a5686a1c75",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false
          },
          {
            "assertion": "Response is JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6859bb10-35c4-45e7-a0ff-0c4c151da89c",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "76df2c87-b6fe-4637-8361-00f131890ed0"
        },
        "item": {
          "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fcd53789-a519-478c-b812-62091350de7e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"api.test.1757836476851@example.com\",\n    \"password\": \"ApiTest123!\",\n    \"company_name\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "0d1b0587-3ef2-43ba-92c4-74d3787892e5",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "114"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              49,
              51,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              112,
              105,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              55,
              56,
              51,
              54,
              52,
              55,
              54,
              56,
              53,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 287,
          "responseSize": 114
        },
        "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Registration successful",
            "skipped": false
          },
          {
            "assertion": "Response contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains user data",
              "message": "expected { …(4) } to have property 'id'",
              "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0228da1e-e739-48dd-9199-2b124f0f9729",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c4ccb9f-d383-4a01-acfe-eafd0904fead"
        },
        "item": {
          "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e1d9918-2cbb-46d2-842a-945014785738",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"api.test.1757836476851@example.com\",\n    \"password\": \"ApiTest123!\"\n}"
          }
        },
        "response": {
          "id": "06dd3b8b-ca53-47d7-9933-2bd02a84e082",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "329"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              49,
              99,
              50,
              86,
              121,
              88,
              50,
              108,
              107,
              73,
              106,
              111,
              120,
              77,
              121,
              119,
              105,
              90,
              87,
              49,
              104,
              97,
              87,
              119,
              105,
              79,
              105,
              74,
              104,
              99,
              71,
              107,
              117,
              100,
              71,
              86,
              122,
              100,
              67,
              52,
              120,
              78,
              122,
              85,
              51,
              79,
              68,
              77,
              50,
              78,
              68,
              99,
              50,
              79,
              68,
              85,
              120,
              81,
              71,
              86,
              52,
              89,
              87,
              49,
              119,
              98,
              71,
              85,
              117,
              89,
              50,
              57,
              116,
              73,
              105,
              119,
              105,
              99,
              109,
              57,
              115,
              90,
              83,
              73,
              54,
              73,
              110,
              86,
              122,
              90,
              88,
              73,
              105,
              76,
              67,
              74,
              106,
              98,
              71,
              108,
              108,
              98,
              110,
              82,
              102,
              97,
              87,
              81,
              105,
              79,
              106,
              69,
              122,
              76,
              67,
              74,
              108,
              101,
              72,
              65,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              99,
              52,
              77,
              122,
              103,
              121,
              78,
              122,
              99,
              115,
              73,
              110,
              82,
              53,
              99,
              71,
              85,
              105,
              79,
              105,
              74,
              104,
              89,
              50,
              78,
              108,
              99,
              51,
              77,
              105,
              102,
              81,
              46,
              82,
              119,
              76,
              88,
              95,
              79,
              53,
              45,
              119,
              55,
              105,
              101,
              98,
              121,
              84,
              118,
              85,
              118,
              72,
              68,
              74,
              97,
              98,
              120,
              80,
              105,
              101,
              118,
              83,
              86,
              86,
              104,
              48,
              115,
              108,
              107,
              107,
              65,
              106,
              97,
              73,
              75,
              115,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              98,
              101,
              97,
              114,
              101,
              114,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              105,
              110,
              34,
              58,
              49,
              56,
              48,
              48,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              49,
              51,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 310,
          "responseSize": 329
        },
        "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false
          },
          {
            "assertion": "Response contains token",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "Response contains token",
              "message": "Invalid Chai property: or. Did you mean \"of\"?",
              "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "65453a56-a570-40e3-891d-8dd720c31b36",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5bc28183-8ac4-4f1e-9d12-65b16df66910"
        },
        "item": {
          "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f3cbb4c-97e3-402f-b5c2-bb819a5d4175",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0fdb4515-8199-4c2a-a96f-69aec0c35831",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieved successfully",
              "message": "expected 404 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7db0852a-a322-42ea-90b7-52c56718d7c2",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e0c80f2-85b6-4160-ab16-f9c200b15b62"
        },
        "item": {
          "id": "a84bcec3-39b3-4553-9752-c95ed215f189",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fc11bea-ef49-4564-8943-1d3c68e4b3dd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b5a29b23-443e-4a71-91bf-93ce5fda20f3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8bd202b5-084c-4153-bfd2-ecb05e35b5ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1b7db0b2-fc93-4b41-b33e-02d5da31abb7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "a84bcec3-39b3-4553-9752-c95ed215f189",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "User list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User list retrieved",
              "message": "expected 404 to be one of [ 200, 401, 403 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f5483b40-77fe-4b3c-be77-92c5db00a6fb",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4f0f51d5-661e-40e5-ac6f-a60dd1c0cfe2"
        },
        "item": {
          "id": "3ba4f6f4-2a61-41f4-bc40-4485cd7f11d2",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8baa9ff4-be07-42b7-8de5-86fe06a2b44b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "47aafa03-d44c-4d16-ae5d-ed056d2e1fc6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users",
              "13"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5d989d3f-2702-477f-b49c-b36537f433c1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "109",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
          }
        },
        "response": {
          "id": "16407633-5110-4f57-bdac-a3d93f567d9d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "3ba4f6f4-2a61-41f4-bc40-4485cd7f11d2",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile update processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile update processed",
              "message": "expected 404 to be one of [ 200, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bd737045-0c11-42be-8399-973587b94b3a",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f6abc397-73ea-46f9-b6e4-c574205a621d"
        },
        "item": {
          "id": "9d0baa56-b4de-4e00-a2b9-07ccda6ade0d",
          "name": "Get Chat History",
          "request": {
            "url": {
              "path": [
                "chat",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5d00620-e789-4838-8620-96204f8adbb2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat history retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains chat data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c8388825-0c7d-4d61-9d13-30a04c9dba94"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6e153e34-2185-4c19-a4e6-ede197a8cc51",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bfa885f4-2eb3-472e-9050-72871489a052",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "9d0baa56-b4de-4e00-a2b9-07ccda6ade0d",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat history retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "abd019af-30a8-4914-ae05-629b08808c6f",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "831ab87f-5ef8-4a5e-b0bc-df2439f3babf"
        },
        "item": {
          "id": "e13de10c-0480-4ed2-81e8-a9831c99f8b9",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "744efd83-63d9-4e47-8248-5df4b01dd5c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "b250612e-635c-4b6c-879d-ca45c3c5076c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5eedb41d-cd2f-4f1a-ad7e-4ad89b960d6e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "95",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
          }
        },
        "response": {
          "id": "7bc2791d-23dc-4cc9-938a-373e9bc301ec",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "e13de10c-0480-4ed2-81e8-a9831c99f8b9",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat creation processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chat creation processed",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5425b5d7-06d8-4318-b285-a6ecc69524b4",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "13016d94-d87a-4378-b23c-b3a48c69d3db"
        },
        "item": {
          "id": "385e51bf-d916-440b-8010-532d8a5d583a",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "800a3050-c801-497f-a8ac-37f345f5526f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "28db3d68-8ba8-4adb-8fb0-197b43a62636"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3e373780-0b8f-41d6-b55e-b8a4be92dc59",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "134",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
          }
        },
        "response": {
          "id": "863fa2fa-cb3a-43f7-8356-74589039214b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "385e51bf-d916-440b-8010-532d8a5d583a",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "22c55ef2-d6ec-4394-8de2-36419bfdce0b",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "91bee867-0a00-4930-90d7-7c815cf46aa4"
        },
        "item": {
          "id": "ae0371ff-944a-486e-a518-2cdf98a2ffe6",
          "name": "Get Documents List",
          "request": {
            "url": {
              "path": [
                "documents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96208757-deba-4010-ae60-977278da0f52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Documents list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains documents data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7c59149a-80ab-4aee-adc5-54f13252f622"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d2750175-5068-4f87-855d-97094ebc9cb3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d0172491-9f9e-449b-ae92-fdfcbab3bce5",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "ae0371ff-944a-486e-a518-2cdf98a2ffe6",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Documents list retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3d3bdb06-e6fc-4cfe-9b8d-dcce924baedd",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "08688871-8df8-40bc-837f-3207398da407"
        },
        "item": {
          "id": "6b8cdd15-c846-42e4-88eb-ce2934c284d9",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22c72d25-2dff-4bed-938c-2103b501d745",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6caf5992-c359-4010-bffb-22ad05d31b7a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxMywiZW1haWwiOiJhcGkudGVzdC4xNzU3ODM2NDc2ODUxQGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjEzLCJleHAiOjE3NTc4MzgyNzcsInR5cGUiOiJhY2Nlc3MifQ.RwLX_O5-w7iebyTvUvHDJabxPievSVVh0slkkAjaIKs"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "318e0352-6d18-4358-8ada-0b3ac0a11704",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "451",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "value": "This is a test document content for API testing.",
                "type": "text"
              },
              {
                "key": "filename",
                "value": "api-test-document.txt",
                "type": "text"
              },
              {
                "key": "document_type",
                "value": "text",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "1cf9eb4e-b276-46c6-b412-56f5e60f56cd",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "DELETE"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 31
        },
        "id": "6b8cdd15-c846-42e4-88eb-ce2934c284d9",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Document upload processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Document upload processed",
              "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
              "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1dc6977c-41b8-4b13-ab1c-c178eff9c3fc",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "54fc1c66-b25c-498a-82de-b52516535e4f"
        },
        "item": {
          "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "invalid-endpoint-test"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1217d6ea-8ab8-40d5-86da-4026f85aff73",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ab1d5b4b-e70e-4921-95e0-856153101fb4",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Invalid endpoint returns 404",
            "skipped": false
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error response has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ac8edf75-824b-4ec6-b539-42ed0de8ca1c",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f9c70ca1-595c-410b-ae02-621ed3bf9db4"
        },
        "item": {
          "id": "5d25512b-3302-4063-99d9-e4362149eb83",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d0b314b-ef20-451f-b99b-b817e801f4cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c069d96a-1a58-4b25-83c2-0f05857cf1f8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "5d25512b-3302-4063-99d9-e4362149eb83",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Unauthorized request returns 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized request returns 401",
              "message": "expected 404 to equal 401",
              "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Unauthorized error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Unauthorized error has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7eb750cb-8dc9-4dda-a750-248258094d78",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "36fc5622-465d-460f-9163-e0fa3677fd4c"
        },
        "item": {
          "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "47ce09b6-8a7d-4bd3-ba0f-920bdc7d271e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "26",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"invalid\": json syntax }"
          }
        },
        "response": {
          "id": "d02235b0-9655-4bc2-b889-0a84c882037e",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 07:54:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 125
        },
        "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Malformed JSON returns 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Malformed JSON returns 400",
              "message": "expected 422 to equal 400",
              "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Bad request error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bad request error has proper structure",
              "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
              "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 841
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4174ab55415cd8b91968c41aa1025020",
          "id": "0a8fae99-b078-40ad-9190-e4df5ef294a2",
          "timestamp": 1757836476796,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "c8858dc4-3a5e-4878-b879-427a3b86b368"
              }
            }
          ]
        },
        "parent": {
          "id": "4679a4b4-3c55-4e11-8fe9-4303b970f34f",
          "name": "Health Check",
          "item": [
            {
              "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "c8858dc4-3a5e-4878-b879-427a3b86b368"
                  }
                }
              ]
            },
            {
              "id": "f407f985-aa31-4250-be2d-48a5686a1c75",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4674dbb1-6d9c-41ff-9b03-b31ab5f13692",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "aacd51fb-68f9-44e7-9a8d-8c4bdcfc52a1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5fa8f06b-001f-401b-8fab-4d84930a10da",
          "httpRequestId": "6424e79b-9567-4dfc-ad0c-5252bf6dffc8",
          "scriptId": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
          "execution": "c8858dc4-3a5e-4878-b879-427a3b86b368"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Health check response is valid",
          "message": "expected { detail: 'Not Found' } to have property 'status'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "3fec33c01d5170ce5ae19c74ab2f8cf0",
          "id": "a8abe2b5-6910-4845-8ac1-2cb072f602f6",
          "timestamp": 1757836476801,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "c8858dc4-3a5e-4878-b879-427a3b86b368"
              }
            }
          ]
        },
        "parent": {
          "id": "4679a4b4-3c55-4e11-8fe9-4303b970f34f",
          "name": "Health Check",
          "item": [
            {
              "id": "82964f7d-82b6-4b53-8813-18c1d4d4d6bf",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "c8858dc4-3a5e-4878-b879-427a3b86b368"
                  }
                }
              ]
            },
            {
              "id": "f407f985-aa31-4250-be2d-48a5686a1c75",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4674dbb1-6d9c-41ff-9b03-b31ab5f13692",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "aacd51fb-68f9-44e7-9a8d-8c4bdcfc52a1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5fa8f06b-001f-401b-8fab-4d84930a10da",
          "httpRequestId": "6424e79b-9567-4dfc-ad0c-5252bf6dffc8",
          "scriptId": "40f22134-e3b6-4be5-ae19-28edbe83d1c0",
          "execution": "c8858dc4-3a5e-4878-b879-427a3b86b368"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains user data",
          "message": "expected { …(4) } to have property 'id'",
          "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "282152ebb61ae5bc2af8dd5de2358177",
          "id": "78ff68d7-602b-448e-9f6a-84a3c69b7793",
          "timestamp": 1757836477164,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
              }
            }
          ]
        },
        "parent": {
          "id": "1f4417e8-fb68-4268-a858-fd5dd0c35770",
          "name": "Authentication",
          "item": [
            {
              "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
                  }
                }
              ]
            },
            {
              "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
                  }
                }
              ]
            },
            {
              "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6859bb10-35c4-45e7-a0ff-0c4c151da89c",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "76df2c87-b6fe-4637-8361-00f131890ed0",
          "scriptId": "dc514568-b241-455d-b0b1-47b512e0e81f",
          "execution": "895113b9-8ef6-4f3c-9421-2311f979e773"
        }
      },
      {
        "error": {
          "name": "Error",
          "index": 1,
          "test": "Response contains token",
          "message": "Invalid Chai property: or. Did you mean \"of\"?",
          "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "ee4f665adcf26da82d9bbb5e430da335",
          "id": "7f0e84e2-71d5-4703-9c01-480695d3c1f0",
          "timestamp": 1757836477521,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
              }
            }
          ]
        },
        "parent": {
          "id": "1f4417e8-fb68-4268-a858-fd5dd0c35770",
          "name": "Authentication",
          "item": [
            {
              "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
                  }
                }
              ]
            },
            {
              "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
                  }
                }
              ]
            },
            {
              "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0228da1e-e739-48dd-9199-2b124f0f9729",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c4ccb9f-d383-4a01-acfe-eafd0904fead",
          "scriptId": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
          "execution": "ead4f479-d559-48a7-bc68-1813073fa23a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieved successfully",
          "message": "expected 404 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "f45f8aed2e992ff72e00af650c794b81",
          "id": "ce5cdab2-1368-4088-80c5-8571620627ac",
          "timestamp": 1757836477559,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
              }
            }
          ]
        },
        "parent": {
          "id": "1f4417e8-fb68-4268-a858-fd5dd0c35770",
          "name": "Authentication",
          "item": [
            {
              "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
                  }
                }
              ]
            },
            {
              "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
                  }
                }
              ]
            },
            {
              "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "65453a56-a570-40e3-891d-8dd720c31b36",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5bc28183-8ac4-4f1e-9d12-65b16df66910",
          "scriptId": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
          "execution": "5c6d265d-42db-4294-99d8-50e15abef835"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "91e550e7570b0dc08f64277821830c36",
          "id": "4cf71101-5d36-4399-b45a-0b2530cbf565",
          "timestamp": 1757836477560,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
              }
            }
          ]
        },
        "parent": {
          "id": "1f4417e8-fb68-4268-a858-fd5dd0c35770",
          "name": "Authentication",
          "item": [
            {
              "id": "f7d196b9-4745-4beb-a141-f28c8a07a10d",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3b1a0190-f3f6-4971-955a-a3847cee63f6",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "c8ee0356-7cce-47e6-9a2b-10390f1b34e0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dc514568-b241-455d-b0b1-47b512e0e81f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "895113b9-8ef6-4f3c-9421-2311f979e773"
                  }
                }
              ]
            },
            {
              "id": "0657f277-ea9d-44de-a69e-c5af71a7e58b",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d79f1fc-acca-476e-abfa-b53100e4d3e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "ead4f479-d559-48a7-bc68-1813073fa23a"
                  }
                }
              ]
            },
            {
              "id": "6b2727d5-8480-44a1-8dc5-29e5bdd799b1",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "5c6d265d-42db-4294-99d8-50e15abef835"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "65453a56-a570-40e3-891d-8dd720c31b36",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5bc28183-8ac4-4f1e-9d12-65b16df66910",
          "scriptId": "527eb6e9-a2b8-4adf-bf50-86b5fe4e213c",
          "execution": "5c6d265d-42db-4294-99d8-50e15abef835"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User list retrieved",
          "message": "expected 404 to be one of [ 200, 401, 403 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "dee684aff48b8c31a368ca371bc06b3a",
          "id": "ea028df1-dec5-4704-9478-4e7cd079c86d",
          "timestamp": 1757836477591,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a84bcec3-39b3-4553-9752-c95ed215f189",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fc11bea-ef49-4564-8943-1d3c68e4b3dd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b5a29b23-443e-4a71-91bf-93ce5fda20f3"
              }
            }
          ]
        },
        "parent": {
          "id": "cbac2e31-3ed6-46b4-84a6-a28c305ceffc",
          "name": "User Management",
          "item": [
            {
              "id": "a84bcec3-39b3-4553-9752-c95ed215f189",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fc11bea-ef49-4564-8943-1d3c68e4b3dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b5a29b23-443e-4a71-91bf-93ce5fda20f3"
                  }
                }
              ]
            },
            {
              "id": "3ba4f6f4-2a61-41f4-bc40-4485cd7f11d2",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8baa9ff4-be07-42b7-8de5-86fe06a2b44b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47aafa03-d44c-4d16-ae5d-ed056d2e1fc6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7db0852a-a322-42ea-90b7-52c56718d7c2",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e0c80f2-85b6-4160-ab16-f9c200b15b62",
          "scriptId": "2fc11bea-ef49-4564-8943-1d3c68e4b3dd",
          "execution": "b5a29b23-443e-4a71-91bf-93ce5fda20f3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile update processed",
          "message": "expected 404 to be one of [ 200, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "3ad691f9c350474b606aa4712ac53ff9",
          "id": "9efacd26-b7fd-4372-99f4-16b4db92d403",
          "timestamp": 1757836477634,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3ba4f6f4-2a61-41f4-bc40-4485cd7f11d2",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8baa9ff4-be07-42b7-8de5-86fe06a2b44b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "47aafa03-d44c-4d16-ae5d-ed056d2e1fc6"
              }
            }
          ]
        },
        "parent": {
          "id": "cbac2e31-3ed6-46b4-84a6-a28c305ceffc",
          "name": "User Management",
          "item": [
            {
              "id": "a84bcec3-39b3-4553-9752-c95ed215f189",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fc11bea-ef49-4564-8943-1d3c68e4b3dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b5a29b23-443e-4a71-91bf-93ce5fda20f3"
                  }
                }
              ]
            },
            {
              "id": "3ba4f6f4-2a61-41f4-bc40-4485cd7f11d2",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8baa9ff4-be07-42b7-8de5-86fe06a2b44b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47aafa03-d44c-4d16-ae5d-ed056d2e1fc6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f5483b40-77fe-4b3c-be77-92c5db00a6fb",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4f0f51d5-661e-40e5-ac6f-a60dd1c0cfe2",
          "scriptId": "8baa9ff4-be07-42b7-8de5-86fe06a2b44b",
          "execution": "47aafa03-d44c-4d16-ae5d-ed056d2e1fc6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chat creation processed",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "517b49c40884a35fb4070dc67d69990a",
          "id": "8043e054-4f76-4aef-9f84-92635b7f2404",
          "timestamp": 1757836477695,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e13de10c-0480-4ed2-81e8-a9831c99f8b9",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "744efd83-63d9-4e47-8248-5df4b01dd5c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "b250612e-635c-4b6c-879d-ca45c3c5076c"
              }
            }
          ]
        },
        "parent": {
          "id": "17caec3b-3bd5-409f-a6bc-8ae9c6b1c3cb",
          "name": "Chat & AI",
          "item": [
            {
              "id": "9d0baa56-b4de-4e00-a2b9-07ccda6ade0d",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5d00620-e789-4838-8620-96204f8adbb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c8388825-0c7d-4d61-9d13-30a04c9dba94"
                  }
                }
              ]
            },
            {
              "id": "e13de10c-0480-4ed2-81e8-a9831c99f8b9",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "744efd83-63d9-4e47-8248-5df4b01dd5c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "b250612e-635c-4b6c-879d-ca45c3c5076c"
                  }
                }
              ]
            },
            {
              "id": "385e51bf-d916-440b-8010-532d8a5d583a",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "800a3050-c801-497f-a8ac-37f345f5526f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "28db3d68-8ba8-4adb-8fb0-197b43a62636"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "abd019af-30a8-4914-ae05-629b08808c6f",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "831ab87f-5ef8-4a5e-b0bc-df2439f3babf",
          "scriptId": "744efd83-63d9-4e47-8248-5df4b01dd5c6",
          "execution": "b250612e-635c-4b6c-879d-ca45c3c5076c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "7d883533238ef43427d20169b06b6530",
          "id": "50b10120-885a-4b8a-b0c0-267590cb125c",
          "timestamp": 1757836477722,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "385e51bf-d916-440b-8010-532d8a5d583a",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "800a3050-c801-497f-a8ac-37f345f5526f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "28db3d68-8ba8-4adb-8fb0-197b43a62636"
              }
            }
          ]
        },
        "parent": {
          "id": "17caec3b-3bd5-409f-a6bc-8ae9c6b1c3cb",
          "name": "Chat & AI",
          "item": [
            {
              "id": "9d0baa56-b4de-4e00-a2b9-07ccda6ade0d",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5d00620-e789-4838-8620-96204f8adbb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c8388825-0c7d-4d61-9d13-30a04c9dba94"
                  }
                }
              ]
            },
            {
              "id": "e13de10c-0480-4ed2-81e8-a9831c99f8b9",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "744efd83-63d9-4e47-8248-5df4b01dd5c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "b250612e-635c-4b6c-879d-ca45c3c5076c"
                  }
                }
              ]
            },
            {
              "id": "385e51bf-d916-440b-8010-532d8a5d583a",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "800a3050-c801-497f-a8ac-37f345f5526f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "28db3d68-8ba8-4adb-8fb0-197b43a62636"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5425b5d7-06d8-4318-b285-a6ecc69524b4",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "13016d94-d87a-4378-b23c-b3a48c69d3db",
          "scriptId": "800a3050-c801-497f-a8ac-37f345f5526f",
          "execution": "28db3d68-8ba8-4adb-8fb0-197b43a62636"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Document upload processed",
          "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
          "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "f5ce20a503f989c916cb76904f7198ce",
          "id": "476a4d25-e995-4ee1-83a2-2a763e4447c3",
          "timestamp": 1757836477798,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6b8cdd15-c846-42e4-88eb-ce2934c284d9",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22c72d25-2dff-4bed-938c-2103b501d745",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6caf5992-c359-4010-bffb-22ad05d31b7a"
              }
            }
          ]
        },
        "parent": {
          "id": "ff9a2b21-147f-47cc-bbbd-9e1417a60091",
          "name": "Documents",
          "item": [
            {
              "id": "ae0371ff-944a-486e-a518-2cdf98a2ffe6",
              "name": "Get Documents List",
              "request": {
                "url": {
                  "path": [
                    "documents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96208757-deba-4010-ae60-977278da0f52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Documents list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains documents data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7c59149a-80ab-4aee-adc5-54f13252f622"
                  }
                }
              ]
            },
            {
              "id": "6b8cdd15-c846-42e4-88eb-ce2934c284d9",
              "name": "Upload Document",
              "request": {
                "url": {
                  "path": [
                    "documents",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "value": "This is a test document content for API testing.",
                      "type": "text"
                    },
                    {
                      "key": "filename",
                      "value": "api-test-document.txt",
                      "type": "text"
                    },
                    {
                      "key": "document_type",
                      "value": "text",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22c72d25-2dff-4bed-938c-2103b501d745",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Document upload processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Document uploaded successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6caf5992-c359-4010-bffb-22ad05d31b7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3d3bdb06-e6fc-4cfe-9b8d-dcce924baedd",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "08688871-8df8-40bc-837f-3207398da407",
          "scriptId": "22c72d25-2dff-4bed-938c-2103b501d745",
          "execution": "6caf5992-c359-4010-bffb-22ad05d31b7a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error response has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "54a0c4f590dae0b8df599e0cebf0f9c8",
          "id": "142b2afc-b73b-4187-8eea-24880a433e94",
          "timestamp": 1757836477826,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
              }
            }
          ]
        },
        "parent": {
          "id": "8dd2f860-d2f5-48f1-b67c-b5181f2ed222",
          "name": "Error Handling",
          "item": [
            {
              "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
                  }
                }
              ]
            },
            {
              "id": "5d25512b-3302-4063-99d9-e4362149eb83",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
                  }
                }
              ]
            },
            {
              "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1dc6977c-41b8-4b13-ab1c-c178eff9c3fc",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "54fc1c66-b25c-498a-82de-b52516535e4f",
          "scriptId": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
          "execution": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized request returns 401",
          "message": "expected 404 to equal 401",
          "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "7b3c0af0cf494ab26b3c2934c416969a",
          "id": "09b60721-5db8-4add-bbf3-b4df76cc9e6f",
          "timestamp": 1757836477855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5d25512b-3302-4063-99d9-e4362149eb83",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
              }
            }
          ]
        },
        "parent": {
          "id": "8dd2f860-d2f5-48f1-b67c-b5181f2ed222",
          "name": "Error Handling",
          "item": [
            {
              "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
                  }
                }
              ]
            },
            {
              "id": "5d25512b-3302-4063-99d9-e4362149eb83",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
                  }
                }
              ]
            },
            {
              "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac8edf75-824b-4ec6-b539-42ed0de8ca1c",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f9c70ca1-595c-410b-ae02-621ed3bf9db4",
          "scriptId": "b85a9ca5-386f-4455-a2bb-660b117bab62",
          "execution": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Unauthorized error has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "8e5c678810671225d82b6dc1d5130be4",
          "id": "b0e8c8f2-1045-4e13-82bc-a05bad97f9bb",
          "timestamp": 1757836477857,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5d25512b-3302-4063-99d9-e4362149eb83",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
              }
            }
          ]
        },
        "parent": {
          "id": "8dd2f860-d2f5-48f1-b67c-b5181f2ed222",
          "name": "Error Handling",
          "item": [
            {
              "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
                  }
                }
              ]
            },
            {
              "id": "5d25512b-3302-4063-99d9-e4362149eb83",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
                  }
                }
              ]
            },
            {
              "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac8edf75-824b-4ec6-b539-42ed0de8ca1c",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f9c70ca1-595c-410b-ae02-621ed3bf9db4",
          "scriptId": "b85a9ca5-386f-4455-a2bb-660b117bab62",
          "execution": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Malformed JSON returns 400",
          "message": "expected 422 to equal 400",
          "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "60fc70cc308f1a67aaab5fc2a530a5fc",
          "id": "1972809e-ed32-488b-ac53-4d5187b53369",
          "timestamp": 1757836477893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
              }
            }
          ]
        },
        "parent": {
          "id": "8dd2f860-d2f5-48f1-b67c-b5181f2ed222",
          "name": "Error Handling",
          "item": [
            {
              "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
                  }
                }
              ]
            },
            {
              "id": "5d25512b-3302-4063-99d9-e4362149eb83",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
                  }
                }
              ]
            },
            {
              "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7eb750cb-8dc9-4dda-a750-248258094d78",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "36fc5622-465d-460f-9163-e0fa3677fd4c",
          "scriptId": "9bd30091-a3cc-4965-9791-6a570ebff01f",
          "execution": "705538e7-24f2-4f08-a5b7-dabb03535261"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bad request error has proper structure",
          "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
          "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "225cf0641b0ae786b96f702bad5546b5",
          "id": "1f055b8b-c080-42f9-98ab-bce3e313a4fc",
          "timestamp": 1757836477895,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
              }
            }
          ]
        },
        "parent": {
          "id": "8dd2f860-d2f5-48f1-b67c-b5181f2ed222",
          "name": "Error Handling",
          "item": [
            {
              "id": "affcd7e3-eee8-45ae-9900-016ec4138602",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "682c4db3-6cd9-48dc-b6bf-ed4f77f1a1e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "811e5ea9-9256-4b3b-bcd0-8a68e4121053"
                  }
                }
              ]
            },
            {
              "id": "5d25512b-3302-4063-99d9-e4362149eb83",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b85a9ca5-386f-4455-a2bb-660b117bab62",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "0ed82bb2-86f2-4b42-96ec-583aabd91861"
                  }
                }
              ]
            },
            {
              "id": "2443b91f-79fa-4e30-9e5d-762642d51bdc",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bd30091-a3cc-4965-9791-6a570ebff01f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "705538e7-24f2-4f08-a5b7-dabb03535261"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7eb750cb-8dc9-4dda-a750-248258094d78",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "36fc5622-465d-460f-9163-e0fa3677fd4c",
          "scriptId": "9bd30091-a3cc-4965-9791-6a570ebff01f",
          "execution": "705538e7-24f2-4f08-a5b7-dabb03535261"
        }
      }
    ],
    "error": null
  }
}