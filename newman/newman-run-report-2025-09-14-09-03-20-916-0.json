{
  "collection": {
    "_": {
      "postman_id": "pixel-ai-creator-api-tests"
    },
    "item": [
      {
        "id": "eb5ed88e-b528-4c58-bc7d-f972a6947fdc",
        "name": "Health Check",
        "item": [
          {
            "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
            "name": "API Health Check",
            "request": {
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "17331800-69d7-4a1c-8b21-27018d797ee9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Health check response is valid', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                    "});"
                  ],
                  "_lastExecutionId": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
                }
              }
            ]
          },
          {
            "id": "334b6212-1baa-4592-bc46-f18e998d687f",
            "name": "API Root Endpoint",
            "request": {
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ca221a69-7e00-4919-a817-87a270131f27",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200 or 404', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                    "});",
                    "",
                    "pm.test('Response is JSON', function () {",
                    "    pm.response.to.be.json;",
                    "});"
                  ],
                  "_lastExecutionId": "64072117-50d9-4fbd-9968-eb476778c9ad"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8f467248-83d3-43c7-9a47-baa06f1ddb40",
        "name": "Authentication",
        "item": [
          {
            "id": "433aa747-06e6-4ef3-91f1-586c80365023",
            "name": "Register New User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique email for this test",
                    "const timestamp = pm.globals.get('timestamp');",
                    "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                    "pm.environment.set('unique_email', uniqueEmail);",
                    "console.log('Using unique email:', uniqueEmail);"
                  ],
                  "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});",
                    "",
                    "// Store user ID for later tests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('user_id', jsonData.id);",
                    "    } else if (jsonData.user_id) {",
                    "        pm.environment.set('user_id', jsonData.user_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
                }
              }
            ]
          },
          {
            "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
            "name": "Login User",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "26f3a231-3540-462e-9104-41947c46146f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Response contains token', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                    "});",
                    "",
                    "// Store token for authenticated requests",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    const jsonData = pm.response.json();",
                    "    let token = jsonData.access_token || jsonData.token;",
                    "    if (token) {",
                    "        pm.environment.set('auth_token', token);",
                    "        console.log('Auth token stored for future requests');",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
                }
              }
            ]
          },
          {
            "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieved successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "});"
                  ],
                  "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e0b9f498-5976-45fa-942f-b499549b56b9",
        "name": "User Management",
        "item": [
          {
            "id": "1e03552f-f382-4635-a363-f796ae03fc67",
            "name": "Get User List",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e8a50caa-ca97-4461-b567-6580eb03925c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response is array or paginated object', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "a9566d8e-86d1-42ce-86da-32e8f8237b7e"
                }
              }
            ]
          },
          {
            "id": "5b540ade-672a-4e71-8d23-3e27fd3a473c",
            "name": "Update User Profile",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{user_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2be56251-9ffa-4e6b-9d6c-11cc562f689d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile update processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Updated profile returned', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "1d80b843-9ed7-40be-ae7b-69165e93d7cc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "480d7a64-acb5-4347-911c-7214d636a40b",
        "name": "Chat & AI",
        "item": [
          {
            "id": "092b8c36-4cf2-45ff-aa38-cee535da5519",
            "name": "Get Chat History",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "45f11629-0608-43bf-9c13-18bedb4476c6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat history retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains chat data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "c4a32c0c-1040-44fe-8612-173cffcca4fe"
                }
              }
            ]
          },
          {
            "id": "b495733c-4d8b-4fbf-9aec-9b68043d0d0a",
            "name": "Create New Chat",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "send"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "59c6ce02-ed1d-4d97-99e4-7c82f8d4238e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chat creation processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Chat created successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                    "    });",
                    "",
                    "    // Store conversation ID for further tests",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.id) {",
                    "        pm.environment.set('conversation_id', jsonData.id);",
                    "    } else if (jsonData.conversation_id) {",
                    "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                    "    }",
                    "}"
                  ],
                  "_lastExecutionId": "27c6bdf7-60f0-4fd8-9795-28cf2064783a"
                }
              }
            ]
          },
          {
            "id": "90adf202-cc2b-4c90-a499-a17ff48f5e84",
            "name": "Send Chat Message",
            "request": {
              "url": {
                "path": [
                  "chat",
                  "message"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "61812c6b-d721-44f8-80c7-aa95aab0189c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Response contains message data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "19fe9271-40d0-4f0d-87a2-adb631593ac9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3ce4b57e-db19-45fb-9010-92d43cad2a2f",
        "name": "Documents",
        "item": [
          {
            "id": "744c0396-717b-4185-8adc-dfbc99a8d3d6",
            "name": "Get Documents List",
            "request": {
              "url": {
                "path": [
                  "documents"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c638efaa-ea29-4f92-941c-fa82095c18e9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Documents list retrieved', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    pm.test('Response contains documents data', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.satisfy(function(data) {",
                    "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                    "        });",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "4eda9b20-a1f8-46c4-a958-b433047887ba"
                }
              }
            ]
          },
          {
            "id": "cf525358-2db3-44d6-b282-39e3b9598032",
            "name": "Upload Document",
            "request": {
              "url": {
                "path": [
                  "documents",
                  "upload"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "file",
                    "value": "This is a test document content for API testing.",
                    "type": "text"
                  },
                  {
                    "key": "filename",
                    "value": "api-test-document.txt",
                    "type": "text"
                  },
                  {
                    "key": "document_type",
                    "value": "text",
                    "type": "text"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c085a017-4c89-47e5-a71c-2aeafc233a52",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Document upload processed', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                    "});",
                    "",
                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                    "    pm.test('Document uploaded successfully', function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "96596d83-a33a-44da-a6be-11fa5e76f2d9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f4683a9f-fabb-4e15-bb7b-94151912304a",
        "name": "Error Handling",
        "item": [
          {
            "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
            "name": "Invalid Endpoint - 404",
            "request": {
              "url": {
                "path": [
                  "invalid-endpoint-test"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid endpoint returns 404', function () {",
                    "    pm.expect(pm.response.code).to.equal(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
                }
              }
            ]
          },
          {
            "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
            "name": "Unauthorized Request - 401",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized request returns 401', function () {",
                    "    pm.expect(pm.response.code).to.equal(401);",
                    "});",
                    "",
                    "pm.test('Unauthorized error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
                }
              }
            ]
          },
          {
            "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
            "name": "Malformed JSON - 400",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{ \"invalid\": json syntax }"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Malformed JSON returns 400', function () {",
                    "    pm.expect(pm.response.code).to.equal(400);",
                    "});",
                    "",
                    "pm.test('Bad request error has proper structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "3af33f00-7f92-4867-b17b-e819a5ba9abb",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Starting API test:', pm.info.requestName);",
            "",
            "// Set timestamp for unique data",
            "pm.globals.set('timestamp', Date.now());"
          ],
          "_lastExecutionId": "2660c85b-24a4-46c2-a65b-6200e5fc92a2"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "db6d7643-0198-42d1-8a6c-ff2435fc29a5",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Response time is less than 5000ms', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Response has proper headers', function () {",
            "    pm.expect(pm.response.headers.has('content-type')).to.be.true;",
            "});",
            "",
            "console.log('Completed API test:', pm.info.requestName, '- Status:', pm.response.status);"
          ],
          "_lastExecutionId": "e34c7cd1-a15c-4a9a-abb7-2bc3e9d2484c"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8002/api",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "api.test@example.com",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "ApiTest123!",
        "key": "test_password"
      },
      {
        "type": "string",
        "value": "",
        "key": "auth_token"
      }
    ],
    "info": {
      "_postman_id": "pixel-ai-creator-api-tests",
      "name": "Pixel AI Creator - API Test Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing for Pixel AI Creator application",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "3595903d-defe-4227-accc-7662e2ee3524",
    "values": [
      {
        "type": "any",
        "value": "api.test.1757840600008@example.com",
        "key": "unique_email"
      },
      {
        "type": "any",
        "value": 31,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "4c8124ac-473b-4e8d-8d1a-6c6752861eda",
    "values": [
      {
        "type": "any",
        "value": 1757840600892,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 46,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 53,
        "pending": 0,
        "failed": 16
      },
      "testScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 41.93333333333333,
      "responseMin": 2,
      "responseMax": 311,
      "responseSd": 95.92251502587328,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757840599883,
      "completed": 1757840600910
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bebaacdd-34f7-4120-9f90-d5d3976e6323",
          "httpRequestId": "47767588-45ae-488c-8b4d-ed23c3226993"
        },
        "item": {
          "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17331800-69d7-4a1c-8b21-27018d797ee9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "83d9c335-b8f0-4baa-b640-1c35444dad17",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "81a0015d-0bb4-42ca-9df0-978d1307b061",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 22
        },
        "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Health check response is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Health check response is valid",
              "message": "expected { detail: 'Not Found' } to have property 'status'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e808a544-6f30-4926-8bd1-742e73f4d665",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "628fc2f0-5ddc-423d-b656-88f05c7790d8"
        },
        "item": {
          "id": "334b6212-1baa-4592-bc46-f18e998d687f",
          "name": "API Root Endpoint",
          "request": {
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca221a69-7e00-4919-a817-87a270131f27",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "_lastExecutionId": "64072117-50d9-4fbd-9968-eb476778c9ad"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb96f442-9e92-444f-b902-ce3fb90ce304",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "838f3b54-8547-40b3-a397-e29d5679058c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "334b6212-1baa-4592-bc46-f18e998d687f",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false
          },
          {
            "assertion": "Response is JSON",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "77a1d4a7-e588-4335-b1f5-3c0ac298f029",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c1de52d8-5316-4ac9-9011-cb66dd1ab997"
        },
        "item": {
          "id": "433aa747-06e6-4ef3-91f1-586c80365023",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b78b05d-22ef-4db3-8492-bf432bb04341",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"api.test.1757840600008@example.com\",\n    \"password\": \"ApiTest123!\",\n    \"company_name\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "4fcf228a-fddb-47ba-9241-fa36acfbb6ca",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "114"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              51,
              49,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              97,
              112,
              105,
              46,
              116,
              101,
              115,
              116,
              46,
              49,
              55,
              53,
              55,
              56,
              52,
              48,
              54,
              48,
              48,
              48,
              48,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 311,
          "responseSize": 114
        },
        "id": "433aa747-06e6-4ef3-91f1-586c80365023",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Registration successful",
            "skipped": false
          },
          {
            "assertion": "Response contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains user data",
              "message": "expected { …(4) } to have property 'id'",
              "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "72aafb1a-573a-4e81-9831-bb4d57403ffc",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "36676b49-bee9-4b5d-a404-da3263b11649"
        },
        "item": {
          "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26f3a231-3540-462e-9104-41947c46146f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fa347910-8bd3-4c51-aaeb-532785dc3c91",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"api.test.1757840600008@example.com\",\n    \"password\": \"ApiTest123!\"\n}"
          }
        },
        "response": {
          "id": "a242ae4e-2188-4d38-95bf-93b6d47d8b36",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "329"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              99,
              99,
              101,
              115,
              115,
              95,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              49,
              99,
              50,
              86,
              121,
              88,
              50,
              108,
              107,
              73,
              106,
              111,
              122,
              77,
              83,
              119,
              105,
              90,
              87,
              49,
              104,
              97,
              87,
              119,
              105,
              79,
              105,
              74,
              104,
              99,
              71,
              107,
              117,
              100,
              71,
              86,
              122,
              100,
              67,
              52,
              120,
              78,
              122,
              85,
              51,
              79,
              68,
              81,
              119,
              78,
              106,
              65,
              119,
              77,
              68,
              65,
              52,
              81,
              71,
              86,
              52,
              89,
              87,
              49,
              119,
              98,
              71,
              85,
              117,
              89,
              50,
              57,
              116,
              73,
              105,
              119,
              105,
              99,
              109,
              57,
              115,
              90,
              83,
              73,
              54,
              73,
              110,
              86,
              122,
              90,
              88,
              73,
              105,
              76,
              67,
              74,
              106,
              98,
              71,
              108,
              108,
              98,
              110,
              82,
              102,
              97,
              87,
              81,
              105,
              79,
              106,
              77,
              120,
              76,
              67,
              74,
              108,
              101,
              72,
              65,
              105,
              79,
              106,
              69,
              51,
              78,
              84,
              99,
              52,
              78,
              68,
              73,
              48,
              77,
              68,
              65,
              115,
              73,
              110,
              82,
              53,
              99,
              71,
              85,
              105,
              79,
              105,
              74,
              104,
              89,
              50,
              78,
              108,
              99,
              51,
              77,
              105,
              102,
              81,
              46,
              77,
              50,
              51,
              56,
              105,
              85,
              66,
              98,
              56,
              114,
              108,
              82,
              73,
              121,
              102,
              77,
              109,
              100,
              108,
              118,
              105,
              108,
              82,
              103,
              113,
              103,
              102,
              119,
              105,
              115,
              109,
              51,
              57,
              82,
              55,
              54,
              76,
              115,
              95,
              74,
              66,
              74,
              111,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              98,
              101,
              97,
              114,
              101,
              114,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              105,
              110,
              34,
              58,
              49,
              56,
              48,
              48,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              58,
              51,
              49,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              117,
              115,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 259,
          "responseSize": 329
        },
        "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false
          },
          {
            "assertion": "Response contains token",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "Response contains token",
              "message": "Invalid Chai property: or. Did you mean \"of\"?",
              "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "504eb6dd-0a60-4e2f-b71b-425803c96efc",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c7baa676-60e9-4054-84d6-0089cde6107d"
        },
        "item": {
          "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1cc9ee61-0f00-4244-935c-4ced871c4de4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7e781823-9162-4e42-99ae-6d6870d56ac9",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieved successfully",
              "message": "expected 404 to be one of [ 200, 201 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "af19de2f-b692-45b3-840e-10eec1e5d497",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ccecbd93-52fa-497e-9367-89a9748f52b8"
        },
        "item": {
          "id": "1e03552f-f382-4635-a363-f796ae03fc67",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8a50caa-ca97-4461-b567-6580eb03925c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a9566d8e-86d1-42ce-86da-32e8f8237b7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3355865e-9fbe-4e21-b4b6-649dd5cf4bec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5a831317-2e45-4993-803d-b93ad2d553bc",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "1e03552f-f382-4635-a363-f796ae03fc67",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "User list retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User list retrieved",
              "message": "expected 404 to be one of [ 200, 401, 403 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f61dd56b-4232-4b8e-88fe-fec411edc2e0",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8f13c05b-7343-4abd-b036-11ad8fbc0bf3"
        },
        "item": {
          "id": "5b540ade-672a-4e71-8d23-3e27fd3a473c",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2be56251-9ffa-4e6b-9d6c-11cc562f689d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1d80b843-9ed7-40be-ae7b-69165e93d7cc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "users",
              "31"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c073c1f5-d77d-4239-a37c-54d7558ddd8d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "109",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
          }
        },
        "response": {
          "id": "8a6cf6f0-b2a2-4344-9bc9-c97dcdb855ab",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "5b540ade-672a-4e71-8d23-3e27fd3a473c",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Profile update processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile update processed",
              "message": "expected 404 to be one of [ 200, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a81d5d24-52e9-45a0-91e5-6921d81e874f",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a60443-4ad1-48d2-8287-336fc90f365a"
        },
        "item": {
          "id": "092b8c36-4cf2-45ff-aa38-cee535da5519",
          "name": "Get Chat History",
          "request": {
            "url": {
              "path": [
                "chat",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45f11629-0608-43bf-9c13-18bedb4476c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat history retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains chat data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c4a32c0c-1040-44fe-8612-173cffcca4fe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "233a2593-e753-4297-a05e-48f254c25188",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "45c3a838-af7c-43b2-9836-38f7741be70d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "092b8c36-4cf2-45ff-aa38-cee535da5519",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat history retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "43cc7ceb-7fe2-43ce-b2c5-df606915e559",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "219661f4-629d-4729-8816-9f7348c396e2"
        },
        "item": {
          "id": "b495733c-4d8b-4fbf-9aec-9b68043d0d0a",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "59c6ce02-ed1d-4d97-99e4-7c82f8d4238e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "27c6bdf7-60f0-4fd8-9795-28cf2064783a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "send"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d634d554-5a72-4e0f-a43f-da63aab7b6f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "95",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
          }
        },
        "response": {
          "id": "b16185c4-047b-499a-8d8e-6bd19bb67787",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "b495733c-4d8b-4fbf-9aec-9b68043d0d0a",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Chat creation processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chat creation processed",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6257088c-14f4-4ec8-9fbb-26003e761d21",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "75b9c19b-bf37-4585-a931-68133fd15583"
        },
        "item": {
          "id": "90adf202-cc2b-4c90-a499-a17ff48f5e84",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61812c6b-d721-44f8-80c7-aa95aab0189c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "19fe9271-40d0-4f0d-87a2-adb631593ac9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chat",
              "message"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bf10e13d-7b36-4f38-b7a6-01e967f446bb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "134",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
          }
        },
        "response": {
          "id": "849437a5-b38f-4731-b236-8183d143090f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "90adf202-cc2b-4c90-a499-a17ff48f5e84",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "09403c2b-b0f4-4cd3-8432-5bf1f1789d99",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7db917e3-7e45-4c98-b276-8f4b31aa9864"
        },
        "item": {
          "id": "744c0396-717b-4185-8adc-dfbc99a8d3d6",
          "name": "Get Documents List",
          "request": {
            "url": {
              "path": [
                "documents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c638efaa-ea29-4f92-941c-fa82095c18e9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Documents list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response contains documents data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4eda9b20-a1f8-46c4-a958-b433047887ba"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "223b4531-9799-4f9f-8274-aad0aeeb4fe7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6fa88a48-6749-4aff-bac5-d9577e3def6c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "744c0396-717b-4185-8adc-dfbc99a8d3d6",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Documents list retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d649b105-b0b0-424b-b028-3bd3326e21df",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9143a568-0ab3-4e7c-860d-22d40304101d"
        },
        "item": {
          "id": "cf525358-2db3-44d6-b282-39e3b9598032",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c085a017-4c89-47e5-a71c-2aeafc233a52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "96596d83-a33a-44da-a6be-11fa5e76f2d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "documents",
              "upload"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozMSwiZW1haWwiOiJhcGkudGVzdC4xNzU3ODQwNjAwMDA4QGV4YW1wbGUuY29tIiwicm9sZSI6InVzZXIiLCJjbGllbnRfaWQiOjMxLCJleHAiOjE3NTc4NDI0MDAsInR5cGUiOiJhY2Nlc3MifQ.M238iUBb8rlRIyfMmdlvilRgqgfwism39R76Ls_JBJo"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7bcde818-47df-46c4-a719-bd20edde98c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "451",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "value": "This is a test document content for API testing.",
                "type": "text"
              },
              {
                "key": "filename",
                "value": "api-test-document.txt",
                "type": "text"
              },
              {
                "key": "document_type",
                "value": "text",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "c29c1d4e-70d8-449e-ad5d-f6b51912b11f",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "DELETE"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 31
        },
        "id": "cf525358-2db3-44d6-b282-39e3b9598032",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Document upload processed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Document upload processed",
              "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
              "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "164ca2b7-105b-4bc7-be8c-2fa590673658",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7e38f5f1-d4dd-43f5-9e12-5534e36b49fa"
        },
        "item": {
          "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "invalid-endpoint-test"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04bd23db-0da0-424a-994e-2e2857f3378f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "febf5f7a-a6ac-4bae-a9e2-69c4ff7c7cd5",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Invalid endpoint returns 404",
            "skipped": false
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error response has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ff5c098b-c630-4f65-bf40-50ae48342899",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "34fff6d8-da5f-4c72-8d20-ec5a35b7bfac"
        },
        "item": {
          "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "56d376f7-a17e-4795-abd3-686a9f5834bf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c66bfdda-429d-4efa-870c-626532ae0710",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Unauthorized request returns 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized request returns 401",
              "message": "expected 404 to equal 401",
              "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Unauthorized error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Unauthorized error has proper structure",
              "message": "expected { detail: 'Not Found' } to have property 'error'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0858cf1a-b879-495c-b9a1-db1c474996da",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9cb2e7f3-2957-420e-b9f3-5e9d2bb1b127"
        },
        "item": {
          "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09c4d250-3c3a-4036-a846-e4a63cd386ec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "26",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{ \"invalid\": json syntax }"
          }
        },
        "response": {
          "id": "c4c6e2ba-ff02-4e19-9332-79fd7c67bdec",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 14 Sep 2025 09:03:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 125
        },
        "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
        "assertions": [
          {
            "assertion": "Response time is less than 5000ms",
            "skipped": false
          },
          {
            "assertion": "Response has proper headers",
            "skipped": false
          },
          {
            "assertion": "Malformed JSON returns 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Malformed JSON returns 400",
              "message": "expected 422 to equal 400",
              "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Bad request error has proper structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bad request error has proper structure",
              "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
              "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 841
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4174ab55415cd8b91968c41aa1025020",
          "id": "febc1535-a8f6-40be-9b2f-37a421ef4a18",
          "timestamp": 1757840599970,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17331800-69d7-4a1c-8b21-27018d797ee9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
              }
            }
          ]
        },
        "parent": {
          "id": "eb5ed88e-b528-4c58-bc7d-f972a6947fdc",
          "name": "Health Check",
          "item": [
            {
              "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17331800-69d7-4a1c-8b21-27018d797ee9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
                  }
                }
              ]
            },
            {
              "id": "334b6212-1baa-4592-bc46-f18e998d687f",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca221a69-7e00-4919-a817-87a270131f27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "64072117-50d9-4fbd-9968-eb476778c9ad"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bebaacdd-34f7-4120-9f90-d5d3976e6323",
          "httpRequestId": "47767588-45ae-488c-8b4d-ed23c3226993",
          "scriptId": "17331800-69d7-4a1c-8b21-27018d797ee9",
          "execution": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Health check response is valid",
          "message": "expected { detail: 'Not Found' } to have property 'status'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "3fec33c01d5170ce5ae19c74ab2f8cf0",
          "id": "803b7b42-47da-40ff-9c56-50dcf85672e3",
          "timestamp": 1757840599974,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17331800-69d7-4a1c-8b21-27018d797ee9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                  "});"
                ],
                "_lastExecutionId": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
              }
            }
          ]
        },
        "parent": {
          "id": "eb5ed88e-b528-4c58-bc7d-f972a6947fdc",
          "name": "Health Check",
          "item": [
            {
              "id": "ad81718d-470d-418a-92a1-4541875f2cc9",
              "name": "API Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17331800-69d7-4a1c-8b21-27018d797ee9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'ok', 'up']);",
                      "});"
                    ],
                    "_lastExecutionId": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
                  }
                }
              ]
            },
            {
              "id": "334b6212-1baa-4592-bc46-f18e998d687f",
              "name": "API Root Endpoint",
              "request": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca221a69-7e00-4919-a817-87a270131f27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200 or 404', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "pm.test('Response is JSON', function () {",
                      "    pm.response.to.be.json;",
                      "});"
                    ],
                    "_lastExecutionId": "64072117-50d9-4fbd-9968-eb476778c9ad"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bebaacdd-34f7-4120-9f90-d5d3976e6323",
          "httpRequestId": "47767588-45ae-488c-8b4d-ed23c3226993",
          "scriptId": "17331800-69d7-4a1c-8b21-27018d797ee9",
          "execution": "cd774f85-d28d-4cf8-bea9-802d4f297f4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains user data",
          "message": "expected { …(4) } to have property 'id'",
          "stack": "AssertionError: expected { …(4) } to have property 'id'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "282152ebb61ae5bc2af8dd5de2358177",
          "id": "e5447ce7-3fa7-4e81-8a3a-7f99b4087042",
          "timestamp": 1757840600342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "433aa747-06e6-4ef3-91f1-586c80365023",
          "name": "Register New User",
          "request": {
            "url": {
              "path": [
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique email for this test",
                  "const timestamp = pm.globals.get('timestamp');",
                  "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                  "pm.environment.set('unique_email', uniqueEmail);",
                  "console.log('Using unique email:', uniqueEmail);"
                ],
                "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "// Store user ID for later tests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('user_id', jsonData.id);",
                  "    } else if (jsonData.user_id) {",
                  "        pm.environment.set('user_id', jsonData.user_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
              }
            }
          ]
        },
        "parent": {
          "id": "8f467248-83d3-43c7-9a47-baa06f1ddb40",
          "name": "Authentication",
          "item": [
            {
              "id": "433aa747-06e6-4ef3-91f1-586c80365023",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
                  }
                }
              ]
            },
            {
              "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26f3a231-3540-462e-9104-41947c46146f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
                  }
                }
              ]
            },
            {
              "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77a1d4a7-e588-4335-b1f5-3c0ac298f029",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c1de52d8-5316-4ac9-9011-cb66dd1ab997",
          "scriptId": "d97f6a50-68b1-4114-88b7-247c14fd9150",
          "execution": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
        }
      },
      {
        "error": {
          "name": "Error",
          "index": 1,
          "test": "Response contains token",
          "message": "Invalid Chai property: or. Did you mean \"of\"?",
          "stack": "Error: Invalid Chai property: or. Did you mean \"of\"?\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "ee4f665adcf26da82d9bbb5e430da335",
          "id": "c594f590-1b5a-46e9-805f-9143d288247d",
          "timestamp": 1757840600634,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
          "name": "Login User",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26f3a231-3540-462e-9104-41947c46146f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                  "});",
                  "",
                  "// Store token for authenticated requests",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    let token = jsonData.access_token || jsonData.token;",
                  "    if (token) {",
                  "        pm.environment.set('auth_token', token);",
                  "        console.log('Auth token stored for future requests');",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
              }
            }
          ]
        },
        "parent": {
          "id": "8f467248-83d3-43c7-9a47-baa06f1ddb40",
          "name": "Authentication",
          "item": [
            {
              "id": "433aa747-06e6-4ef3-91f1-586c80365023",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
                  }
                }
              ]
            },
            {
              "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26f3a231-3540-462e-9104-41947c46146f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
                  }
                }
              ]
            },
            {
              "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72aafb1a-573a-4e81-9831-bb4d57403ffc",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "36676b49-bee9-4b5d-a404-da3263b11649",
          "scriptId": "26f3a231-3540-462e-9104-41947c46146f",
          "execution": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieved successfully",
          "message": "expected 404 to be one of [ 200, 201 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "f45f8aed2e992ff72e00af650c794b81",
          "id": "6082621d-a972-423e-a1ea-205b1471fc53",
          "timestamp": 1757840600659,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
              }
            }
          ]
        },
        "parent": {
          "id": "8f467248-83d3-43c7-9a47-baa06f1ddb40",
          "name": "Authentication",
          "item": [
            {
              "id": "433aa747-06e6-4ef3-91f1-586c80365023",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
                  }
                }
              ]
            },
            {
              "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26f3a231-3540-462e-9104-41947c46146f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
                  }
                }
              ]
            },
            {
              "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "504eb6dd-0a60-4e2f-b71b-425803c96efc",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c7baa676-60e9-4054-84d6-0089cde6107d",
          "scriptId": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
          "execution": "c3976693-2f4e-4d1e-9506-636e7810b120"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "91e550e7570b0dc08f64277821830c36",
          "id": "d3ede4a3-b771-4805-91a1-7fe9eb82b848",
          "timestamp": 1757840600659,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "});"
                ],
                "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
              }
            }
          ]
        },
        "parent": {
          "id": "8f467248-83d3-43c7-9a47-baa06f1ddb40",
          "name": "Authentication",
          "item": [
            {
              "id": "433aa747-06e6-4ef3-91f1-586c80365023",
              "name": "Register New User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"API\",\n    \"last_name\": \"Test\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"company_name\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9a300f23-1cd7-42d0-ae63-1a566d52fb4c",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique email for this test",
                      "const timestamp = pm.globals.get('timestamp');",
                      "const uniqueEmail = `api.test.${timestamp}@example.com`;",
                      "pm.environment.set('unique_email', uniqueEmail);",
                      "console.log('Using unique email:', uniqueEmail);"
                    ],
                    "_lastExecutionId": "1a80be6e-4521-4d8d-aeae-64c5503ed5a5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d97f6a50-68b1-4114-88b7-247c14fd9150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id').or.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});",
                      "",
                      "// Store user ID for later tests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('user_id', jsonData.id);",
                      "    } else if (jsonData.user_id) {",
                      "        pm.environment.set('user_id', jsonData.user_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "578f7c89-ade9-47cb-b3ed-cfe49d7431b6"
                  }
                }
              ]
            },
            {
              "id": "8dbfd8d3-4777-4852-a689-d397e66db094",
              "name": "Login User",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26f3a231-3540-462e-9104-41947c46146f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Response contains token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token').or.have.property('token');",
                      "});",
                      "",
                      "// Store token for authenticated requests",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const jsonData = pm.response.json();",
                      "    let token = jsonData.access_token || jsonData.token;",
                      "    if (token) {",
                      "        pm.environment.set('auth_token', token);",
                      "        console.log('Auth token stored for future requests');",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "26b2bec0-87cc-4e82-88ae-66c304e5c48d"
                  }
                }
              ]
            },
            {
              "id": "f6a27134-3328-49b5-a6ae-6ab02f6838db",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieved successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "});"
                    ],
                    "_lastExecutionId": "c3976693-2f4e-4d1e-9506-636e7810b120"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "504eb6dd-0a60-4e2f-b71b-425803c96efc",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c7baa676-60e9-4054-84d6-0089cde6107d",
          "scriptId": "f0848d50-6c47-4a3d-a24a-e2736ec8837d",
          "execution": "c3976693-2f4e-4d1e-9506-636e7810b120"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User list retrieved",
          "message": "expected 404 to be one of [ 200, 401, 403 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 401, 403 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "dee684aff48b8c31a368ca371bc06b3a",
          "id": "9da904df-afab-4aa0-860a-c467953ddb24",
          "timestamp": 1757840600681,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1e03552f-f382-4635-a363-f796ae03fc67",
          "name": "Get User List",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8a50caa-ca97-4461-b567-6580eb03925c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User list retrieved', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Response is array or paginated object', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.satisfy(function(data) {",
                  "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                  "        });",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a9566d8e-86d1-42ce-86da-32e8f8237b7e"
              }
            }
          ]
        },
        "parent": {
          "id": "e0b9f498-5976-45fa-942f-b499549b56b9",
          "name": "User Management",
          "item": [
            {
              "id": "1e03552f-f382-4635-a363-f796ae03fc67",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8a50caa-ca97-4461-b567-6580eb03925c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a9566d8e-86d1-42ce-86da-32e8f8237b7e"
                  }
                }
              ]
            },
            {
              "id": "5b540ade-672a-4e71-8d23-3e27fd3a473c",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2be56251-9ffa-4e6b-9d6c-11cc562f689d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d80b843-9ed7-40be-ae7b-69165e93d7cc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "af19de2f-b692-45b3-840e-10eec1e5d497",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ccecbd93-52fa-497e-9367-89a9748f52b8",
          "scriptId": "e8a50caa-ca97-4461-b567-6580eb03925c",
          "execution": "a9566d8e-86d1-42ce-86da-32e8f8237b7e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile update processed",
          "message": "expected 404 to be one of [ 200, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 400, 401 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "3ad691f9c350474b606aa4712ac53ff9",
          "id": "d088c445-50cb-4702-ba53-fd669e17a5dc",
          "timestamp": 1757840600728,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5b540ade-672a-4e71-8d23-3e27fd3a473c",
          "name": "Update User Profile",
          "request": {
            "url": {
              "path": [
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2be56251-9ffa-4e6b-9d6c-11cc562f689d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile update processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Updated profile returned', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1d80b843-9ed7-40be-ae7b-69165e93d7cc"
              }
            }
          ]
        },
        "parent": {
          "id": "e0b9f498-5976-45fa-942f-b499549b56b9",
          "name": "User Management",
          "item": [
            {
              "id": "1e03552f-f382-4635-a363-f796ae03fc67",
              "name": "Get User List",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8a50caa-ca97-4461-b567-6580eb03925c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 403]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response is array or paginated object', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.items && Array.isArray(data.items));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a9566d8e-86d1-42ce-86da-32e8f8237b7e"
                  }
                }
              ]
            },
            {
              "id": "5b540ade-672a-4e71-8d23-3e27fd3a473c",
              "name": "Update User Profile",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"first_name\": \"Updated API\",\n    \"last_name\": \"Test User\",\n    \"company_name\": \"Updated Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2be56251-9ffa-4e6b-9d6c-11cc562f689d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile update processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Updated profile returned', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('first_name').or.have.property('firstName');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1d80b843-9ed7-40be-ae7b-69165e93d7cc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f61dd56b-4232-4b8e-88fe-fec411edc2e0",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8f13c05b-7343-4abd-b036-11ad8fbc0bf3",
          "scriptId": "2be56251-9ffa-4e6b-9d6c-11cc562f689d",
          "execution": "1d80b843-9ed7-40be-ae7b-69165e93d7cc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chat creation processed",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "517b49c40884a35fb4070dc67d69990a",
          "id": "0e18dbeb-bcb4-4616-8061-2ed501e4019c",
          "timestamp": 1757840600775,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b495733c-4d8b-4fbf-9aec-9b68043d0d0a",
          "name": "Create New Chat",
          "request": {
            "url": {
              "path": [
                "chat",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "59c6ce02-ed1d-4d97-99e4-7c82f8d4238e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chat creation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Chat created successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                  "    });",
                  "",
                  "    // Store conversation ID for further tests",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.id) {",
                  "        pm.environment.set('conversation_id', jsonData.id);",
                  "    } else if (jsonData.conversation_id) {",
                  "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "27c6bdf7-60f0-4fd8-9795-28cf2064783a"
              }
            }
          ]
        },
        "parent": {
          "id": "480d7a64-acb5-4347-911c-7214d636a40b",
          "name": "Chat & AI",
          "item": [
            {
              "id": "092b8c36-4cf2-45ff-aa38-cee535da5519",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45f11629-0608-43bf-9c13-18bedb4476c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c4a32c0c-1040-44fe-8612-173cffcca4fe"
                  }
                }
              ]
            },
            {
              "id": "b495733c-4d8b-4fbf-9aec-9b68043d0d0a",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59c6ce02-ed1d-4d97-99e4-7c82f8d4238e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "27c6bdf7-60f0-4fd8-9795-28cf2064783a"
                  }
                }
              ]
            },
            {
              "id": "90adf202-cc2b-4c90-a499-a17ff48f5e84",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61812c6b-d721-44f8-80c7-aa95aab0189c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "19fe9271-40d0-4f0d-87a2-adb631593ac9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "43cc7ceb-7fe2-43ce-b2c5-df606915e559",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "219661f4-629d-4729-8816-9f7348c396e2",
          "scriptId": "59c6ce02-ed1d-4d97-99e4-7c82f8d4238e",
          "execution": "27c6bdf7-60f0-4fd8-9795-28cf2064783a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected 404 to be one of [ 200, 201, 400, 401 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 400, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "7d883533238ef43427d20169b06b6530",
          "id": "513aa2d9-9ae2-403f-aca6-0991f5c28302",
          "timestamp": 1757840600797,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "90adf202-cc2b-4c90-a499-a17ff48f5e84",
          "name": "Send Chat Message",
          "request": {
            "url": {
              "path": [
                "chat",
                "message"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61812c6b-d721-44f8-80c7-aa95aab0189c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Response contains message data', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "19fe9271-40d0-4f0d-87a2-adb631593ac9"
              }
            }
          ]
        },
        "parent": {
          "id": "480d7a64-acb5-4347-911c-7214d636a40b",
          "name": "Chat & AI",
          "item": [
            {
              "id": "092b8c36-4cf2-45ff-aa38-cee535da5519",
              "name": "Get Chat History",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45f11629-0608-43bf-9c13-18bedb4476c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat history retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains chat data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.conversations && Array.isArray(data.conversations));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c4a32c0c-1040-44fe-8612-173cffcca4fe"
                  }
                }
              ]
            },
            {
              "id": "b495733c-4d8b-4fbf-9aec-9b68043d0d0a",
              "name": "Create New Chat",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"Hello! This is a test message from the API test suite.\",\n    \"type\": \"chat\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59c6ce02-ed1d-4d97-99e4-7c82f8d4238e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chat creation processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Chat created successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('conversation_id');",
                      "    });",
                      "",
                      "    // Store conversation ID for further tests",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.id) {",
                      "        pm.environment.set('conversation_id', jsonData.id);",
                      "    } else if (jsonData.conversation_id) {",
                      "        pm.environment.set('conversation_id', jsonData.conversation_id);",
                      "    }",
                      "}"
                    ],
                    "_lastExecutionId": "27c6bdf7-60f0-4fd8-9795-28cf2064783a"
                  }
                }
              ]
            },
            {
              "id": "90adf202-cc2b-4c90-a499-a17ff48f5e84",
              "name": "Send Chat Message",
              "request": {
                "url": {
                  "path": [
                    "chat",
                    "message"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conversation_id\": \"{{conversation_id}}\",\n    \"message\": \"Can you help me test this API endpoint?\",\n    \"type\": \"user_message\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61812c6b-d721-44f8-80c7-aa95aab0189c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Response contains message data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('message').or.have.property('response');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "19fe9271-40d0-4f0d-87a2-adb631593ac9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6257088c-14f4-4ec8-9fbb-26003e761d21",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "75b9c19b-bf37-4585-a931-68133fd15583",
          "scriptId": "61812c6b-d721-44f8-80c7-aa95aab0189c",
          "execution": "19fe9271-40d0-4f0d-87a2-adb631593ac9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Document upload processed",
          "message": "expected 405 to be one of [ 200, 201, 400, 401, 413 ]",
          "stack": "AssertionError: expected 405 to be one of [ 200, 201, 400, 401, 413 ]\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "f5ce20a503f989c916cb76904f7198ce",
          "id": "1d91ad2f-6bdc-4bb6-8e5f-b8270115a221",
          "timestamp": 1757840600839,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cf525358-2db3-44d6-b282-39e3b9598032",
          "name": "Upload Document",
          "request": {
            "url": {
              "path": [
                "documents",
                "upload"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "This is a test document content for API testing.",
                  "type": "text"
                },
                {
                  "key": "filename",
                  "value": "api-test-document.txt",
                  "type": "text"
                },
                {
                  "key": "document_type",
                  "value": "text",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c085a017-4c89-47e5-a71c-2aeafc233a52",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Document upload processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Document uploaded successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "96596d83-a33a-44da-a6be-11fa5e76f2d9"
              }
            }
          ]
        },
        "parent": {
          "id": "3ce4b57e-db19-45fb-9010-92d43cad2a2f",
          "name": "Documents",
          "item": [
            {
              "id": "744c0396-717b-4185-8adc-dfbc99a8d3d6",
              "name": "Get Documents List",
              "request": {
                "url": {
                  "path": [
                    "documents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c638efaa-ea29-4f92-941c-fa82095c18e9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Documents list retrieved', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test('Response contains documents data', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.satisfy(function(data) {",
                      "            return Array.isArray(data) || (data.documents && Array.isArray(data.documents));",
                      "        });",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "4eda9b20-a1f8-46c4-a958-b433047887ba"
                  }
                }
              ]
            },
            {
              "id": "cf525358-2db3-44d6-b282-39e3b9598032",
              "name": "Upload Document",
              "request": {
                "url": {
                  "path": [
                    "documents",
                    "upload"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "value": "This is a test document content for API testing.",
                      "type": "text"
                    },
                    {
                      "key": "filename",
                      "value": "api-test-document.txt",
                      "type": "text"
                    },
                    {
                      "key": "document_type",
                      "value": "text",
                      "type": "text"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c085a017-4c89-47e5-a71c-2aeafc233a52",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Document upload processed', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 413]);",
                      "});",
                      "",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Document uploaded successfully', function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('id').or.have.property('document_id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "96596d83-a33a-44da-a6be-11fa5e76f2d9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d649b105-b0b0-424b-b028-3bd3326e21df",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9143a568-0ab3-4e7c-860d-22d40304101d",
          "scriptId": "c085a017-4c89-47e5-a71c-2aeafc233a52",
          "execution": "96596d83-a33a-44da-a6be-11fa5e76f2d9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error response has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "54a0c4f590dae0b8df599e0cebf0f9c8",
          "id": "79dd7baa-c562-4620-a336-8ede07c7a707",
          "timestamp": 1757840600860,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
          "name": "Invalid Endpoint - 404",
          "request": {
            "url": {
              "path": [
                "invalid-endpoint-test"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid endpoint returns 404', function () {",
                  "    pm.expect(pm.response.code).to.equal(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
              }
            }
          ]
        },
        "parent": {
          "id": "f4683a9f-fabb-4e15-bb7b-94151912304a",
          "name": "Error Handling",
          "item": [
            {
              "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
                  }
                }
              ]
            },
            {
              "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
                  }
                }
              ]
            },
            {
              "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "164ca2b7-105b-4bc7-be8c-2fa590673658",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7e38f5f1-d4dd-43f5-9e12-5534e36b49fa",
          "scriptId": "69b813f5-9a0a-43f2-9898-1844475f4523",
          "execution": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized request returns 401",
          "message": "expected 404 to equal 401",
          "stack": "AssertionError: expected 404 to equal 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "7b3c0af0cf494ab26b3c2934c416969a",
          "id": "96c782f5-ac60-495c-a294-29f98ad37999",
          "timestamp": 1757840600884,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
              }
            }
          ]
        },
        "parent": {
          "id": "f4683a9f-fabb-4e15-bb7b-94151912304a",
          "name": "Error Handling",
          "item": [
            {
              "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
                  }
                }
              ]
            },
            {
              "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
                  }
                }
              ]
            },
            {
              "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ff5c098b-c630-4f65-bf40-50ae48342899",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "34fff6d8-da5f-4c72-8d20-ec5a35b7bfac",
          "scriptId": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
          "execution": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Unauthorized error has proper structure",
          "message": "expected { detail: 'Not Found' } to have property 'error'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'error'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "8e5c678810671225d82b6dc1d5130be4",
          "id": "b521a545-1d56-46b9-8157-92f27fdbfad3",
          "timestamp": 1757840600885,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
          "name": "Unauthorized Request - 401",
          "request": {
            "url": {
              "path": [
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
              }
            }
          ]
        },
        "parent": {
          "id": "f4683a9f-fabb-4e15-bb7b-94151912304a",
          "name": "Error Handling",
          "item": [
            {
              "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
                  }
                }
              ]
            },
            {
              "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
                  }
                }
              ]
            },
            {
              "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ff5c098b-c630-4f65-bf40-50ae48342899",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "34fff6d8-da5f-4c72-8d20-ec5a35b7bfac",
          "scriptId": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
          "execution": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Malformed JSON returns 400",
          "message": "expected 422 to equal 400",
          "stack": "AssertionError: expected 422 to equal 400\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "60fc70cc308f1a67aaab5fc2a530a5fc",
          "id": "a895361f-b5a0-49f2-867c-ba7384088a57",
          "timestamp": 1757840600905,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
              }
            }
          ]
        },
        "parent": {
          "id": "f4683a9f-fabb-4e15-bb7b-94151912304a",
          "name": "Error Handling",
          "item": [
            {
              "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
                  }
                }
              ]
            },
            {
              "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
                  }
                }
              ]
            },
            {
              "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0858cf1a-b879-495c-b9a1-db1c474996da",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9cb2e7f3-2957-420e-b9f3-5e9d2bb1b127",
          "scriptId": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
          "execution": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bad request error has proper structure",
          "message": "expected { detail: [ { …(5) } ] } to have property 'error'",
          "stack": "AssertionError: expected { detail: [ { …(5) } ] } to have property 'error'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "225cf0641b0ae786b96f702bad5546b5",
          "id": "76ce44ce-ceb2-46da-aada-fcfc5638f6bd",
          "timestamp": 1757840600906,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
          "name": "Malformed JSON - 400",
          "request": {
            "url": {
              "path": [
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{ \"invalid\": json syntax }"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Malformed JSON returns 400', function () {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "});",
                  "",
                  "pm.test('Bad request error has proper structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
              }
            }
          ]
        },
        "parent": {
          "id": "f4683a9f-fabb-4e15-bb7b-94151912304a",
          "name": "Error Handling",
          "item": [
            {
              "id": "48f9c591-d920-462a-8b37-789d2ecd952e",
              "name": "Invalid Endpoint - 404",
              "request": {
                "url": {
                  "path": [
                    "invalid-endpoint-test"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b813f5-9a0a-43f2-9898-1844475f4523",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid endpoint returns 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2004bc3d-a7c4-4221-8f7c-4d4e6e615884"
                  }
                }
              ]
            },
            {
              "id": "d4a3dd92-1791-4681-b76a-54776db7a6df",
              "name": "Unauthorized Request - 401",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0c4227e5-d861-4a9d-a6b7-a4521a209bb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized request returns 401', function () {",
                      "    pm.expect(pm.response.code).to.equal(401);",
                      "});",
                      "",
                      "pm.test('Unauthorized error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "64c8ce7f-ae10-4539-bafb-7f599d9f92d8"
                  }
                }
              ]
            },
            {
              "id": "faf44830-f75c-4c76-9073-56f4ce4d83e4",
              "name": "Malformed JSON - 400",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{ \"invalid\": json syntax }"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Malformed JSON returns 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});",
                      "",
                      "pm.test('Bad request error has proper structure', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('error').or.have.property('message').or.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0858cf1a-b879-495c-b9a1-db1c474996da",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9cb2e7f3-2957-420e-b9f3-5e9d2bb1b127",
          "scriptId": "44b1457e-1398-487e-9fdb-d5c1b7d3ea3f",
          "execution": "f8e48d70-a35c-4778-b9f3-45ae3eb588cb"
        }
      }
    ],
    "error": null
  }
}