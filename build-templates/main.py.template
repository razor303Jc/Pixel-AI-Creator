"""
FastAPI main application for {{CHATBOT_NAME}}
Generated by Pixel AI Creator
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn
import logging
import os
from datetime import datetime
import openai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Basic Configuration
CHATBOT_NAME = "{{CHATBOT_NAME}}"
CHATBOT_DESCRIPTION = "{{CHATBOT_DESCRIPTION}}"
PROJECT_ID = {{PROJECT_ID}}

# Server Configuration  
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", 8000))
DEBUG = os.getenv("DEBUG", "false").lower() == "true"

# AI Configuration
PERSONALITY_CONFIG = {
    "tone": "{{PERSONALITY_TONE}}",
    "style": "{{PERSONALITY_STYLE}}",
    "system_prompt": """{{SYSTEM_PROMPT}}""",
    "temperature": {{TEMPERATURE}},
    "max_tokens": {{MAX_TOKENS}}
}

# API Keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

# Client Configuration
CLIENT_CONFIG = {
    "client_id": {{CLIENT_ID}},
    "client_name": "{{CLIENT_NAME}}",
    "client_company": "{{CLIENT_COMPANY}}"
}

# Feature Flags
FEATURES = {
    "chat_history": True,
    "file_upload": {{ENABLE_FILE_UPLOAD}},
    "voice_chat": {{ENABLE_VOICE_CHAT}},
    "custom_prompts": {{ENABLE_CUSTOM_PROMPTS}}
}

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(
    title=f"{CHATBOT_NAME} API",
    description=CHATBOT_DESCRIPTION,
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# In-memory conversation storage
conversations: Dict[str, List[Dict[str, str]]] = {}

# Pydantic models
class ChatMessage(BaseModel):
    message: str
    user_id: Optional[str] = None
    session_id: Optional[str] = "default"

class ChatResponse(BaseModel):
    response: str
    timestamp: datetime
    chatbot_name: str
    session_id: str

class HealthResponse(BaseModel):
    status: str
    chatbot_name: str
    version: str
    features: dict

# Health check endpoint
@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        chatbot_name=CHATBOT_NAME,
        version="1.0.0",
        features=FEATURES
    )

# Chat endpoint
@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(message: ChatMessage):
    """Main chat endpoint"""
    try:
        # Initialize conversation if not exists
        if message.session_id not in conversations:
            conversations[message.session_id] = []
        
        # Add user message to conversation
        conversations[message.session_id].append({
            "role": "user",
            "content": message.message
        })
        
        # Prepare messages for AI
        messages = [{"role": "system", "content": PERSONALITY_CONFIG["system_prompt"]}]
        messages.extend(conversations[message.session_id])
        
        response_text = ""
        
        # Use OpenAI if API key is available
        if OPENAI_API_KEY:
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    max_tokens=PERSONALITY_CONFIG["max_tokens"],
                    temperature=PERSONALITY_CONFIG["temperature"]
                )
                response_text = response.choices[0].message.content
            except Exception as e:
                logger.error(f"OpenAI API error: {str(e)}")
                response_text = f"[{CHATBOT_NAME}]: I'm experiencing technical difficulties. Please try again later."
        else:
            # Fallback response
            response_text = f"[{CHATBOT_NAME}]: {message.message} (Echo mode - no AI configured)"
        
        # Add assistant response to conversation
        conversations[message.session_id].append({
            "role": "assistant",
            "content": response_text
        })
        
        return ChatResponse(
            response=response_text,
            timestamp=datetime.now(),
            chatbot_name=CHATBOT_NAME,
            session_id=message.session_id
        )
    except Exception as e:
        logger.error(f"Chat error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Chat processing failed: {str(e)}"
        )

# Client info endpoint
@app.get("/client-info")
async def get_client_info():
    """Get client configuration"""
    return CLIENT_CONFIG

# Chat history endpoint (if enabled)
if FEATURES["chat_history"]:
    @app.get("/history/{session_id}")
    async def get_chat_history(session_id: str):
        """Get chat history for session"""
        if session_id not in conversations:
            return {"session_id": session_id, "messages": []}
        return {"session_id": session_id, "messages": conversations[session_id]}

# Root endpoint - serve chat interface
@app.get("/", response_class=HTMLResponse)
async def chat_interface():
    """Serve the chat interface"""
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>{CHATBOT_NAME} - AI Assistant</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }}
            .chat-container {{
                background-color: white;
                border-radius: 10px;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }}
            .chat-header {{
                text-align: center;
                border-bottom: 1px solid #eee;
                padding-bottom: 15px;
                margin-bottom: 20px;
            }}
            .chat-messages {{
                height: 400px;
                overflow-y: auto;
                border: 1px solid #ddd;
                padding: 15px;
                margin-bottom: 20px;
                background-color: #fafafa;
            }}
            .chat-input {{
                display: flex;
                gap: 10px;
            }}
            .chat-input input {{
                flex: 1;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
            }}
            .chat-input button {{
                padding: 10px 20px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }}
            .message {{
                margin: 10px 0;
                padding: 8px;
                border-radius: 5px;
            }}
            .user-message {{
                background-color: #e3f2fd;
                text-align: right;
            }}
            .bot-message {{
                background-color: #f1f8e9;
            }}
        </style>
    </head>
    <body>
        <div class="chat-container">
            <div class="chat-header">
                <h1>{CHATBOT_NAME}</h1>
                <p>{CHATBOT_DESCRIPTION}</p>
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="message bot-message">
                    Hello! I'm {CHATBOT_NAME}. How can I help you today?
                </div>
            </div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message here..." onkeypress="handleKeyPress(event)">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>

        <script>
            async function sendMessage() {{
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                if (!message) return;

                const chatMessages = document.getElementById('chatMessages');
                
                // Add user message
                const userDiv = document.createElement('div');
                userDiv.className = 'message user-message';
                userDiv.textContent = message;
                chatMessages.appendChild(userDiv);

                // Clear input
                input.value = '';

                try {{
                    // Send to API
                    const response = await fetch('/chat', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify({{
                            message: message,
                            session_id: 'web_' + Date.now()
                        }})
                    }});

                    const data = await response.json();
                    
                    // Add bot response
                    const botDiv = document.createElement('div');
                    botDiv.className = 'message bot-message';
                    botDiv.textContent = data.response;
                    chatMessages.appendChild(botDiv);
                }} catch (error) {{
                    console.error('Error:', error);
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'message bot-message';
                    errorDiv.textContent = 'Sorry, I encountered an error. Please try again.';
                    chatMessages.appendChild(errorDiv);
                }}

                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }}

            function handleKeyPress(event) {{
                if (event.key === 'Enter') {{
                    sendMessage();
                }}
            }}
        </script>
    </body>
    </html>
    """
    return html_content

if __name__ == "__main__":
    logger.info(f"Starting {CHATBOT_NAME} on {HOST}:{PORT}")
    uvicorn.run(app, host=HOST, port=PORT, log_level="info")