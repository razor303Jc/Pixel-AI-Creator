#!/bin/bash

# AI Assistant Deployment Script
# Generated for: {{assistant_name}}
# Template: {{template}}
# Client: {{client_name}}

set -e

# Configuration
ASSISTANT_NAME="{{assistant_name}}"
IMAGE_NAME="{{image_name}}"
IMAGE_TAG="{{image_tag}}"
PORT="{{port}}"
CONTAINER_NAME="${ASSISTANT_NAME}-assistant"

echo "🚀 Deploying AI Assistant: $ASSISTANT_NAME"
echo "📦 Image: $IMAGE_NAME:$IMAGE_TAG"
echo "🔌 Port: $PORT"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "❌ Docker is not running. Please start Docker and try again."
    exit 1
fi

# Stop existing container if running
if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
    echo "🛑 Stopping existing container: $CONTAINER_NAME"
    docker stop "$CONTAINER_NAME"
    docker rm "$CONTAINER_NAME"
fi

# Pull latest image
echo "📥 Pulling latest image..."
docker pull "$IMAGE_NAME:$IMAGE_TAG"

# Create data and logs directories
mkdir -p ./data ./logs
chmod 755 ./data ./logs

# Run the container
echo "🏃 Starting AI Assistant container..."
docker run -d \
  --name "$CONTAINER_NAME" \
  --restart unless-stopped \
  -p "$PORT:8000" \
  -e ASSISTANT_NAME="$ASSISTANT_NAME" \
  -e ASSISTANT_PERSONALITY="{{personality}}" \
  -e ASSISTANT_TEMPLATE="{{template}}" \
  -e CLIENT_ID="{{client_id}}" \
  -e DEBUG="{{debug_mode}}" \
  -v "$(pwd)/data:/app/data" \
  -v "$(pwd)/logs:/app/logs" \
  "$IMAGE_NAME:$IMAGE_TAG"

# Wait for container to be healthy
echo "⏳ Waiting for assistant to be ready..."
sleep 5

# Check if container is running
if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
    echo "✅ AI Assistant deployed successfully!"
    echo "🌐 Access URL: http://localhost:$PORT"
    echo "📊 Health check: http://localhost:$PORT/health"
    echo "📋 View logs: docker logs $CONTAINER_NAME"
    echo "🛑 Stop assistant: docker stop $CONTAINER_NAME"
else
    echo "❌ Failed to deploy AI Assistant"
    echo "📋 Check logs: docker logs $CONTAINER_NAME"
    exit 1
fi