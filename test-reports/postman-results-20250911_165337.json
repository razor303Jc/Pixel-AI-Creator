{
  "collection": {
    "item": [
      {
        "id": "9487cfe0-448f-49c6-b3d5-3f6e4350b523",
        "name": "üè• System Health & Infrastructure",
        "description": {
          "content": "Test system health, CORS, and basic connectivity",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "cb3d86b0-d8d6-45ef-a71d-05879f92f8b3",
            "name": "API Health Check",
            "request": {
              "description": {
                "content": "Verify API is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c9572433-bc49-4a45-b881-5c307adb73cf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has correct headers', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                  ],
                  "_lastExecutionId": "69283ea7-cef4-41d6-8658-885fbfd4db79"
                }
              }
            ]
          },
          {
            "id": "4aa87f51-cd15-4990-92ce-cff796bfff7c",
            "name": "API Documentation/OpenAPI",
            "request": {
              "url": {
                "path": [
                  "docs"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22bc5912-0c67-44b7-99fe-318d725d0039",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API documentation is accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "d4b17b4c-0970-480b-933a-357306954bda"
                }
              }
            ]
          },
          {
            "id": "70aa76ba-38b8-459f-946c-854dfb826cca",
            "name": "CORS Preflight Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Origin",
                  "value": "{{frontend_url}}"
                },
                {
                  "key": "Access-Control-Request-Method",
                  "value": "POST"
                },
                {
                  "key": "Access-Control-Request-Headers",
                  "value": "Content-Type,Authorization"
                }
              ],
              "method": "OPTIONS"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "516df59e-e5e9-4f36-89b3-3e1f2debcc2c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('CORS headers are present', function () {",
                    "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                    "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                    "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                    "});"
                  ],
                  "_lastExecutionId": "535c72ef-3aa3-412f-9a60-c9046953568d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Complete authentication flow testing",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
            "name": "User Registration",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful or user exists', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.test('Response contains user data', function () {",
                    "        pm.expect(response).to.have.property('user');",
                    "        pm.expect(response.user).to.have.property('email');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                }
              }
            ]
          },
          {
            "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
            "name": "User Login",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response contains tokens', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('access_token');",
                    "    pm.expect(response).to.have.property('refresh_token');",
                    "    pm.expect(response).to.have.property('user');",
                    "});",
                    "",
                    "// Store tokens for subsequent requests",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                    "    pm.collectionVariables.set('user_id', response.user.id);",
                    "}"
                  ],
                  "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                }
              }
            ]
          },
          {
            "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieval successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('email');",
                    "    pm.expect(response).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                }
              }
            ]
          },
          {
            "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
            "name": "Token Refresh",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "refresh"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52356638-9093-4da0-8e72-08db9439542f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Token refresh successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "}"
                  ],
                  "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                }
              }
            ]
          },
          {
            "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Logout successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
        "name": "üë• Client Management CRUD",
        "description": {
          "content": "Complete client management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
            "name": "Create Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('client_id', response.id);",
                    "    ",
                    "    pm.test('Client data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('email');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                }
              }
            ]
          },
          {
            "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
            "name": "Get All Clients",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get clients successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                }
              }
            ]
          },
          {
            "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
            "name": "Get Client by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get client by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Client data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                }
              }
            ]
          },
          {
            "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
            "name": "Update Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "});"
                  ],
                  "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                }
              }
            ]
          },
          {
            "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
            "name": "Delete Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client deletion successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
        "name": "ü§ñ Chatbot Management CRUD",
        "description": {
          "content": "Complete chatbot management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
            "name": "Create Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('chatbot_id', response.id);",
                    "    ",
                    "    pm.test('Chatbot data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('personality');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                }
              }
            ]
          },
          {
            "id": "4728b251-d972-42d8-b250-0d50408eb74e",
            "name": "Get All Chatbots",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbots successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                }
              }
            ]
          },
          {
            "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
            "name": "Get Chatbot by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbot by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Chatbot data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('personality');",
                    "});"
                  ],
                  "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                }
              }
            ]
          },
          {
            "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
            "name": "Update Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "    pm.expect(response.personality).to.eql('professional');",
                    "});"
                  ],
                  "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
        "name": "üí¨ Chat & Conversation Management",
        "description": {
          "content": "Test chat functionality and conversation management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "30b14eb8-1a11-4586-8975-392d75784987",
            "name": "Start Conversation",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('conversation_id', response.id);",
                    "    ",
                    "    pm.test('Conversation data is correct', function () {",
                    "        pm.expect(response).to.have.property('id');",
                    "        pm.expect(response).to.have.property('chatbot_id');",
                    "        pm.expect(response).to.have.property('messages');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                }
              }
            ]
          },
          {
            "id": "472d186d-1fdd-4345-abd5-bb456d080357",
            "name": "Send Message",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}",
                  "messages"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Bot response received', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('bot_response');",
                    "    pm.expect(response.bot_response).to.be.a('string');",
                    "});"
                  ],
                  "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                }
              }
            ]
          },
          {
            "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
            "name": "Get Conversation History",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation history retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Messages are present', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('messages');",
                    "    pm.expect(response.messages).to.be.an('array');",
                    "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                }
              }
            ]
          },
          {
            "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
            "name": "Get All Conversations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get conversations successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "84a1c352-e203-4615-90b9-f72a73af6d0c",
        "name": "üìä Analytics & Reporting",
        "description": {
          "content": "Test analytics and reporting endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
            "name": "Get Dashboard Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Analytics data retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics contains key metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('total_conversations');",
                    "    pm.expect(response).to.have.property('active_chatbots');",
                    "    pm.expect(response).to.have.property('total_clients');",
                    "});"
                  ],
                  "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
                }
              }
            ]
          },
          {
            "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
            "name": "Get Conversation Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "period",
                    "value": "7d"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation analytics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics data is structured', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
                }
              }
            ]
          },
          {
            "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
            "name": "Get Performance Metrics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "performance"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Performance metrics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Performance data contains metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('response_time');",
                    "    pm.expect(response).to.have.property('success_rate');",
                    "});"
                  ],
                  "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "56888e60-1c9f-41c5-8d14-c0ba6d5926bd",
        "name": "üîÑ Error Handling & Edge Cases",
        "description": {
          "content": "Test error scenarios and edge cases",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "352a2b2f-69b9-4269-a054-835a41355945",
            "name": "Unauthorized Access Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized access blocked', function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test('Error message is informative', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
                }
              }
            ]
          },
          {
            "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
            "name": "Invalid Token Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer invalid-token-12345"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "64517d2f-4515-4840-9643-56ff86203878",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid token rejected', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
                }
              }
            ]
          },
          {
            "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
            "name": "Non-existent Resource Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "99999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Non-existent resource returns 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message is clear', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
                }
              }
            ]
          },
          {
            "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
            "name": "Invalid Data Format Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f283c4c6-adda-455a-9d16-ef3de33acb94",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid data rejected', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                    "});",
                    "",
                    "pm.test('Validation errors provided', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "e698c0b4-1023-4d14-9593-90e95eef473a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e3ce8ef0-f90a-4f2d-aea4-796b177fa659",
        "name": "‚ö° Performance & Load Tests",
        "description": {
          "content": "Test API performance and load handling",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "2058a175-3428-4896-be13-e063ecebf5df",
            "name": "Response Time Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e48c260a-78d0-48d9-82fe-9a29ba073b6c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "",
                    "pm.test('API responds successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "5bf78203-8e79-4eda-b026-f6f294843cc2"
                }
              }
            ]
          },
          {
            "id": "d671c197-ecd6-4a65-9437-476891db8095",
            "name": "Concurrent Request Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7bb64f3b-f329-470f-9e28-c377a5e26012",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles concurrent requests', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response structure is consistent', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "bae939a7-1303-410e-827e-f7ad1953b346"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "09fde441-885b-41b0-8993-9d391d83b9c4",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "// Add any global setup here",
            "console.log('Running test:', pm.info.requestName);"
          ],
          "_lastExecutionId": "a5dacf42-3fab-4c04-9652-86d9387f4773"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "3c021a15-e92a-4606-a1bc-81e764ced2cf",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Status code is not 5xx', function () {",
            "    pm.expect(pm.response.code).to.be.below(500);",
            "});",
            "",
            "pm.test('Response time is reasonable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});"
          ],
          "_lastExecutionId": "add02df8-0ee9-469b-9da5-f93b77d869df"
        }
      }
    ],
    "variable": [
      {
        "description": {
          "content": "API base URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8002",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Frontend URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:3002",
        "key": "frontend_url"
      },
      {
        "description": {
          "content": "JWT access token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "description": {
          "content": "JWT refresh token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "user_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "client_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "chatbot_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "conversation_id"
      },
      {
        "type": "string",
        "value": "testuser@pixel.ai",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "TestPass123!",
        "key": "test_password"
      }
    ],
    "info": {
      "_postman_id": "e87b5c56-7789-4a75-8225-b5034b28d44c",
      "name": "Pixel-AI-Creator Complete API Test Suite",
      "version": {
        "raw": "3.0.0",
        "major": 3,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "3.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing covering all endpoints, authentication, CRUD operations, error handling, and integration scenarios",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "06daa701-5a38-431f-a6b3-8e867c242fc6",
    "values": []
  },
  "globals": {
    "id": "0a75aeaa-e268-414b-878e-6b2423f5e24e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 90,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 111,
        "pending": 0,
        "failed": 38
      },
      "testScripts": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.966666666666667,
      "responseMin": 2,
      "responseMax": 50,
      "responseSd": 11.603112609219224,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757606079072,
      "completed": 1757606095692
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 30,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "849cc15a-4058-4589-bd78-b5805328415c",
          "httpRequestId": "23b2db24-9070-4104-a865-13beb9c6cab6"
        },
        "item": {
          "id": "cb3d86b0-d8d6-45ef-a71d-05879f92f8b3",
          "name": "API Health Check",
          "request": {
            "description": {
              "content": "Verify API is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c9572433-bc49-4a45-b881-5c307adb73cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has correct headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "_lastExecutionId": "69283ea7-cef4-41d6-8658-885fbfd4db79"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify API is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "649bd77e-4b5e-4fd3-a813-8e480a7c12f9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "94fde141-b5f8-4d09-9f76-d4a3738ffaa2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "49"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              112,
              105,
              120,
              101,
              108,
              45,
              97,
              105,
              45,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 33,
          "responseSize": 49
        },
        "id": "cb3d86b0-d8d6-45ef-a71d-05879f92f8b3",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API is healthy",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has correct headers",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e88bafb-c9bc-412e-9b88-39aebea81cd7",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d2dd79ab-1e46-4da2-930a-c6148659842c"
        },
        "item": {
          "id": "4aa87f51-cd15-4990-92ce-cff796bfff7c",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22bc5912-0c67-44b7-99fe-318d725d0039",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "d4b17b4c-0970-480b-933a-357306954bda"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50654977-ce23-4780-90ec-3069fdc2c7f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c5885531-0a0d-4c26-a4b1-d98ff483a824",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "4aa87f51-cd15-4990-92ce-cff796bfff7c",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API documentation is accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "API documentation is accessible",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5738f8e0-ca6d-4eb2-9783-2f08391fde55",
          "length": 30,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1ac763c6-237e-4bf0-9f7c-6bbf31388790"
        },
        "item": {
          "id": "70aa76ba-38b8-459f-946c-854dfb826cca",
          "name": "CORS Preflight Check",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "method": "OPTIONS"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "516df59e-e5e9-4f36-89b3-3e1f2debcc2c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                  "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                  "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                  "});"
                ],
                "_lastExecutionId": "535c72ef-3aa3-412f-9a60-c9046953568d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "Access-Control-Request-Method",
              "value": "POST"
            },
            {
              "key": "Access-Control-Request-Headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ff4376d7-1572-46b5-93a3-9d3b7dd0e01e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "OPTIONS"
        },
        "response": {
          "id": "138fdb02-f8cb-4c2a-b99d-6aa5aeb97bbe",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-methods",
              "value": "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
            },
            {
              "key": "access-control-max-age",
              "value": "600"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              79,
              75
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 2
        },
        "id": "70aa76ba-38b8-459f-946c-854dfb826cca",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "CORS headers are present",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c25f2357-2cd1-43bb-925a-03c0fb9ccfaa",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e2e9edce-918d-4500-9ef4-0e27822f49ff"
        },
        "item": {
          "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7971f2a3-a3c5-4ef2-a6a1-716853185b33",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "116",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "4e23545b-3026-40ed-b79e-fdcfe42b0e68",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "467"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 32,
          "responseSize": 467
        },
        "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Registration successful or user exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Registration successful or user exists",
              "message": "expected 422 to be one of [ 201, 400, 409 ]",
              "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d2401c84-8f6a-4a08-a6af-bcb4a1ae3fc9",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ed61d4fc-15b3-4f59-96fd-e511384b9d3f"
        },
        "item": {
          "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d6cd1731-6e67-4a7a-8f52-953723f1bf07",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\"\n}"
          }
        },
        "response": {
          "id": "c6245b70-675a-4082-9c82-a39b955d272a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "32"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 50,
          "responseSize": 32
        },
        "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response contains tokens",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains tokens",
              "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
              "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b6889216-7303-4bd1-abf1-a17133b5d829",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d77e8ce-3032-4ce1-a15e-5d7b1fe1d154"
        },
        "item": {
          "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "43708c92-b2d5-4524-90e3-c8f816d29c68",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "176c6d84-8a72-44a4-b5c7-c42c6212a941",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Profile retrieval successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieval successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ea5a8a61-8183-4476-bfd2-d7016bbf4f6a",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "75b82ed1-2309-462e-aa08-b564c98ebbfd"
        },
        "item": {
          "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52356638-9093-4da0-8e72-08db9439542f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "refresh"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6cda002a-4ccd-46a9-a342-84778ec0dc1b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"refresh_token\": \"\"\n}"
          }
        },
        "response": {
          "id": "7a373dad-de66-422b-b139-5bc135087d5e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Token refresh successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token refresh successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d7db77d2-8058-4804-a83a-f94676d1a225",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "37286aff-8281-425b-bc60-bc1e707c8ddf"
        },
        "item": {
          "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d257d9b5-d2ef-4c5c-9ca3-036664f7ed22",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "1cac552d-942d-4ab6-a00c-c57f9b78fc92",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Logout successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logout successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a8c0ae4b-83f6-4bd1-8915-5b3d85f640dd",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "73e6bdc1-8867-4546-98a5-774d435f09e2"
        },
        "item": {
          "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bbb5dd33-15e6-496b-bbf7-837e44c16fa7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "213",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
          }
        },
        "response": {
          "id": "ba13b2e9-9edb-4ad9-8a96-93bb8966a0dd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "435"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 34,
          "responseSize": 435
        },
        "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client creation successful",
              "message": "expected response to have status code 201 but got 200",
              "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "65ea6497-7543-4033-9827-bb345d6073ee",
          "length": 30,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a4c347ec-7d8e-4512-bf2c-c568834e92c4"
        },
        "item": {
          "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
          "name": "Get All Clients",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get clients successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "388e0635-7455-4e7f-bc75-20dd3f3e7167",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "80227389-d073-49d6-85e6-8b03290c6be1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 2748
        },
        "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get clients successful",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "158fd063-e658-452a-a5b4-7a311b0fb582",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6919966a-3d4e-459b-9cb1-c2d5ae4a0c24"
        },
        "item": {
          "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e43d537e-1bad-4834-b86e-ca6c7cb45b21",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8fe9bcd1-f0ec-4981-8de3-85c18e03a15e",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get client by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get client by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Client data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Client data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "daf772b9-6c0e-47b3-b7ad-359984249123",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5058ae16-e38a-4cc2-9c05-14bc5340b169"
        },
        "item": {
          "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07f28af9-56a3-4f32-87b8-9adc9d8befa2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "188",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
          }
        },
        "response": {
          "id": "225d4e07-a8ed-4e7e-95fb-07a2093e383c",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 31
        },
        "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9d876308-4268-4e63-9eb9-2497b2684a41",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d04f6221-542e-4f9e-9340-82085983a679"
        },
        "item": {
          "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f629ebc2-1986-43c6-bb0c-3d4c71031ef1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "3cbb6cc7-9839-4d1c-ab57-06bc6ef186e6",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 31
        },
        "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client deletion successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client deletion successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c24af9b6-a984-4aa0-8c8c-c706a20b7726",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4fd1ee22-15ec-4bd0-aae4-4330c34be776"
        },
        "item": {
          "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8db0e790-7fd6-46be-bdbd-4c2b7a16a360",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "217",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "269cbf49-4a6a-4769-8de1-d9c8fe277535",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 30
        },
        "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bb8024d2-484d-4650-89b5-465a30fa224b",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "37c38d97-48a1-4ce9-b906-01a35620de07"
        },
        "item": {
          "id": "4728b251-d972-42d8-b250-0d50408eb74e",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2a995fd0-bd00-45f3-b63f-db29ab6372ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "69f1fb99-4a47-4838-a16e-103430b09c57",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "4728b251-d972-42d8-b250-0d50408eb74e",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbots successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbots successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "18252995-92dc-43ef-bac0-f2390749ae21",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2b76f9e0-9691-4f21-a461-5011b4a7108c"
        },
        "item": {
          "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48e6e43f-72b1-44fa-bfbe-db7fd9a9b907",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4e2c0e7d-3e38-454c-96b7-d1cac1271485",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbot by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbot by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Chatbot data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Chatbot data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "05235a5a-b087-4dc7-9817-a314c77bcc43",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "579dd741-18ad-4f0b-891a-29b27ef8e5d7"
        },
        "item": {
          "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3502d3d3-cae2-41dc-98b5-04dd3fae51e9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "230",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
          }
        },
        "response": {
          "id": "615a96aa-a033-4fa0-8476-3c520a26fc2a",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 31
        },
        "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3b36fbad-93e8-4356-8eee-a5b61e7baec7",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "263d2d66-748b-40f2-bb2e-5ddd5eafe315"
        },
        "item": {
          "id": "30b14eb8-1a11-4586-8975-392d75784987",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0d1a223b-ebec-48ba-a480-1a53577d64fa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chatbot_id\": \"\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "1cd68398-4324-486e-bb15-4d554e96157e",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 30
        },
        "id": "30b14eb8-1a11-4586-8975-392d75784987",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7f2ef096-22bd-4543-8693-19a7258af93f",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08809f36-5505-4eb8-9fd5-40aa62c7fb97"
        },
        "item": {
          "id": "472d186d-1fdd-4345-abd5-bb456d080357",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              "",
              "messages"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f4496848-a8f8-4074-833f-8fd3b66ea328",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "78",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "42b4b40b-1999-4181-8dbc-fe1e488b6858",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "472d186d-1fdd-4345-abd5-bb456d080357",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Bot response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bot response received",
              "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c9bd5e30-af88-477e-8b33-3e49573f627f",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "90520ec2-33a3-4f98-acee-2a4c7e16752e"
        },
        "item": {
          "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6266ba02-57d9-4bce-98f9-0a0db58b008f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dba69226-8095-4b58-ba03-6e0e67facd24",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:49 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 30
        },
        "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation history retrieved",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Messages are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Messages are present",
              "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "20f83d81-83eb-4a27-ac0b-8e0c2251d356",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35f9bc5d-aa45-467f-a784-7f33e7cd4b32"
        },
        "item": {
          "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7f3b052f-c065-4d1a-843d-8fd3a420167e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "45de9c50-14c1-4318-b470-7f751e8fcf69",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:49 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 30
        },
        "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get conversations successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get conversations successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca01fbfc-a68f-482f-a985-38aeeb2567bf",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7d0f7a03-4a5a-4075-a530-5ffc3ffb866e"
        },
        "item": {
          "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1dbfff90-c192-4360-ac34-3d24929e4ca5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2c806ea6-adca-4604-a8f5-411a72bdcdd1",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:50 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Analytics data retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Analytics data retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Analytics contains key metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Analytics contains key metrics",
              "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bf86b4e5-305c-4c5d-9354-9e7949c91d57",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6b0284a7-7a81-404b-ab94-8a66cb67d08c"
        },
        "item": {
          "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "period",
                "value": "7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0f4dbe48-c9d0-441b-a5e6-ad11ff5e87df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "902b8fd3-a486-4642-8e31-6fe67545d827",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:50 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation analytics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation analytics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Analytics data is structured",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca8d99e9-7da5-4b9a-967a-55a346779d59",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f9e5ffbf-27ab-4cad-aac6-18a0531c8ea3"
        },
        "item": {
          "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "performance"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3361e20a-55a6-44ce-b191-57015d4abfd4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "630afb3b-e13c-4b57-abf7-3048d3b1a790",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Performance metrics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Performance metrics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Performance data contains metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Performance data contains metrics",
              "message": "expected { detail: 'Not Found' } to have property 'response_time'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f100d4b2-eb89-49bb-801d-75bb0d583f91",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9df2c82d-67bd-4660-8081-ccaacdc6630d"
        },
        "item": {
          "id": "352a2b2f-69b9-4269-a054-835a41355945",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b4524309-b274-4a6f-841a-c3be8032813f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a4970e71-b74f-4638-9990-57e99dbb5e01",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 2748
        },
        "id": "352a2b2f-69b9-4269-a054-835a41355945",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Unauthorized access blocked",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized access blocked",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Error message is informative",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error message is informative",
              "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
              "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c5e52864-4d39-4f19-8c09-1c62dda270af",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "90ebe525-f59e-4ee6-b9f5-40ec7e8cf544"
        },
        "item": {
          "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "64517d2f-4515-4840-9643-56ff86203878",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid-token-12345"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb1c9031-653c-4abc-868b-81b277055756",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fe8844a3-f4e9-4f6f-9044-e314437d46e4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:52 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 2748
        },
        "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid token rejected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Invalid token rejected",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ce61320-b0d8-45ff-8429-6306118d6d47",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0ee4f09e-f22e-4781-a7bc-68dc1d77995c"
        },
        "item": {
          "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              "99999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1e8e7364-e431-49c7-8c99-d2628b826a9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d393bec6-31a4-413d-b2ac-82702223aa3d",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:52 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Non-existent resource returns 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Non-existent resource returns 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Error message is clear",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "348ff0c0-b7cc-4349-9389-79ab082c321e",
          "length": 30,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "552bb127-8ef0-4135-9a83-84ae8828f245"
        },
        "item": {
          "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
          "name": "Invalid Data Format Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f283c4c6-adda-455a-9d16-ef3de33acb94",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Validation errors provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "e698c0b4-1023-4d14-9593-90e95eef473a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b3d1de6c-2b22-4388-82ab-37e7454550e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
          }
        },
        "response": {
          "id": "8af1a50d-be99-4f9b-a9e6-663519782822",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:53 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 385
        },
        "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid data rejected",
            "skipped": false
          },
          {
            "assertion": "Validation errors provided",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e9e295eb-733f-49d9-8783-f845bb4bc5ad",
          "length": 30,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "625bf6d3-7a48-4175-8bf4-43764d242221"
        },
        "item": {
          "id": "2058a175-3428-4896-be13-e063ecebf5df",
          "name": "Response Time Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e48c260a-78d0-48d9-82fe-9a29ba073b6c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "5bf78203-8e79-4eda-b026-f6f294843cc2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3716a7e-be61-4f21-bc1b-35390cc3cd05",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6f71acb4-b969-4474-bac8-99968f6feae9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 2748
        },
        "id": "2058a175-3428-4896-be13-e063ecebf5df",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "API responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2e699363-5a4b-467f-b91d-0256e1b23afb",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "50272f24-3642-4067-9bd6-2f8b6ce8c5d2"
        },
        "item": {
          "id": "d671c197-ecd6-4a65-9437-476891db8095",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7bb64f3b-f329-470f-9e28-c377a5e26012",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "bae939a7-1303-410e-827e-f7ad1953b346"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25ad656e-1c52-4697-8e10-178dea4b4470",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6e5d1f06-c900-4958-a02e-2faa87c52e46",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:54:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "d671c197-ecd6-4a65-9437-476891db8095",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Handles concurrent requests",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles concurrent requests",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Response structure is consistent",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 12893
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "API documentation is accessible",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "80a0a7d99e1112daaa35c2b6420d67a9",
          "id": "d9326d59-c2c4-4ea3-b0b7-193ba20ff5b8",
          "timestamp": 1757606080218,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4aa87f51-cd15-4990-92ce-cff796bfff7c",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22bc5912-0c67-44b7-99fe-318d725d0039",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "d4b17b4c-0970-480b-933a-357306954bda"
              }
            }
          ]
        },
        "parent": {
          "id": "9487cfe0-448f-49c6-b3d5-3f6e4350b523",
          "name": "üè• System Health & Infrastructure",
          "description": {
            "content": "Test system health, CORS, and basic connectivity",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "cb3d86b0-d8d6-45ef-a71d-05879f92f8b3",
              "name": "API Health Check",
              "request": {
                "description": {
                  "content": "Verify API is running and healthy",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c9572433-bc49-4a45-b881-5c307adb73cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has correct headers', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "69283ea7-cef4-41d6-8658-885fbfd4db79"
                  }
                }
              ]
            },
            {
              "id": "4aa87f51-cd15-4990-92ce-cff796bfff7c",
              "name": "API Documentation/OpenAPI",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22bc5912-0c67-44b7-99fe-318d725d0039",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API documentation is accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d4b17b4c-0970-480b-933a-357306954bda"
                  }
                }
              ]
            },
            {
              "id": "70aa76ba-38b8-459f-946c-854dfb826cca",
              "name": "CORS Preflight Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "{{frontend_url}}"
                  },
                  {
                    "key": "Access-Control-Request-Method",
                    "value": "POST"
                  },
                  {
                    "key": "Access-Control-Request-Headers",
                    "value": "Content-Type,Authorization"
                  }
                ],
                "method": "OPTIONS"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "516df59e-e5e9-4f36-89b3-3e1f2debcc2c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('CORS headers are present', function () {",
                      "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                      "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                      "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                      "});"
                    ],
                    "_lastExecutionId": "535c72ef-3aa3-412f-9a60-c9046953568d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6e88bafb-c9bc-412e-9b88-39aebea81cd7",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d2dd79ab-1e46-4da2-930a-c6148659842c",
          "scriptId": "22bc5912-0c67-44b7-99fe-318d725d0039",
          "execution": "d4b17b4c-0970-480b-933a-357306954bda"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Registration successful or user exists",
          "message": "expected 422 to be one of [ 201, 400, 409 ]",
          "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "f69628823c5cd7f928373b07f566c976",
          "id": "973a78f0-049b-4026-964e-f0b66da6121f",
          "timestamp": 1757606081369,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c25f2357-2cd1-43bb-925a-03c0fb9ccfaa",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e2e9edce-918d-4500-9ef4-0e27822f49ff",
          "scriptId": "ab271d19-6c74-453f-8077-786f7db0f3ef",
          "execution": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "bf2ffec64b8236201754c4c1c7d1ea04",
          "id": "b7dd47e5-442e-4070-a6b5-4816679422d3",
          "timestamp": 1757606081968,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d2401c84-8f6a-4a08-a6af-bcb4a1ae3fc9",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ed61d4fc-15b3-4f59-96fd-e511384b9d3f",
          "scriptId": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
          "execution": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains tokens",
          "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
          "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "65c42e8b12b5e4e51c4e835482bcddd8",
          "id": "ed90060f-a545-46ec-8f18-24bbb5dfa220",
          "timestamp": 1757606081970,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d2401c84-8f6a-4a08-a6af-bcb4a1ae3fc9",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ed61d4fc-15b3-4f59-96fd-e511384b9d3f",
          "scriptId": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
          "execution": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieval successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a7ed004296ef62f65ad487070dba0be4",
          "id": "186c788b-ebd7-43ac-b639-f3212b993bde",
          "timestamp": 1757606082503,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b6889216-7303-4bd1-abf1-a17133b5d829",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d77e8ce-3032-4ce1-a15e-5d7b1fe1d154",
          "scriptId": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
          "execution": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "8a63d3f10bcfccf73ca45c545ed6394e",
          "id": "e8f46600-6cef-490e-b812-c43932185ec3",
          "timestamp": 1757606082505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b6889216-7303-4bd1-abf1-a17133b5d829",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d77e8ce-3032-4ce1-a15e-5d7b1fe1d154",
          "scriptId": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
          "execution": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token refresh successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8dc8087685865bb2c9b0c357b3d9b3ef",
          "id": "79050a7b-1958-4b04-af09-4d67914c7ade",
          "timestamp": 1757606083038,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52356638-9093-4da0-8e72-08db9439542f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ea5a8a61-8183-4476-bfd2-d7016bbf4f6a",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "75b82ed1-2309-462e-aa08-b564c98ebbfd",
          "scriptId": "52356638-9093-4da0-8e72-08db9439542f",
          "execution": "b1fee869-2c72-483d-bb5d-a001890c46bc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logout successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "d9b01805b4dc8168cb7e835a2a713806",
          "id": "b566b62e-4769-4029-895f-1b84dc433447",
          "timestamp": 1757606083571,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
              }
            }
          ]
        },
        "parent": {
          "id": "7da44ce3-c9f7-48d8-920e-acdfbe24b82d",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "39c404b4-47b6-4bf3-95bb-95fe468d5e0c",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab271d19-6c74-453f-8077-786f7db0f3ef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "db32c519-6ee8-4f4f-a20a-48bf6995b025"
                  }
                }
              ]
            },
            {
              "id": "4c5ec7eb-c7fe-4dcd-8763-7f7cf07f2e04",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f5f3477-c7d2-47e9-8faa-b13158b26b24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "c6d760f8-2b7c-41f3-9e81-af0fd399bc96"
                  }
                }
              ]
            },
            {
              "id": "7f32f280-51c8-4fbc-8dcf-732d945b6bd7",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a18cdd2-b3c1-4295-92be-e323e746dbee",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "a909cb82-10a5-4817-9b53-bc69e4f76e78"
                  }
                }
              ]
            },
            {
              "id": "2e0ff604-8b9f-414e-bc11-a6feff1cbbd3",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52356638-9093-4da0-8e72-08db9439542f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "b1fee869-2c72-483d-bb5d-a001890c46bc"
                  }
                }
              ]
            },
            {
              "id": "65a58dd9-b44a-4c07-a363-9a5d5782b623",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7db77d2-8058-4804-a83a-f94676d1a225",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "37286aff-8281-425b-bc60-bc1e707c8ddf",
          "scriptId": "c20ae4d7-996d-4cdf-877b-09ecbd842129",
          "execution": "73358a5a-a36f-491b-b9a5-4b0447b5ed7a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client creation successful",
          "message": "expected response to have status code 201 but got 200",
          "stack": "AssertionError: expected response to have status code 201 but got 200\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "24d8e90e247fc05c79d49f5ca57a2c5c",
          "id": "f8990a5f-4af2-477a-bb81-add6725ebab0",
          "timestamp": 1757606084133,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
              }
            }
          ]
        },
        "parent": {
          "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                  }
                }
              ]
            },
            {
              "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                  }
                }
              ]
            },
            {
              "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                  }
                }
              ]
            },
            {
              "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                  }
                }
              ]
            },
            {
              "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a8c0ae4b-83f6-4bd1-8915-5b3d85f640dd",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "73e6bdc1-8867-4546-98a5-774d435f09e2",
          "scriptId": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
          "execution": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get client by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "96f625988eadbbd724a2a69338077272",
          "id": "e4e923d1-853b-4db7-80be-cff5c0fa25b4",
          "timestamp": 1757606085258,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
              }
            }
          ]
        },
        "parent": {
          "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                  }
                }
              ]
            },
            {
              "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                  }
                }
              ]
            },
            {
              "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                  }
                }
              ]
            },
            {
              "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                  }
                }
              ]
            },
            {
              "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "158fd063-e658-452a-a5b4-7a311b0fb582",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6919966a-3d4e-459b-9cb1-c2d5ae4a0c24",
          "scriptId": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
          "execution": "d1e01f6a-5066-4c25-b217-e6074db42008"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Client data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "f506310853bb6b97ed72870e4d92f793",
          "id": "f5f3d73e-11e0-499b-bf4f-ac959dad3165",
          "timestamp": 1757606085259,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
              }
            }
          ]
        },
        "parent": {
          "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                  }
                }
              ]
            },
            {
              "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                  }
                }
              ]
            },
            {
              "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                  }
                }
              ]
            },
            {
              "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                  }
                }
              ]
            },
            {
              "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "158fd063-e658-452a-a5b4-7a311b0fb582",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6919966a-3d4e-459b-9cb1-c2d5ae4a0c24",
          "scriptId": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
          "execution": "d1e01f6a-5066-4c25-b217-e6074db42008"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1cf5a2b583858a1135548ac38355999d",
          "id": "5953d666-5785-4ea5-9ea4-3cd464ef5c0f",
          "timestamp": 1757606085798,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
              }
            }
          ]
        },
        "parent": {
          "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                  }
                }
              ]
            },
            {
              "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                  }
                }
              ]
            },
            {
              "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                  }
                }
              ]
            },
            {
              "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                  }
                }
              ]
            },
            {
              "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "daf772b9-6c0e-47b3-b7ad-359984249123",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5058ae16-e38a-4cc2-9c05-14bc5340b169",
          "scriptId": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
          "execution": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "10d4a63b077a79561acdda3edff711c3",
          "id": "e929ba30-a9ca-43a0-aa7a-07387ac185f2",
          "timestamp": 1757606085799,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
              }
            }
          ]
        },
        "parent": {
          "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                  }
                }
              ]
            },
            {
              "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                  }
                }
              ]
            },
            {
              "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                  }
                }
              ]
            },
            {
              "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                  }
                }
              ]
            },
            {
              "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "daf772b9-6c0e-47b3-b7ad-359984249123",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5058ae16-e38a-4cc2-9c05-14bc5340b169",
          "scriptId": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
          "execution": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client deletion successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "4493450e4c6607e1cae559563339502e",
          "id": "73611ef7-c400-4e53-ad47-5276a30316b4",
          "timestamp": 1757606086352,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
              }
            }
          ]
        },
        "parent": {
          "id": "00d4662c-b1cd-474d-a380-1ff3b0a636bc",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c7fef606-83be-44a4-8d65-8388364dcb44",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8bac7fa-a231-4b55-b872-3284ec1f6047",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "9448cbb6-fc3b-4091-9656-1ae0f8e21ab2"
                  }
                }
              ]
            },
            {
              "id": "b2cb3809-dab0-485d-9957-7703e7d66a30",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3c1da08-a179-43c8-8631-1426147b3150",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "0244b059-1774-4fa0-90bc-dad667de70bf"
                  }
                }
              ]
            },
            {
              "id": "2052488f-2303-4ee9-b05b-bb8885743dcf",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9912b1fc-22f6-4fd4-a879-7149e7abf1a6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "d1e01f6a-5066-4c25-b217-e6074db42008"
                  }
                }
              ]
            },
            {
              "id": "c9ab3a7e-dd2e-4a5d-a7e5-a12eace071b4",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ec57189-7625-44e0-a757-d9956d2ad5b3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "be7e5c2a-d1ac-4880-905e-9fbae808f07a"
                  }
                }
              ]
            },
            {
              "id": "f20e1b61-da32-4d5d-b531-358068745ac4",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "863657ab-6237-45dc-b44b-a18999a8ae6c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d876308-4268-4e63-9eb9-2497b2684a41",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d04f6221-542e-4f9e-9340-82085983a679",
          "scriptId": "ade618d1-eb73-44a7-b2fd-d2ee555114ab",
          "execution": "863657ab-6237-45dc-b44b-a18999a8ae6c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "eabef9a6ffb6400a330c2c368cf95d41",
          "id": "ba460d44-c47e-40de-9efb-956af5051d1a",
          "timestamp": 1757606086917,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c24af9b6-a984-4aa0-8c8c-c706a20b7726",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4fd1ee22-15ec-4bd0-aae4-4330c34be776",
          "scriptId": "2b332992-6566-4e36-8051-d3b8201378b6",
          "execution": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbots successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "d6f39246dba8fe46523ad2aa2e14f725",
          "id": "931a1ea8-7642-4a9f-a8a4-f88a069dee23",
          "timestamp": 1757606087449,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4728b251-d972-42d8-b250-0d50408eb74e",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bb8024d2-484d-4650-89b5-465a30fa224b",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "37c38d97-48a1-4ce9-b906-01a35620de07",
          "scriptId": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
          "execution": "319af396-71b7-4a65-b874-bef5b9267f21"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "1f5d4cced9d1d28e82c776848860bc18",
          "id": "9a56d4a2-a849-43b8-832e-77c969a53ed6",
          "timestamp": 1757606087450,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4728b251-d972-42d8-b250-0d50408eb74e",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bb8024d2-484d-4650-89b5-465a30fa224b",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "37c38d97-48a1-4ce9-b906-01a35620de07",
          "scriptId": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
          "execution": "319af396-71b7-4a65-b874-bef5b9267f21"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbot by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "71ab0a54b29a62c80d33eb289ce0189b",
          "id": "8d725478-20c5-4cde-a0f6-c85c83dca480",
          "timestamp": 1757606087990,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "18252995-92dc-43ef-bac0-f2390749ae21",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2b76f9e0-9691-4f21-a461-5011b4a7108c",
          "scriptId": "cca5ff37-9975-4419-83a9-ee936f06534d",
          "execution": "b269177c-5654-47f7-8d48-21b512035bc1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Chatbot data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "ad178618c7e67b96384574ed5a015906",
          "id": "26be3557-e968-45fd-adc4-c7b3a7b46394",
          "timestamp": 1757606087991,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "18252995-92dc-43ef-bac0-f2390749ae21",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2b76f9e0-9691-4f21-a461-5011b4a7108c",
          "scriptId": "cca5ff37-9975-4419-83a9-ee936f06534d",
          "execution": "b269177c-5654-47f7-8d48-21b512035bc1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "b36693e3b0a6c2665778679f7cf89418",
          "id": "77a17225-3b99-45c1-b7d0-c011f0200fc8",
          "timestamp": 1757606088541,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "05235a5a-b087-4dc7-9817-a314c77bcc43",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "579dd741-18ad-4f0b-891a-29b27ef8e5d7",
          "scriptId": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
          "execution": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "6605396d5dfa960f2df20e74ea117867",
          "id": "46b4b3af-c52d-4dde-b95a-5eb36f5408f8",
          "timestamp": 1757606088542,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
              }
            }
          ]
        },
        "parent": {
          "id": "d901493f-0ebc-4872-a2b6-3410a46de6a8",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "e571a103-4d65-4302-9fce-d81dd48ef3ab",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2b332992-6566-4e36-8051-d3b8201378b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e16da45e-c2b2-4b53-8f57-cfeb8b195cc3"
                  }
                }
              ]
            },
            {
              "id": "4728b251-d972-42d8-b250-0d50408eb74e",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7a24e4e4-d998-411a-94e7-49cf29ef8136",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "319af396-71b7-4a65-b874-bef5b9267f21"
                  }
                }
              ]
            },
            {
              "id": "6fc4d1cf-e1bb-4cd5-9a8c-b92503dec9da",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cca5ff37-9975-4419-83a9-ee936f06534d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "b269177c-5654-47f7-8d48-21b512035bc1"
                  }
                }
              ]
            },
            {
              "id": "ba9d072f-728c-4c04-ae39-ad3f40cd838e",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "05235a5a-b087-4dc7-9817-a314c77bcc43",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "579dd741-18ad-4f0b-891a-29b27ef8e5d7",
          "scriptId": "403dbc62-4ba1-42bb-9ab7-b7b1bc4cbfe3",
          "execution": "fa86eea7-a4d3-48b4-8072-d12f2836557c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "5c86b0639aec75245af52f9fa7cf3615",
          "id": "1e741da1-23dc-4784-8972-f3306a86a8fa",
          "timestamp": 1757606089096,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "30b14eb8-1a11-4586-8975-392d75784987",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b36fbad-93e8-4356-8eee-a5b61e7baec7",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "263d2d66-748b-40f2-bb2e-5ddd5eafe315",
          "scriptId": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
          "execution": "1f151464-3521-4420-8cd5-2e984dab7668"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "3d3e25839ea629fc1e5d30f35a0cc7b5",
          "id": "1d89b3d9-e388-495c-a41a-e20507a31b8b",
          "timestamp": 1757606089639,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "472d186d-1fdd-4345-abd5-bb456d080357",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7f2ef096-22bd-4543-8693-19a7258af93f",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08809f36-5505-4eb8-9fd5-40aa62c7fb97",
          "scriptId": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
          "execution": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bot response received",
          "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "e698891e922fd739547a86ca7fa54377",
          "id": "4a27f963-c7a4-4d9a-862c-1738230ccb52",
          "timestamp": 1757606089640,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "472d186d-1fdd-4345-abd5-bb456d080357",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7f2ef096-22bd-4543-8693-19a7258af93f",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08809f36-5505-4eb8-9fd5-40aa62c7fb97",
          "scriptId": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
          "execution": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation history retrieved",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "53418adcf942bd6254463943052fc95c",
          "id": "0ea1340f-75f9-4796-90ea-c6c691539639",
          "timestamp": 1757606090193,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c9bd5e30-af88-477e-8b33-3e49573f627f",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "90520ec2-33a3-4f98-acee-2a4c7e16752e",
          "scriptId": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
          "execution": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Messages are present",
          "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "c3e00d9df1b4d1d196deb3dbea108533",
          "id": "08303abc-a5ce-4a59-b79f-8654774cb813",
          "timestamp": 1757606090194,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c9bd5e30-af88-477e-8b33-3e49573f627f",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "90520ec2-33a3-4f98-acee-2a4c7e16752e",
          "scriptId": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
          "execution": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get conversations successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "b62167b2a91e528b41e4b2ab7728d895",
          "id": "a2b8149e-91f6-44b6-a59a-dcb4794627f6",
          "timestamp": 1757606090745,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "20f83d81-83eb-4a27-ac0b-8e0c2251d356",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35f9bc5d-aa45-467f-a784-7f33e7cd4b32",
          "scriptId": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
          "execution": "089e7210-aaf8-427f-9e91-2193809c5c17"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "6a179b72a3918374b60b4cd4ac2a7d6b",
          "id": "2da0cc80-c1aa-48ea-9d9a-23c7428ad5da",
          "timestamp": 1757606090746,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
              }
            }
          ]
        },
        "parent": {
          "id": "eb71efb5-72bd-49bf-88cb-ff0caeb0ab23",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "30b14eb8-1a11-4586-8975-392d75784987",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9a354b7-ad78-49d9-83fb-41a7ecd2b5a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1f151464-3521-4420-8cd5-2e984dab7668"
                  }
                }
              ]
            },
            {
              "id": "472d186d-1fdd-4345-abd5-bb456d080357",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e41e0258-1185-43c3-a0bb-e0bd852c05e8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "0b6f81ab-6242-4e20-849f-1219d9bd0df8"
                  }
                }
              ]
            },
            {
              "id": "ddc97284-2c4a-4d16-921f-d2bc44c580f3",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8edf0c2a-93ca-409a-be9b-732d74fd8ede",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "4cb78c54-02cd-4ee2-98b7-f01e5630463c"
                  }
                }
              ]
            },
            {
              "id": "bbeb46e8-a9b5-48b1-9176-d9fcf51e1a47",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "089e7210-aaf8-427f-9e91-2193809c5c17"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "20f83d81-83eb-4a27-ac0b-8e0c2251d356",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35f9bc5d-aa45-467f-a784-7f33e7cd4b32",
          "scriptId": "d4f185f8-14b3-4a74-b231-b76ab10c4341",
          "execution": "089e7210-aaf8-427f-9e91-2193809c5c17"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Analytics data retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "9c7f8a840cad5167639396ee07874522",
          "id": "119685ca-4ec3-438a-b9ce-082d56fa85a4",
          "timestamp": 1757606091289,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
              }
            }
          ]
        },
        "parent": {
          "id": "84a1c352-e203-4615-90b9-f72a73af6d0c",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
                  }
                }
              ]
            },
            {
              "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
                  }
                }
              ]
            },
            {
              "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca01fbfc-a68f-482f-a985-38aeeb2567bf",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7d0f7a03-4a5a-4075-a530-5ffc3ffb866e",
          "scriptId": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
          "execution": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Analytics contains key metrics",
          "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "4685efb4372b72b465200ff206a21599",
          "id": "b911104e-05b7-4c91-9300-2ca780f28f85",
          "timestamp": 1757606091291,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
              }
            }
          ]
        },
        "parent": {
          "id": "84a1c352-e203-4615-90b9-f72a73af6d0c",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
                  }
                }
              ]
            },
            {
              "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
                  }
                }
              ]
            },
            {
              "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca01fbfc-a68f-482f-a985-38aeeb2567bf",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7d0f7a03-4a5a-4075-a530-5ffc3ffb866e",
          "scriptId": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
          "execution": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation analytics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "222f308c69cdf27862b3303c9a92bf17",
          "id": "19ef6a24-d24f-4152-abba-8d2b54523000",
          "timestamp": 1757606091847,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
              }
            }
          ]
        },
        "parent": {
          "id": "84a1c352-e203-4615-90b9-f72a73af6d0c",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
                  }
                }
              ]
            },
            {
              "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
                  }
                }
              ]
            },
            {
              "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf86b4e5-305c-4c5d-9354-9e7949c91d57",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6b0284a7-7a81-404b-ab94-8a66cb67d08c",
          "scriptId": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
          "execution": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Performance metrics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "0031538784c482fe2b6ad7cc568f81f7",
          "id": "c00f3adc-125e-44ae-9493-4534091792f9",
          "timestamp": 1757606092380,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
              }
            }
          ]
        },
        "parent": {
          "id": "84a1c352-e203-4615-90b9-f72a73af6d0c",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
                  }
                }
              ]
            },
            {
              "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
                  }
                }
              ]
            },
            {
              "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca8d99e9-7da5-4b9a-967a-55a346779d59",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f9e5ffbf-27ab-4cad-aac6-18a0531c8ea3",
          "scriptId": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
          "execution": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Performance data contains metrics",
          "message": "expected { detail: 'Not Found' } to have property 'response_time'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "2a8c8dc17871f01da41a93b6622e9516",
          "id": "0b4d1056-1439-434b-98d4-7184e0205aff",
          "timestamp": 1757606092381,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
              }
            }
          ]
        },
        "parent": {
          "id": "84a1c352-e203-4615-90b9-f72a73af6d0c",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b25ea582-6bff-4e0b-8494-84223b1212fd",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e2bc9dd-f606-450d-8d48-831e16d641b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a6e3abc2-f6ff-4609-9000-41bb06c0bcd8"
                  }
                }
              ]
            },
            {
              "id": "b1c70e03-4fc0-48aa-aeeb-ace2cb0ec4b9",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc918ff-e806-44f6-80f3-e60ac04520e1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "89a36dbb-66e8-41f7-b68f-994e183e4f4a"
                  }
                }
              ]
            },
            {
              "id": "f90cf4d9-5b64-4b6e-ac9b-73a4a8544610",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ca8d99e9-7da5-4b9a-967a-55a346779d59",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f9e5ffbf-27ab-4cad-aac6-18a0531c8ea3",
          "scriptId": "e8893e9b-0b8a-4218-ac44-fea9b453c1fe",
          "execution": "76cd55cb-d5b8-4f9d-9786-9f3c4bef9058"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized access blocked",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "665a7d559fea89c6bb7a122c956f0676",
          "id": "0186c383-06a8-4e0b-acf0-adfae906b51a",
          "timestamp": 1757606092914,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "352a2b2f-69b9-4269-a054-835a41355945",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
              }
            }
          ]
        },
        "parent": {
          "id": "56888e60-1c9f-41c5-8d14-c0ba6d5926bd",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "352a2b2f-69b9-4269-a054-835a41355945",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
                  }
                }
              ]
            },
            {
              "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64517d2f-4515-4840-9643-56ff86203878",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
                  }
                }
              ]
            },
            {
              "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
                  }
                }
              ]
            },
            {
              "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f283c4c6-adda-455a-9d16-ef3de33acb94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "e698c0b4-1023-4d14-9593-90e95eef473a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f100d4b2-eb89-49bb-801d-75bb0d583f91",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9df2c82d-67bd-4660-8081-ccaacdc6630d",
          "scriptId": "23f87c25-4547-46e8-a9b6-5f29b9980182",
          "execution": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error message is informative",
          "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
          "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "adebd60b7cf76e607cf36e74f9bf028a",
          "id": "c7713124-24c6-428d-b047-4519a92a9b2d",
          "timestamp": 1757606092916,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "352a2b2f-69b9-4269-a054-835a41355945",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
              }
            }
          ]
        },
        "parent": {
          "id": "56888e60-1c9f-41c5-8d14-c0ba6d5926bd",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "352a2b2f-69b9-4269-a054-835a41355945",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
                  }
                }
              ]
            },
            {
              "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64517d2f-4515-4840-9643-56ff86203878",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
                  }
                }
              ]
            },
            {
              "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
                  }
                }
              ]
            },
            {
              "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f283c4c6-adda-455a-9d16-ef3de33acb94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "e698c0b4-1023-4d14-9593-90e95eef473a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f100d4b2-eb89-49bb-801d-75bb0d583f91",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9df2c82d-67bd-4660-8081-ccaacdc6630d",
          "scriptId": "23f87c25-4547-46e8-a9b6-5f29b9980182",
          "execution": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Invalid token rejected",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "bebfa55b9be79c18afafdf5e031b58cc",
          "id": "5248dd0c-f645-44dd-a848-48ffe4400940",
          "timestamp": 1757606093466,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "64517d2f-4515-4840-9643-56ff86203878",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
              }
            }
          ]
        },
        "parent": {
          "id": "56888e60-1c9f-41c5-8d14-c0ba6d5926bd",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "352a2b2f-69b9-4269-a054-835a41355945",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
                  }
                }
              ]
            },
            {
              "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64517d2f-4515-4840-9643-56ff86203878",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
                  }
                }
              ]
            },
            {
              "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
                  }
                }
              ]
            },
            {
              "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f283c4c6-adda-455a-9d16-ef3de33acb94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "e698c0b4-1023-4d14-9593-90e95eef473a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c5e52864-4d39-4f19-8c09-1c62dda270af",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "90ebe525-f59e-4ee6-b9f5-40ec7e8cf544",
          "scriptId": "64517d2f-4515-4840-9643-56ff86203878",
          "execution": "21ff432b-b033-49c6-847a-a713b0b90ff1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Non-existent resource returns 404",
          "message": "expected response to have status code 404 but got 403",
          "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "ee21ee64ae89c94503834a01fbd4094a",
          "id": "7a4ace3d-5a36-4df9-af2e-e06b78bf8a6e",
          "timestamp": 1757606093994,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
              }
            }
          ]
        },
        "parent": {
          "id": "56888e60-1c9f-41c5-8d14-c0ba6d5926bd",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "352a2b2f-69b9-4269-a054-835a41355945",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23f87c25-4547-46e8-a9b6-5f29b9980182",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "8b6b23e8-3be8-4097-a492-f4dd8c79cb7e"
                  }
                }
              ]
            },
            {
              "id": "7c44cd48-2eb0-482a-8205-23cf1fc3d543",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64517d2f-4515-4840-9643-56ff86203878",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "21ff432b-b033-49c6-847a-a713b0b90ff1"
                  }
                }
              ]
            },
            {
              "id": "c43c96c3-d86d-4439-9510-183682aa46d4",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cfd38900-7693-4d88-af70-33bea91d8958",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "3a1077f0-e25f-4113-bc13-09d351021149"
                  }
                }
              ]
            },
            {
              "id": "953c6221-5c0b-4576-a7ee-6a9dcfa528a8",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f283c4c6-adda-455a-9d16-ef3de33acb94",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "e698c0b4-1023-4d14-9593-90e95eef473a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5ce61320-b0d8-45ff-8429-6306118d6d47",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0ee4f09e-f22e-4781-a7bc-68dc1d77995c",
          "scriptId": "cfd38900-7693-4d88-af70-33bea91d8958",
          "execution": "3a1077f0-e25f-4113-bc13-09d351021149"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles concurrent requests",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "d63d7f17cfb8ac12a385b6a5d1cf589e",
          "id": "09719ff6-54b6-4447-9a88-2b11ba25ab4c",
          "timestamp": 1757606095685,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d671c197-ecd6-4a65-9437-476891db8095",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7bb64f3b-f329-470f-9e28-c377a5e26012",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "bae939a7-1303-410e-827e-f7ad1953b346"
              }
            }
          ]
        },
        "parent": {
          "id": "e3ce8ef0-f90a-4f2d-aea4-796b177fa659",
          "name": "‚ö° Performance & Load Tests",
          "description": {
            "content": "Test API performance and load handling",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "2058a175-3428-4896-be13-e063ecebf5df",
              "name": "Response Time Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e48c260a-78d0-48d9-82fe-9a29ba073b6c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('API responds successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5bf78203-8e79-4eda-b026-f6f294843cc2"
                  }
                }
              ]
            },
            {
              "id": "d671c197-ecd6-4a65-9437-476891db8095",
              "name": "Concurrent Request Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7bb64f3b-f329-470f-9e28-c377a5e26012",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response structure is consistent', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "bae939a7-1303-410e-827e-f7ad1953b346"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2e699363-5a4b-467f-b91d-0256e1b23afb",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "50272f24-3642-4067-9bd6-2f8b6ce8c5d2",
          "scriptId": "7bb64f3b-f329-470f-9e28-c377a5e26012",
          "execution": "bae939a7-1303-410e-827e-f7ad1953b346"
        }
      }
    ],
    "error": null
  }
}