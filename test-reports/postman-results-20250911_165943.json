{
  "collection": {
    "item": [
      {
        "id": "43f71460-55cb-4453-bab3-16a83dc62e71",
        "name": "üè• System Health & Infrastructure",
        "description": {
          "content": "Test system health, CORS, and basic connectivity",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "88a01602-8e8d-40f4-8af2-a2579432420c",
            "name": "API Health Check",
            "request": {
              "description": {
                "content": "Verify API is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8b60488a-43a6-4af7-a120-126a52627371",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has correct headers', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                  ],
                  "_lastExecutionId": "359bf443-1861-43df-b332-e7c71ecd268c"
                }
              }
            ]
          },
          {
            "id": "a08a8ee0-d395-4bac-b083-59f98c6ab98f",
            "name": "API Documentation/OpenAPI",
            "request": {
              "url": {
                "path": [
                  "docs"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a1872a8e-cbc5-4ccd-a0ca-e1f832a7aee3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API documentation is accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "adfc6901-565d-4f17-a4e5-5739772c71b0"
                }
              }
            ]
          },
          {
            "id": "4633facf-ffe6-4e7d-aa39-d72d632ba845",
            "name": "CORS Preflight Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Origin",
                  "value": "{{frontend_url}}"
                },
                {
                  "key": "Access-Control-Request-Method",
                  "value": "POST"
                },
                {
                  "key": "Access-Control-Request-Headers",
                  "value": "Content-Type,Authorization"
                }
              ],
              "method": "OPTIONS"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "df38d9a5-6883-422c-b72a-9d34dfdc1b12",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('CORS headers are present', function () {",
                    "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                    "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                    "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                    "});"
                  ],
                  "_lastExecutionId": "c7f54338-eb23-4ac9-8a4e-7ef5dff0abaf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Complete authentication flow testing",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
            "name": "User Registration",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful or user exists', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.test('Response contains user data', function () {",
                    "        pm.expect(response).to.have.property('user');",
                    "        pm.expect(response.user).to.have.property('email');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                }
              }
            ]
          },
          {
            "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
            "name": "User Login",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response contains tokens', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('access_token');",
                    "    pm.expect(response).to.have.property('refresh_token');",
                    "    pm.expect(response).to.have.property('user');",
                    "});",
                    "",
                    "// Store tokens for subsequent requests",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                    "    pm.collectionVariables.set('user_id', response.user.id);",
                    "}"
                  ],
                  "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                }
              }
            ]
          },
          {
            "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieval successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('email');",
                    "    pm.expect(response).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                }
              }
            ]
          },
          {
            "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
            "name": "Token Refresh",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "refresh"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Token refresh successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "}"
                  ],
                  "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                }
              }
            ]
          },
          {
            "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Logout successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
        "name": "üë• Client Management CRUD",
        "description": {
          "content": "Complete client management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
            "name": "Create Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('client_id', response.id);",
                    "    ",
                    "    pm.test('Client data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('email');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                }
              }
            ]
          },
          {
            "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
            "name": "Get All Clients",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get clients successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                }
              }
            ]
          },
          {
            "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
            "name": "Get Client by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get client by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Client data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                }
              }
            ]
          },
          {
            "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
            "name": "Update Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "});"
                  ],
                  "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                }
              }
            ]
          },
          {
            "id": "41eed132-7f67-4d05-8375-6ede1004f375",
            "name": "Delete Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "10929c73-4689-404e-b33a-afc2f990267c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client deletion successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6184287e-065b-477a-b1d7-5cf947070274",
        "name": "ü§ñ Chatbot Management CRUD",
        "description": {
          "content": "Complete chatbot management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
            "name": "Create Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('chatbot_id', response.id);",
                    "    ",
                    "    pm.test('Chatbot data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('personality');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                }
              }
            ]
          },
          {
            "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
            "name": "Get All Chatbots",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbots successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                }
              }
            ]
          },
          {
            "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
            "name": "Get Chatbot by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbot by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Chatbot data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('personality');",
                    "});"
                  ],
                  "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                }
              }
            ]
          },
          {
            "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
            "name": "Update Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "    pm.expect(response.personality).to.eql('professional');",
                    "});"
                  ],
                  "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
        "name": "üí¨ Chat & Conversation Management",
        "description": {
          "content": "Test chat functionality and conversation management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "eb053a08-1817-4501-b6d0-11adcd747930",
            "name": "Start Conversation",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('conversation_id', response.id);",
                    "    ",
                    "    pm.test('Conversation data is correct', function () {",
                    "        pm.expect(response).to.have.property('id');",
                    "        pm.expect(response).to.have.property('chatbot_id');",
                    "        pm.expect(response).to.have.property('messages');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                }
              }
            ]
          },
          {
            "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
            "name": "Send Message",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}",
                  "messages"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Bot response received', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('bot_response');",
                    "    pm.expect(response.bot_response).to.be.a('string');",
                    "});"
                  ],
                  "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                }
              }
            ]
          },
          {
            "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
            "name": "Get Conversation History",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation history retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Messages are present', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('messages');",
                    "    pm.expect(response.messages).to.be.an('array');",
                    "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                }
              }
            ]
          },
          {
            "id": "50cc490d-6406-4406-aee8-4f06523bccad",
            "name": "Get All Conversations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get conversations successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dcd0a8f0-5afe-4f05-95ef-5100d56cd09e",
        "name": "üìä Analytics & Reporting",
        "description": {
          "content": "Test analytics and reporting endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
            "name": "Get Dashboard Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Analytics data retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics contains key metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('total_conversations');",
                    "    pm.expect(response).to.have.property('active_chatbots');",
                    "    pm.expect(response).to.have.property('total_clients');",
                    "});"
                  ],
                  "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
                }
              }
            ]
          },
          {
            "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
            "name": "Get Conversation Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "period",
                    "value": "7d"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation analytics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics data is structured', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
                }
              }
            ]
          },
          {
            "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
            "name": "Get Performance Metrics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "performance"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Performance metrics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Performance data contains metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('response_time');",
                    "    pm.expect(response).to.have.property('success_rate');",
                    "});"
                  ],
                  "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2455c97-a419-47c8-ac57-760cbf211f55",
        "name": "üîÑ Error Handling & Edge Cases",
        "description": {
          "content": "Test error scenarios and edge cases",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "aff04921-79d7-4107-b970-97c5eef2361a",
            "name": "Unauthorized Access Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized access blocked', function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test('Error message is informative', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
                }
              }
            ]
          },
          {
            "id": "ef707965-3856-458d-a1e5-b840f61c992b",
            "name": "Invalid Token Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer invalid-token-12345"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid token rejected', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
                }
              }
            ]
          },
          {
            "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
            "name": "Non-existent Resource Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "99999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Non-existent resource returns 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message is clear', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
                }
              }
            ]
          },
          {
            "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
            "name": "Invalid Data Format Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2e3286b8-1f7b-4066-839c-16f00cf3c2f4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid data rejected', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                    "});",
                    "",
                    "pm.test('Validation errors provided', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "ddca6f41-9f9b-4482-81b2-aa96f7d23827"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9f651141-d5f7-4f20-b8a3-34c012a6363f",
        "name": "‚ö° Performance & Load Tests",
        "description": {
          "content": "Test API performance and load handling",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "394faad6-2f0f-430d-88a4-48b8c1661ad0",
            "name": "Response Time Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "21c80a85-0e14-46fd-b726-fbc5d4c7c333",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "",
                    "pm.test('API responds successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "de8139d3-fa3b-4876-88af-63f3dfc53931"
                }
              }
            ]
          },
          {
            "id": "c045524b-399e-40ee-9a55-a1a8db3aa3a7",
            "name": "Concurrent Request Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5eac0560-92bc-4086-ba20-f09e8065d11a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles concurrent requests', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response structure is consistent', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "72ebceda-f1de-46d5-b625-ecdfee66d66a"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "83d1eb8d-a331-436a-a284-af2b8ffac805",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "// Add any global setup here",
            "console.log('Running test:', pm.info.requestName);"
          ],
          "_lastExecutionId": "eb251428-baf2-4a9e-94b7-b5d9361a0056"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "42c27032-0649-4c08-8753-81e39fc8c4a7",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Status code is not 5xx', function () {",
            "    pm.expect(pm.response.code).to.be.below(500);",
            "});",
            "",
            "pm.test('Response time is reasonable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});"
          ],
          "_lastExecutionId": "556642ae-4997-47ad-9c97-3609ad02cc05"
        }
      }
    ],
    "variable": [
      {
        "description": {
          "content": "API base URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8002",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Frontend URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:3002",
        "key": "frontend_url"
      },
      {
        "description": {
          "content": "JWT access token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "description": {
          "content": "JWT refresh token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "user_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "client_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "chatbot_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "conversation_id"
      },
      {
        "type": "string",
        "value": "testuser@pixel.ai",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "TestPass123!",
        "key": "test_password"
      }
    ],
    "info": {
      "_postman_id": "ad93b0d8-fce9-4e80-9c4d-27805924ac0f",
      "name": "Pixel-AI-Creator Complete API Test Suite",
      "version": {
        "raw": "3.0.0",
        "major": 3,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "3.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing covering all endpoints, authentication, CRUD operations, error handling, and integration scenarios",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "2ae0ee97-00aa-4d86-8d1b-8583e41e3b22",
    "values": []
  },
  "globals": {
    "id": "f6955192-12ee-4425-b11c-f921a2355327",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 90,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 111,
        "pending": 0,
        "failed": 38
      },
      "testScripts": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 9.733333333333333,
      "responseMin": 3,
      "responseMax": 33,
      "responseSd": 5.796167316042175,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757606444841,
      "completed": 1757606461537
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 30,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6a1d8818-f63b-4e9b-8f59-7fd346ca5892",
          "httpRequestId": "7cae4ad7-8bc0-46f8-9051-2bca0c0357b7"
        },
        "item": {
          "id": "88a01602-8e8d-40f4-8af2-a2579432420c",
          "name": "API Health Check",
          "request": {
            "description": {
              "content": "Verify API is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b60488a-43a6-4af7-a120-126a52627371",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has correct headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "_lastExecutionId": "359bf443-1861-43df-b332-e7c71ecd268c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify API is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48c367d0-16c2-4bf4-bcff-e86cb80dc3f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "acdf8ab4-f60e-4038-be16-baf404101c3c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "49"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              112,
              105,
              120,
              101,
              108,
              45,
              97,
              105,
              45,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 33,
          "responseSize": 49
        },
        "id": "88a01602-8e8d-40f4-8af2-a2579432420c",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API is healthy",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has correct headers",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fb07dcec-1fe1-493f-8660-d614fa73b290",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "16175470-92a6-46fc-a2db-5e34f61ca506"
        },
        "item": {
          "id": "a08a8ee0-d395-4bac-b083-59f98c6ab98f",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1872a8e-cbc5-4ccd-a0ca-e1f832a7aee3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "adfc6901-565d-4f17-a4e5-5739772c71b0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "179508b1-cda7-4d01-9428-a3f2e8d6293f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9864b95d-a522-4a68-9361-92c87cd8a9c1",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 22
        },
        "id": "a08a8ee0-d395-4bac-b083-59f98c6ab98f",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API documentation is accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "API documentation is accessible",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "770a636a-da5d-4781-8eb3-0ca00bc763d6",
          "length": 30,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3d2a4e5c-b573-4ba2-bd2e-721f28e9ba4b"
        },
        "item": {
          "id": "4633facf-ffe6-4e7d-aa39-d72d632ba845",
          "name": "CORS Preflight Check",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "method": "OPTIONS"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df38d9a5-6883-422c-b72a-9d34dfdc1b12",
                "type": "text/javascript",
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                  "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                  "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                  "});"
                ],
                "_lastExecutionId": "c7f54338-eb23-4ac9-8a4e-7ef5dff0abaf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "Access-Control-Request-Method",
              "value": "POST"
            },
            {
              "key": "Access-Control-Request-Headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1f6d042a-f7c5-407c-9996-6a30612f78cc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "OPTIONS"
        },
        "response": {
          "id": "b9d1ebe0-fca5-4a84-866f-6d08b97fdc3e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-methods",
              "value": "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
            },
            {
              "key": "access-control-max-age",
              "value": "600"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              79,
              75
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 2
        },
        "id": "4633facf-ffe6-4e7d-aa39-d72d632ba845",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "CORS headers are present",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "80985156-2119-4b78-ac22-5ea06eda9d6c",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "903da3e9-6317-4666-91f3-3f3b921f3e44"
        },
        "item": {
          "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "286dde1e-9432-4bb7-bfbe-ec85f97cc1d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "116",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "d9f981fc-6169-491e-aaf6-e74e3af3d885",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "467"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 467
        },
        "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Registration successful or user exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Registration successful or user exists",
              "message": "expected 422 to be one of [ 201, 400, 409 ]",
              "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "28e2aae6-3a2c-48cd-8545-8a40b96a241e",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7a55b36b-562c-426c-a07f-68b88e51030a"
        },
        "item": {
          "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "628eebc4-7ef0-461d-8e59-bdbab92be216",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\"\n}"
          }
        },
        "response": {
          "id": "c97ba881-f8c4-43b4-a087-cdbdea880407",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "32"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 32
        },
        "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response contains tokens",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains tokens",
              "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
              "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6c6d6123-6626-4645-b705-f1053b223285",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2bc0f1e0-e6fc-4e65-9986-636f520a0f5b"
        },
        "item": {
          "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dadb4e0a-d044-4029-91ee-72cbbcd81d34",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a726950c-fab9-4c37-ad72-bb750547eded",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Profile retrieval successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieval successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc44fdf1-bd06-4dc1-a043-45aa6381b5b3",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9fa72450-8fea-4716-bb61-11e8ce656fa4"
        },
        "item": {
          "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "refresh"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5880c698-bf95-4fcf-9d22-c7199200aaf7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"refresh_token\": \"\"\n}"
          }
        },
        "response": {
          "id": "0f54f669-de3b-4940-928b-03380ec5f957",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Token refresh successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token refresh successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c67318f1-afdb-44d9-8ba1-90f91035ffb6",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2ef568f-59a6-4340-9ebb-43e8ceebdd25"
        },
        "item": {
          "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "20002316-8b8e-4d23-a98c-c29d07e9bf4e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "1c701c5e-a2ae-414c-9c35-539d9ae365b3",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Logout successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logout successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "df93ee1c-ad54-4233-943c-185b06dcee8e",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b688a026-5850-4b7e-a5c0-af30b59a430c"
        },
        "item": {
          "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "986ecbbb-481b-42e3-a176-f62e6b18ea3b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "213",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
          }
        },
        "response": {
          "id": "81c19491-6b83-4c70-a8f4-30e3edc2c01f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "68"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 68
        },
        "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client creation successful",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "50e7f844-c63e-46f1-8be4-195c28fda320",
          "length": 30,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9096a33d-7044-4e01-b56d-22bc2b4f48f0"
        },
        "item": {
          "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
          "name": "Get All Clients",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get clients successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "430e0318-e120-4da2-a03e-71620bb13488",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "14799b3a-a206-4466-8ef6-30c4da4f031d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:49 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 2748
        },
        "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get clients successful",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "239c81ea-1434-4be0-81dc-cb2b7f02718c",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fccc4758-43bd-4733-a467-2ff84c546732"
        },
        "item": {
          "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f5218234-782d-4147-afe1-847bab5b82e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "489b7e79-0f84-4a01-a6f3-ac40f751adea",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:50 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get client by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get client by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Client data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Client data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "283318f8-b7c5-4e57-9927-35d40f37c13a",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6d08aa6-ce46-4705-bc17-251fdbdf22ee"
        },
        "item": {
          "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "283c18e5-4a75-491f-b388-a4883f02caf1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "188",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
          }
        },
        "response": {
          "id": "ff8d448c-4fd4-4d8d-98a7-d1b42b8b1c48",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:50 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 31
        },
        "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0918d82f-af5d-4c10-a8ec-dcca0c8a7bb4",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "94e4bf34-6533-4b20-8308-26295fcf5fae"
        },
        "item": {
          "id": "41eed132-7f67-4d05-8375-6ede1004f375",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "10929c73-4689-404e-b33a-afc2f990267c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "47fb5d5d-6094-4027-af02-67bc29ce017c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c25899d7-9d07-4574-9d59-61a3ebda51a4",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 31
        },
        "id": "41eed132-7f67-4d05-8375-6ede1004f375",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client deletion successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client deletion successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "40ab70b9-ac61-4104-aa4f-a946431fab59",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bdf20266-5874-4208-bdd5-20e0048b3783"
        },
        "item": {
          "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "26ace659-74bd-430b-82a0-fdfc7dbc5e00",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "217",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "5bf76fd5-6505-4030-961d-02f231c05b5e",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:51 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "096fce53-56e7-41db-8394-dab1aac68f69",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bd8272ea-a2e8-4b21-9153-84a0d99aaf42"
        },
        "item": {
          "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ee916bf8-138f-4212-b1db-f396a307edf0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "395c154e-17f9-4cb1-8319-dadc20a8df24",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:52 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 30
        },
        "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbots successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbots successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fc58c7cb-6f14-4238-8d77-3400d1d69139",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6abe8aeb-f30d-4ec0-be84-665f66e4fff0"
        },
        "item": {
          "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f86badec-ea8f-4462-92dd-cfd7256965d1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "15239823-29be-4c8a-bade-70e81b1e71a6",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:52 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbot by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbot by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Chatbot data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Chatbot data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0987f6fd-cb7d-41d2-8505-803169f74c15",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6158d30b-699c-449f-b30c-59817c3bf175"
        },
        "item": {
          "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b2881b2-2df9-4dd5-a7ea-b31fc8fb0b26",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "230",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
          }
        },
        "response": {
          "id": "ea9ad339-91b0-487a-9b58-76f501dc2a89",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:53 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 31
        },
        "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e1e6f132-56ea-4bcb-9bcc-7c7fdc80b724",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d2d37001-12a7-4a73-8f06-e6b52960c557"
        },
        "item": {
          "id": "eb053a08-1817-4501-b6d0-11adcd747930",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cc99d7db-2f2f-41d3-bee7-6d92092d3b16",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chatbot_id\": \"\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "42d3b47d-d61a-46f3-8f1c-0fb8f761eb8d",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:53 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 30
        },
        "id": "eb053a08-1817-4501-b6d0-11adcd747930",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "579305ec-2838-4604-8239-c85f2ef4381d",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "54d443e8-e283-4441-9cf2-46e39813dc59"
        },
        "item": {
          "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              "",
              "messages"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4c0c6889-11c1-4444-8137-b215078c4ec1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "78",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "56b3ccb4-48f7-46ad-8a19-4fbf62e5b8a0",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Bot response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bot response received",
              "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d0721688-618a-459f-9ce3-8207f5c51991",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5f3d64d-324b-4e97-a4a5-a9849d203404"
        },
        "item": {
          "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1883f35b-f8b4-4916-92c0-5a864170a8cf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a0e40790-6510-411a-8e38-fc7d003e9fdd",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 30
        },
        "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation history retrieved",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Messages are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Messages are present",
              "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "63d075d4-63a2-41aa-9a59-81b94813360e",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6f4b857e-e2bd-494a-9cd2-cbd9a984abf6"
        },
        "item": {
          "id": "50cc490d-6406-4406-aee8-4f06523bccad",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0a773222-503a-4c62-b856-f51005ba72a2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "719f8036-73a1-497a-a68f-3e0592d270de",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 30
        },
        "id": "50cc490d-6406-4406-aee8-4f06523bccad",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get conversations successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get conversations successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1c2bcd16-01f4-4572-85ac-6bf0ce6406fb",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ae1f2d44-27e6-45a8-9ca8-77d4a85c7df3"
        },
        "item": {
          "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "85df8a91-1390-4baf-a96b-2e0f8ff8de8d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5af01ab7-0a51-43c9-a067-b29bc1a51987",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 22
        },
        "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Analytics data retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Analytics data retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Analytics contains key metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Analytics contains key metrics",
              "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3e7bb644-b612-4ade-9752-d28976b9863e",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d134ef4e-ef18-453f-90e5-9c4b656efcbf"
        },
        "item": {
          "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "period",
                "value": "7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0adc2ebf-2c52-4d73-bee9-f4d4cfffe849",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "55df0c40-4081-41e6-9609-1947c062a10d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation analytics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation analytics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Analytics data is structured",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0be5b3c-5d3a-44ec-9d92-33e8e09a8694",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "44ffea4a-8341-4619-a69c-1244fa1162b3"
        },
        "item": {
          "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "performance"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4e95aa0f-59a8-4e22-b4a9-b9637db3352b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ef7d9dfc-49ab-4eae-9f8c-f832a2b9518a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:57 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Performance metrics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Performance metrics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Performance data contains metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Performance data contains metrics",
              "message": "expected { detail: 'Not Found' } to have property 'response_time'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "30ddb91c-f45a-4e4b-848d-bdf22f000ebe",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c9832a57-79ee-4406-be08-b844c1b98fad"
        },
        "item": {
          "id": "aff04921-79d7-4107-b970-97c5eef2361a",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2e20fca1-dba5-47ff-b674-4f1543a7e0e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "721fbaaf-e4c8-4a25-98bb-e436e6ce731c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:57 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 2748
        },
        "id": "aff04921-79d7-4107-b970-97c5eef2361a",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Unauthorized access blocked",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized access blocked",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Error message is informative",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error message is informative",
              "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
              "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7fe4cde6-130f-443f-bf8e-b7cf54ce289c",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fab90c76-7aaa-4291-a9f2-8aebf324aab2"
        },
        "item": {
          "id": "ef707965-3856-458d-a1e5-b840f61c992b",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid-token-12345"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9de24f36-6525-4fc5-9ea1-f17a4bb94dfb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ecfbd9b7-b7ab-418a-99f0-4f01fcf405ce",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 2748
        },
        "id": "ef707965-3856-458d-a1e5-b840f61c992b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid token rejected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Invalid token rejected",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0e1550d8-1bcd-44af-b576-f78b44a6617e",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f18ee6ef-13fb-4fe2-98ca-5742a66f886f"
        },
        "item": {
          "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              "99999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "edc2e68b-8b81-4b73-b5e0-ecd950845b78",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b0cbbed7-b6bd-456f-8ae1-a3f1a95bb054",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Non-existent resource returns 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Non-existent resource returns 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Error message is clear",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b071cfc-947c-42a4-b830-b2a713f3202b",
          "length": 30,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "edda2616-529c-47aa-aad4-d86e0baff226"
        },
        "item": {
          "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
          "name": "Invalid Data Format Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e3286b8-1f7b-4066-839c-16f00cf3c2f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Validation errors provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "ddca6f41-9f9b-4482-81b2-aa96f7d23827"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b37642db-29ec-4469-9251-30dba459adb2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
          }
        },
        "response": {
          "id": "83188999-b5fd-4619-8630-bd4921316334",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:59 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 385
        },
        "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid data rejected",
            "skipped": false
          },
          {
            "assertion": "Validation errors provided",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b074a186-fa4e-429c-833a-7300dde57df6",
          "length": 30,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "23ce0a73-b24f-497a-943c-1f60fe52f49d"
        },
        "item": {
          "id": "394faad6-2f0f-430d-88a4-48b8c1661ad0",
          "name": "Response Time Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "21c80a85-0e14-46fd-b726-fbc5d4c7c333",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "de8139d3-fa3b-4876-88af-63f3dfc53931"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "64b2ab3d-41a5-47ea-bc64-403fb6862c19",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1104fae4-a0bc-460f-b506-38ef23202bf0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:00:59 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 2748
        },
        "id": "394faad6-2f0f-430d-88a4-48b8c1661ad0",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "API responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fe449f35-bf43-4e40-8a1f-360cff69ee5d",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "17c54a2b-57a2-4e60-adad-16b0e8e32acf"
        },
        "item": {
          "id": "c045524b-399e-40ee-9a55-a1a8db3aa3a7",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5eac0560-92bc-4086-ba20-f09e8065d11a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "72ebceda-f1de-46d5-b625-ecdfee66d66a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f94c4c06-5fd8-4dc9-ae1a-eeabb35cad74",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6cf24d1f-3612-4794-948c-f7403c94e17a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 16:01:00 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "c045524b-399e-40ee-9a55-a1a8db3aa3a7",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Handles concurrent requests",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles concurrent requests",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Response structure is consistent",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 12526
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "API documentation is accessible",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "80a0a7d99e1112daaa35c2b6420d67a9",
          "id": "92014f97-c26c-4854-8e15-fba14b1252c0",
          "timestamp": 1757606446005,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a08a8ee0-d395-4bac-b083-59f98c6ab98f",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1872a8e-cbc5-4ccd-a0ca-e1f832a7aee3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "adfc6901-565d-4f17-a4e5-5739772c71b0"
              }
            }
          ]
        },
        "parent": {
          "id": "43f71460-55cb-4453-bab3-16a83dc62e71",
          "name": "üè• System Health & Infrastructure",
          "description": {
            "content": "Test system health, CORS, and basic connectivity",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88a01602-8e8d-40f4-8af2-a2579432420c",
              "name": "API Health Check",
              "request": {
                "description": {
                  "content": "Verify API is running and healthy",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b60488a-43a6-4af7-a120-126a52627371",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has correct headers', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "359bf443-1861-43df-b332-e7c71ecd268c"
                  }
                }
              ]
            },
            {
              "id": "a08a8ee0-d395-4bac-b083-59f98c6ab98f",
              "name": "API Documentation/OpenAPI",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1872a8e-cbc5-4ccd-a0ca-e1f832a7aee3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API documentation is accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "adfc6901-565d-4f17-a4e5-5739772c71b0"
                  }
                }
              ]
            },
            {
              "id": "4633facf-ffe6-4e7d-aa39-d72d632ba845",
              "name": "CORS Preflight Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "{{frontend_url}}"
                  },
                  {
                    "key": "Access-Control-Request-Method",
                    "value": "POST"
                  },
                  {
                    "key": "Access-Control-Request-Headers",
                    "value": "Content-Type,Authorization"
                  }
                ],
                "method": "OPTIONS"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df38d9a5-6883-422c-b72a-9d34dfdc1b12",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('CORS headers are present', function () {",
                      "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                      "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                      "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                      "});"
                    ],
                    "_lastExecutionId": "c7f54338-eb23-4ac9-8a4e-7ef5dff0abaf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb07dcec-1fe1-493f-8660-d614fa73b290",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "16175470-92a6-46fc-a2db-5e34f61ca506",
          "scriptId": "a1872a8e-cbc5-4ccd-a0ca-e1f832a7aee3",
          "execution": "adfc6901-565d-4f17-a4e5-5739772c71b0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Registration successful or user exists",
          "message": "expected 422 to be one of [ 201, 400, 409 ]",
          "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "f69628823c5cd7f928373b07f566c976",
          "id": "499759b8-2275-4785-bd08-f4e0e2d13d7b",
          "timestamp": 1757606447150,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80985156-2119-4b78-ac22-5ea06eda9d6c",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "903da3e9-6317-4666-91f3-3f3b921f3e44",
          "scriptId": "3ef54362-26e8-45f0-8994-69ebd7888b85",
          "execution": "7b006470-60ab-4153-bbbd-eb6659438815"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "bf2ffec64b8236201754c4c1c7d1ea04",
          "id": "158d8db3-f24b-4bb9-82c1-e60d6a9aa678",
          "timestamp": 1757606447723,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "28e2aae6-3a2c-48cd-8545-8a40b96a241e",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7a55b36b-562c-426c-a07f-68b88e51030a",
          "scriptId": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
          "execution": "50a9c88e-20e6-4c30-9676-630fc93396a6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains tokens",
          "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
          "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "65c42e8b12b5e4e51c4e835482bcddd8",
          "id": "2344af84-0113-49b4-bb35-2d1ce775cd3a",
          "timestamp": 1757606447725,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "28e2aae6-3a2c-48cd-8545-8a40b96a241e",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7a55b36b-562c-426c-a07f-68b88e51030a",
          "scriptId": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
          "execution": "50a9c88e-20e6-4c30-9676-630fc93396a6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieval successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a7ed004296ef62f65ad487070dba0be4",
          "id": "49da21b6-2054-443f-b2cc-3c5a298e8803",
          "timestamp": 1757606448262,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6c6d6123-6626-4645-b705-f1053b223285",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2bc0f1e0-e6fc-4e65-9986-636f520a0f5b",
          "scriptId": "fc2e0364-9887-4d23-827a-be163b9da514",
          "execution": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "8a63d3f10bcfccf73ca45c545ed6394e",
          "id": "fdb78344-fe0d-4e06-9ea1-5b76ddff11b2",
          "timestamp": 1757606448264,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6c6d6123-6626-4645-b705-f1053b223285",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2bc0f1e0-e6fc-4e65-9986-636f520a0f5b",
          "scriptId": "fc2e0364-9887-4d23-827a-be163b9da514",
          "execution": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token refresh successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8dc8087685865bb2c9b0c357b3d9b3ef",
          "id": "f9de39d9-571d-4429-81be-3988eaf5eaf1",
          "timestamp": 1757606448802,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dc44fdf1-bd06-4dc1-a043-45aa6381b5b3",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9fa72450-8fea-4716-bb61-11e8ce656fa4",
          "scriptId": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
          "execution": "47f97593-21c1-47e2-9434-c662c94c90f7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logout successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "d9b01805b4dc8168cb7e835a2a713806",
          "id": "ee132e82-202a-4f41-94f1-89f0e7b5a1bd",
          "timestamp": 1757606449339,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
              }
            }
          ]
        },
        "parent": {
          "id": "1f404c5f-a3b1-4e49-82c2-125767247da0",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "7e803dfa-6fe0-4eca-88ce-b3b871799c2e",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3ef54362-26e8-45f0-8994-69ebd7888b85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7b006470-60ab-4153-bbbd-eb6659438815"
                  }
                }
              ]
            },
            {
              "id": "e1d49144-57ba-4e45-81b2-1b5dd7a25d83",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3667fe67-af55-4bb8-9bc2-72564a95edb4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "50a9c88e-20e6-4c30-9676-630fc93396a6"
                  }
                }
              ]
            },
            {
              "id": "c7af0725-2ce3-4491-8c20-498b60aab5d9",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc2e0364-9887-4d23-827a-be163b9da514",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0d3a020a-3859-45ab-8987-9af8a3f6db8b"
                  }
                }
              ]
            },
            {
              "id": "e3c2197c-e411-4d7f-bbb9-b71c9d6dccbc",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53e4ad52-32b1-459f-a80d-2265efe3b11d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "47f97593-21c1-47e2-9434-c662c94c90f7"
                  }
                }
              ]
            },
            {
              "id": "55b0fa22-34f5-4188-a17f-af0c746f2616",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc8bee3b-a70a-44e1-bbff-c082866263da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "30516dc2-59ee-406d-8325-2de093af776b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c67318f1-afdb-44d9-8ba1-90f91035ffb6",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2ef568f-59a6-4340-9ebb-43e8ceebdd25",
          "scriptId": "bc8bee3b-a70a-44e1-bbff-c082866263da",
          "execution": "30516dc2-59ee-406d-8325-2de093af776b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client creation successful",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "17b17297b45d090fd11260c212b8b0da",
          "id": "9e3593d6-83dc-42e9-936d-f5319ed6aae8",
          "timestamp": 1757606449879,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
              }
            }
          ]
        },
        "parent": {
          "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                  }
                }
              ]
            },
            {
              "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                  }
                }
              ]
            },
            {
              "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                  }
                }
              ]
            },
            {
              "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                  }
                }
              ]
            },
            {
              "id": "41eed132-7f67-4d05-8375-6ede1004f375",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10929c73-4689-404e-b33a-afc2f990267c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "df93ee1c-ad54-4233-943c-185b06dcee8e",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b688a026-5850-4b7e-a5c0-af30b59a430c",
          "scriptId": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
          "execution": "7795de55-69b4-4586-b47a-44c60634eebc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get client by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "96f625988eadbbd724a2a69338077272",
          "id": "6f361899-6296-4a6b-9d76-719cd2d3d50c",
          "timestamp": 1757606451002,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
              }
            }
          ]
        },
        "parent": {
          "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                  }
                }
              ]
            },
            {
              "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                  }
                }
              ]
            },
            {
              "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                  }
                }
              ]
            },
            {
              "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                  }
                }
              ]
            },
            {
              "id": "41eed132-7f67-4d05-8375-6ede1004f375",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10929c73-4689-404e-b33a-afc2f990267c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "239c81ea-1434-4be0-81dc-cb2b7f02718c",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fccc4758-43bd-4733-a467-2ff84c546732",
          "scriptId": "0fc81399-8de0-4c88-b60a-42019158adaf",
          "execution": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Client data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "f506310853bb6b97ed72870e4d92f793",
          "id": "7da6bdd4-e6bb-4c97-8942-7f46f571b601",
          "timestamp": 1757606451003,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
              }
            }
          ]
        },
        "parent": {
          "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                  }
                }
              ]
            },
            {
              "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                  }
                }
              ]
            },
            {
              "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                  }
                }
              ]
            },
            {
              "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                  }
                }
              ]
            },
            {
              "id": "41eed132-7f67-4d05-8375-6ede1004f375",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10929c73-4689-404e-b33a-afc2f990267c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "239c81ea-1434-4be0-81dc-cb2b7f02718c",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fccc4758-43bd-4733-a467-2ff84c546732",
          "scriptId": "0fc81399-8de0-4c88-b60a-42019158adaf",
          "execution": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1cf5a2b583858a1135548ac38355999d",
          "id": "f8c26a4a-3ce2-4bfb-aa58-ef63b3da975c",
          "timestamp": 1757606451555,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
              }
            }
          ]
        },
        "parent": {
          "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                  }
                }
              ]
            },
            {
              "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                  }
                }
              ]
            },
            {
              "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                  }
                }
              ]
            },
            {
              "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                  }
                }
              ]
            },
            {
              "id": "41eed132-7f67-4d05-8375-6ede1004f375",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10929c73-4689-404e-b33a-afc2f990267c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "283318f8-b7c5-4e57-9927-35d40f37c13a",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6d08aa6-ce46-4705-bc17-251fdbdf22ee",
          "scriptId": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
          "execution": "82103cf9-a763-4b96-86b0-4b27d8f23900"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "10d4a63b077a79561acdda3edff711c3",
          "id": "b5423bb2-eb94-434e-87d2-cf9e3ff0736d",
          "timestamp": 1757606451556,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
              }
            }
          ]
        },
        "parent": {
          "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                  }
                }
              ]
            },
            {
              "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                  }
                }
              ]
            },
            {
              "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                  }
                }
              ]
            },
            {
              "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                  }
                }
              ]
            },
            {
              "id": "41eed132-7f67-4d05-8375-6ede1004f375",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10929c73-4689-404e-b33a-afc2f990267c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "283318f8-b7c5-4e57-9927-35d40f37c13a",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6d08aa6-ce46-4705-bc17-251fdbdf22ee",
          "scriptId": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
          "execution": "82103cf9-a763-4b96-86b0-4b27d8f23900"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client deletion successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "4493450e4c6607e1cae559563339502e",
          "id": "8d2c935c-6021-45f3-862c-8a38c35d0f96",
          "timestamp": 1757606452107,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "41eed132-7f67-4d05-8375-6ede1004f375",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "10929c73-4689-404e-b33a-afc2f990267c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
              }
            }
          ]
        },
        "parent": {
          "id": "5162e1b4-a1ac-4535-ae6d-3620d97cf005",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "12a5bae6-ea6c-46ca-b3f0-01115287a4ab",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6bc9e996-4ca3-4765-a4f3-58b4468a9853",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7795de55-69b4-4586-b47a-44c60634eebc"
                  }
                }
              ]
            },
            {
              "id": "34f667c2-7608-4c94-a73b-52a507a710e1",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a89e9f84-1991-49bd-8b02-a4a72cf8cf7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "536ca4b0-9bd0-4d5a-bf7f-9f5cb0402246"
                  }
                }
              ]
            },
            {
              "id": "ce8242bb-e42c-4d84-b3cc-0b14c447dfab",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fc81399-8de0-4c88-b60a-42019158adaf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "33d41d7b-5008-42d3-aac0-b0802623d3ee"
                  }
                }
              ]
            },
            {
              "id": "e2d78787-c456-4971-95d7-d328bb26b9ff",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb3ae20-31cf-4b1c-9678-7fd4db511fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "82103cf9-a763-4b96-86b0-4b27d8f23900"
                  }
                }
              ]
            },
            {
              "id": "41eed132-7f67-4d05-8375-6ede1004f375",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10929c73-4689-404e-b33a-afc2f990267c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "52befdf5-4717-4233-9eda-74746eb6fb1a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0918d82f-af5d-4c10-a8ec-dcca0c8a7bb4",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "94e4bf34-6533-4b20-8308-26295fcf5fae",
          "scriptId": "10929c73-4689-404e-b33a-afc2f990267c",
          "execution": "52befdf5-4717-4233-9eda-74746eb6fb1a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "eabef9a6ffb6400a330c2c368cf95d41",
          "id": "311021bc-6f97-4d4e-ab84-b1d81bf2d1a8",
          "timestamp": 1757606452659,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "40ab70b9-ac61-4104-aa4f-a946431fab59",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bdf20266-5874-4208-bdd5-20e0048b3783",
          "scriptId": "307304c6-957b-42f7-81ea-0e48e39afc03",
          "execution": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbots successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "d6f39246dba8fe46523ad2aa2e14f725",
          "id": "f617265d-8266-4efe-a9cc-7c13b2da4255",
          "timestamp": 1757606453226,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "096fce53-56e7-41db-8394-dab1aac68f69",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bd8272ea-a2e8-4b21-9153-84a0d99aaf42",
          "scriptId": "33637232-cc80-4407-8d8f-abbe700a8689",
          "execution": "118113f0-3f1c-4e65-80e5-48e0d539730d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "1f5d4cced9d1d28e82c776848860bc18",
          "id": "e5a8b985-410e-4dee-89d8-f053d7bd79f7",
          "timestamp": 1757606453227,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "096fce53-56e7-41db-8394-dab1aac68f69",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bd8272ea-a2e8-4b21-9153-84a0d99aaf42",
          "scriptId": "33637232-cc80-4407-8d8f-abbe700a8689",
          "execution": "118113f0-3f1c-4e65-80e5-48e0d539730d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbot by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "71ab0a54b29a62c80d33eb289ce0189b",
          "id": "0b736daa-6fc9-4fb3-891b-e961f8514a08",
          "timestamp": 1757606453762,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fc58c7cb-6f14-4238-8d77-3400d1d69139",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6abe8aeb-f30d-4ec0-be84-665f66e4fff0",
          "scriptId": "a4d48fd7-0621-488e-839a-3fff9f56344a",
          "execution": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Chatbot data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "ad178618c7e67b96384574ed5a015906",
          "id": "e1afbdea-f0c4-4c7a-8164-1d9a11090169",
          "timestamp": 1757606453763,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fc58c7cb-6f14-4238-8d77-3400d1d69139",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6abe8aeb-f30d-4ec0-be84-665f66e4fff0",
          "scriptId": "a4d48fd7-0621-488e-839a-3fff9f56344a",
          "execution": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "b36693e3b0a6c2665778679f7cf89418",
          "id": "87fa8fd2-dbc7-4956-8b50-d1ef91f3af69",
          "timestamp": 1757606454313,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0987f6fd-cb7d-41d2-8505-803169f74c15",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6158d30b-699c-449f-b30c-59817c3bf175",
          "scriptId": "04e30249-44cb-4963-85fe-45fef7850f7f",
          "execution": "9e6f247f-db0e-4533-8fde-97f18badddf8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "6605396d5dfa960f2df20e74ea117867",
          "id": "6d066801-b319-4fab-9c1c-e847b358c1ad",
          "timestamp": 1757606454315,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
              }
            }
          ]
        },
        "parent": {
          "id": "6184287e-065b-477a-b1d7-5cf947070274",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "88f5193c-e1d9-4c1d-9498-0f4a17521d0e",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "307304c6-957b-42f7-81ea-0e48e39afc03",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a837a09f-2847-4d5b-817e-f1cdb0aaa503"
                  }
                }
              ]
            },
            {
              "id": "80b67989-41e3-44b5-b7f2-74eaa2ed353b",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33637232-cc80-4407-8d8f-abbe700a8689",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "118113f0-3f1c-4e65-80e5-48e0d539730d"
                  }
                }
              ]
            },
            {
              "id": "fc7cd53f-efdd-4fc7-a051-b6fabcd1be7d",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d48fd7-0621-488e-839a-3fff9f56344a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "ed2c44d7-3c00-4a02-9025-dfa25758706f"
                  }
                }
              ]
            },
            {
              "id": "b871e3fc-61d7-4209-8ec2-7a8dcce6e89a",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04e30249-44cb-4963-85fe-45fef7850f7f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "9e6f247f-db0e-4533-8fde-97f18badddf8"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0987f6fd-cb7d-41d2-8505-803169f74c15",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6158d30b-699c-449f-b30c-59817c3bf175",
          "scriptId": "04e30249-44cb-4963-85fe-45fef7850f7f",
          "execution": "9e6f247f-db0e-4533-8fde-97f18badddf8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "5c86b0639aec75245af52f9fa7cf3615",
          "id": "e378b383-1e22-43eb-b5e0-ec7470b8f5ae",
          "timestamp": 1757606454867,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "eb053a08-1817-4501-b6d0-11adcd747930",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e1e6f132-56ea-4bcb-9bcc-7c7fdc80b724",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d2d37001-12a7-4a73-8f06-e6b52960c557",
          "scriptId": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
          "execution": "bf37a757-728c-4c17-935d-93aa5afa003c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "3d3e25839ea629fc1e5d30f35a0cc7b5",
          "id": "8728008f-59ef-4a44-8bca-d57820f471cb",
          "timestamp": 1757606455421,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "579305ec-2838-4604-8239-c85f2ef4381d",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "54d443e8-e283-4441-9cf2-46e39813dc59",
          "scriptId": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
          "execution": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bot response received",
          "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "e698891e922fd739547a86ca7fa54377",
          "id": "a60e20af-2f52-4066-ac7a-f620f432edaf",
          "timestamp": 1757606455422,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "579305ec-2838-4604-8239-c85f2ef4381d",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "54d443e8-e283-4441-9cf2-46e39813dc59",
          "scriptId": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
          "execution": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation history retrieved",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "53418adcf942bd6254463943052fc95c",
          "id": "a0cc5987-6a09-4a2b-a7c7-33a92ce79a84",
          "timestamp": 1757606455969,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0721688-618a-459f-9ce3-8207f5c51991",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5f3d64d-324b-4e97-a4a5-a9849d203404",
          "scriptId": "b9357b90-0fb9-4f81-801b-2b10c8120268",
          "execution": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Messages are present",
          "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "c3e00d9df1b4d1d196deb3dbea108533",
          "id": "b1fd2356-f7e1-4006-8f7b-4ce06b31d925",
          "timestamp": 1757606455970,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0721688-618a-459f-9ce3-8207f5c51991",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5f3d64d-324b-4e97-a4a5-a9849d203404",
          "scriptId": "b9357b90-0fb9-4f81-801b-2b10c8120268",
          "execution": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get conversations successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "b62167b2a91e528b41e4b2ab7728d895",
          "id": "bedacdfa-b283-47fd-a87d-3f96b6820053",
          "timestamp": 1757606456518,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "50cc490d-6406-4406-aee8-4f06523bccad",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "63d075d4-63a2-41aa-9a59-81b94813360e",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6f4b857e-e2bd-494a-9cd2-cbd9a984abf6",
          "scriptId": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
          "execution": "07d8b81d-90f6-4877-af5a-bd5244571443"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "6a179b72a3918374b60b4cd4ac2a7d6b",
          "id": "b006e991-f0e4-4ad1-b57d-23f97f3e67ac",
          "timestamp": 1757606456520,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "50cc490d-6406-4406-aee8-4f06523bccad",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
              }
            }
          ]
        },
        "parent": {
          "id": "5cb74d9b-0a5c-496a-8726-dc8948f2faf9",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "eb053a08-1817-4501-b6d0-11adcd747930",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38b6085a-fa6d-47fa-9972-eaccc7d09088",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bf37a757-728c-4c17-935d-93aa5afa003c"
                  }
                }
              ]
            },
            {
              "id": "5d86de29-a60d-4b55-b288-a06515b2c9bf",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33896cfa-e66b-4c6b-ae8e-86c873d0276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "f843b53e-c0e5-49fa-aad0-05b8cbe66cad"
                  }
                }
              ]
            },
            {
              "id": "762306fc-57fd-4172-b364-2ad7f805b6e0",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b9357b90-0fb9-4f81-801b-2b10c8120268",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "caf42b2e-f591-474f-b64c-307ceb6e0aeb"
                  }
                }
              ]
            },
            {
              "id": "50cc490d-6406-4406-aee8-4f06523bccad",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "07d8b81d-90f6-4877-af5a-bd5244571443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "63d075d4-63a2-41aa-9a59-81b94813360e",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6f4b857e-e2bd-494a-9cd2-cbd9a984abf6",
          "scriptId": "e8d606b1-0a70-40b7-8815-8af0f8618b91",
          "execution": "07d8b81d-90f6-4877-af5a-bd5244571443"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Analytics data retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "9c7f8a840cad5167639396ee07874522",
          "id": "535c68a9-0abc-4067-af5f-632996cae1c5",
          "timestamp": 1757606457068,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
              }
            }
          ]
        },
        "parent": {
          "id": "dcd0a8f0-5afe-4f05-95ef-5100d56cd09e",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
                  }
                }
              ]
            },
            {
              "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
                  }
                }
              ]
            },
            {
              "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1c2bcd16-01f4-4572-85ac-6bf0ce6406fb",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ae1f2d44-27e6-45a8-9ca8-77d4a85c7df3",
          "scriptId": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
          "execution": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Analytics contains key metrics",
          "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "4685efb4372b72b465200ff206a21599",
          "id": "65cd84c2-4d79-47e5-8606-64708021582f",
          "timestamp": 1757606457070,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
              }
            }
          ]
        },
        "parent": {
          "id": "dcd0a8f0-5afe-4f05-95ef-5100d56cd09e",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
                  }
                }
              ]
            },
            {
              "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
                  }
                }
              ]
            },
            {
              "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1c2bcd16-01f4-4572-85ac-6bf0ce6406fb",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ae1f2d44-27e6-45a8-9ca8-77d4a85c7df3",
          "scriptId": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
          "execution": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation analytics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "222f308c69cdf27862b3303c9a92bf17",
          "id": "fbca492a-292c-47e0-b331-e993df7d2144",
          "timestamp": 1757606457625,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
              }
            }
          ]
        },
        "parent": {
          "id": "dcd0a8f0-5afe-4f05-95ef-5100d56cd09e",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
                  }
                }
              ]
            },
            {
              "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
                  }
                }
              ]
            },
            {
              "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3e7bb644-b612-4ade-9752-d28976b9863e",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d134ef4e-ef18-453f-90e5-9c4b656efcbf",
          "scriptId": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
          "execution": "56a9217b-cdf0-44be-9975-6c84ae46d128"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Performance metrics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "0031538784c482fe2b6ad7cc568f81f7",
          "id": "e0c85215-55ae-47db-9a3d-50c2ed45d9d9",
          "timestamp": 1757606458174,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
              }
            }
          ]
        },
        "parent": {
          "id": "dcd0a8f0-5afe-4f05-95ef-5100d56cd09e",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
                  }
                }
              ]
            },
            {
              "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
                  }
                }
              ]
            },
            {
              "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0be5b3c-5d3a-44ec-9d92-33e8e09a8694",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "44ffea4a-8341-4619-a69c-1244fa1162b3",
          "scriptId": "2710a8e1-1475-469d-a5c0-d660d0339759",
          "execution": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Performance data contains metrics",
          "message": "expected { detail: 'Not Found' } to have property 'response_time'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "2a8c8dc17871f01da41a93b6622e9516",
          "id": "52569c8d-cf16-4020-89f2-617652ce79ad",
          "timestamp": 1757606458175,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
              }
            }
          ]
        },
        "parent": {
          "id": "dcd0a8f0-5afe-4f05-95ef-5100d56cd09e",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ac611583-36db-4b6a-b059-36b12f4257b2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cda57be-2592-4cae-ae8a-93a4d42a461b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "a66a880d-c9bd-40f9-9c7c-a8f8c0358832"
                  }
                }
              ]
            },
            {
              "id": "3fdca0db-e17d-4ca2-b1c6-0689e55c06b3",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "146a93dd-2c27-4e6a-9fc6-f2a40522b7f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "56a9217b-cdf0-44be-9975-6c84ae46d128"
                  }
                }
              ]
            },
            {
              "id": "b458ee37-6b48-44e7-9764-9b37bb707d06",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2710a8e1-1475-469d-a5c0-d660d0339759",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0be5b3c-5d3a-44ec-9d92-33e8e09a8694",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "44ffea4a-8341-4619-a69c-1244fa1162b3",
          "scriptId": "2710a8e1-1475-469d-a5c0-d660d0339759",
          "execution": "b8f9ab3b-7906-4132-8ba4-f00cecb3b299"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized access blocked",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "665a7d559fea89c6bb7a122c956f0676",
          "id": "49664891-a1ac-48a4-ad3e-7d953da08c19",
          "timestamp": 1757606458731,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "aff04921-79d7-4107-b970-97c5eef2361a",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
              }
            }
          ]
        },
        "parent": {
          "id": "b2455c97-a419-47c8-ac57-760cbf211f55",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "aff04921-79d7-4107-b970-97c5eef2361a",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
                  }
                }
              ]
            },
            {
              "id": "ef707965-3856-458d-a1e5-b840f61c992b",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
                  }
                }
              ]
            },
            {
              "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
                  }
                }
              ]
            },
            {
              "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3286b8-1f7b-4066-839c-16f00cf3c2f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ddca6f41-9f9b-4482-81b2-aa96f7d23827"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "30ddb91c-f45a-4e4b-848d-bdf22f000ebe",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c9832a57-79ee-4406-be08-b844c1b98fad",
          "scriptId": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
          "execution": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error message is informative",
          "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
          "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "adebd60b7cf76e607cf36e74f9bf028a",
          "id": "310fd5bf-2b76-4c7a-846c-047b13de4ab9",
          "timestamp": 1757606458733,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "aff04921-79d7-4107-b970-97c5eef2361a",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
              }
            }
          ]
        },
        "parent": {
          "id": "b2455c97-a419-47c8-ac57-760cbf211f55",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "aff04921-79d7-4107-b970-97c5eef2361a",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
                  }
                }
              ]
            },
            {
              "id": "ef707965-3856-458d-a1e5-b840f61c992b",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
                  }
                }
              ]
            },
            {
              "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
                  }
                }
              ]
            },
            {
              "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3286b8-1f7b-4066-839c-16f00cf3c2f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ddca6f41-9f9b-4482-81b2-aa96f7d23827"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "30ddb91c-f45a-4e4b-848d-bdf22f000ebe",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c9832a57-79ee-4406-be08-b844c1b98fad",
          "scriptId": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
          "execution": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Invalid token rejected",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "bebfa55b9be79c18afafdf5e031b58cc",
          "id": "14d6f2fa-985d-456d-ace7-a92ec2ea8b9b",
          "timestamp": 1757606459291,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ef707965-3856-458d-a1e5-b840f61c992b",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
              }
            }
          ]
        },
        "parent": {
          "id": "b2455c97-a419-47c8-ac57-760cbf211f55",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "aff04921-79d7-4107-b970-97c5eef2361a",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
                  }
                }
              ]
            },
            {
              "id": "ef707965-3856-458d-a1e5-b840f61c992b",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
                  }
                }
              ]
            },
            {
              "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
                  }
                }
              ]
            },
            {
              "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3286b8-1f7b-4066-839c-16f00cf3c2f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ddca6f41-9f9b-4482-81b2-aa96f7d23827"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7fe4cde6-130f-443f-bf8e-b7cf54ce289c",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fab90c76-7aaa-4291-a9f2-8aebf324aab2",
          "scriptId": "f3815386-4683-4db2-8213-9a9e09f628c4",
          "execution": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Non-existent resource returns 404",
          "message": "expected response to have status code 404 but got 403",
          "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "ee21ee64ae89c94503834a01fbd4094a",
          "id": "56f693c4-c76d-4bd5-8d08-56b56a98d6b7",
          "timestamp": 1757606459845,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
              }
            }
          ]
        },
        "parent": {
          "id": "b2455c97-a419-47c8-ac57-760cbf211f55",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "aff04921-79d7-4107-b970-97c5eef2361a",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b84cd2a2-cf7d-4aec-869a-692192e1f006",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "27d64996-f5a0-41a2-b412-7b622c1b6fdb"
                  }
                }
              ]
            },
            {
              "id": "ef707965-3856-458d-a1e5-b840f61c992b",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3815386-4683-4db2-8213-9a9e09f628c4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "17e7be3a-5f46-4c6f-bb8b-ad09b2f928dc"
                  }
                }
              ]
            },
            {
              "id": "a06ee3ca-58b9-4238-a96b-9c002cb0b2af",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
                  }
                }
              ]
            },
            {
              "id": "49deb2b5-9cc8-4e80-9e94-f7a6eb1500ce",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e3286b8-1f7b-4066-839c-16f00cf3c2f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "ddca6f41-9f9b-4482-81b2-aa96f7d23827"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0e1550d8-1bcd-44af-b576-f78b44a6617e",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f18ee6ef-13fb-4fe2-98ca-5742a66f886f",
          "scriptId": "fc1342c6-e71b-4c36-ab46-76c27cf6c506",
          "execution": "a2dc9255-81cf-47b0-8323-875c7f3c8e78"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles concurrent requests",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "d63d7f17cfb8ac12a385b6a5d1cf589e",
          "id": "afa0ec68-d9c1-48bf-ba6d-c055684da907",
          "timestamp": 1757606461531,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c045524b-399e-40ee-9a55-a1a8db3aa3a7",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5eac0560-92bc-4086-ba20-f09e8065d11a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "72ebceda-f1de-46d5-b625-ecdfee66d66a"
              }
            }
          ]
        },
        "parent": {
          "id": "9f651141-d5f7-4f20-b8a3-34c012a6363f",
          "name": "‚ö° Performance & Load Tests",
          "description": {
            "content": "Test API performance and load handling",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "394faad6-2f0f-430d-88a4-48b8c1661ad0",
              "name": "Response Time Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "21c80a85-0e14-46fd-b726-fbc5d4c7c333",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('API responds successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "de8139d3-fa3b-4876-88af-63f3dfc53931"
                  }
                }
              ]
            },
            {
              "id": "c045524b-399e-40ee-9a55-a1a8db3aa3a7",
              "name": "Concurrent Request Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5eac0560-92bc-4086-ba20-f09e8065d11a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response structure is consistent', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "72ebceda-f1de-46d5-b625-ecdfee66d66a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe449f35-bf43-4e40-8a1f-360cff69ee5d",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "17c54a2b-57a2-4e60-adad-16b0e8e32acf",
          "scriptId": "5eac0560-92bc-4086-ba20-f09e8065d11a",
          "execution": "72ebceda-f1de-46d5-b625-ecdfee66d66a"
        }
      }
    ],
    "error": null
  }
}