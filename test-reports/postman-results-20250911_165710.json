{
  "collection": {
    "item": [
      {
        "id": "7ed01334-0a44-4bb8-a934-fe4155d182a9",
        "name": "üè• System Health & Infrastructure",
        "description": {
          "content": "Test system health, CORS, and basic connectivity",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "813954a3-7627-4e2d-bdcf-e32103a0d60c",
            "name": "API Health Check",
            "request": {
              "description": {
                "content": "Verify API is running and healthy",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0861c49f-dffe-49f0-8d82-5f8bea878553",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "",
                    "pm.test('Response has correct headers', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                  ],
                  "_lastExecutionId": "08353252-84b5-4fbf-9e59-64fd89aae830"
                }
              }
            ]
          },
          {
            "id": "ffed7153-48c8-4635-82b1-2448071b4d45",
            "name": "API Documentation/OpenAPI",
            "request": {
              "url": {
                "path": [
                  "docs"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9ca5df38-50e4-4097-92d7-ac2f1e60c553",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API documentation is accessible', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "e0531b2c-e668-4ac5-8364-8a696668c802"
                }
              }
            ]
          },
          {
            "id": "22e5a1f4-79df-4fbd-9906-721cc8effeed",
            "name": "CORS Preflight Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Origin",
                  "value": "{{frontend_url}}"
                },
                {
                  "key": "Access-Control-Request-Method",
                  "value": "POST"
                },
                {
                  "key": "Access-Control-Request-Headers",
                  "value": "Content-Type,Authorization"
                }
              ],
              "method": "OPTIONS"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5c6a71c8-d5cc-49d3-a152-269bf094814c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('CORS headers are present', function () {",
                    "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                    "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                    "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                    "});"
                  ],
                  "_lastExecutionId": "475ce112-a4e6-4341-b068-386cad545cf0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
        "name": "üîê Authentication & Authorization",
        "description": {
          "content": "Complete authentication flow testing",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
            "name": "User Registration",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Registration successful or user exists', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.test('Response contains user data', function () {",
                    "        pm.expect(response).to.have.property('user');",
                    "        pm.expect(response.user).to.have.property('email');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                }
              }
            ]
          },
          {
            "id": "1a754dc9-f335-40bb-94da-781041750c52",
            "name": "User Login",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response contains tokens', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('access_token');",
                    "    pm.expect(response).to.have.property('refresh_token');",
                    "    pm.expect(response).to.have.property('user');",
                    "});",
                    "",
                    "// Store tokens for subsequent requests",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                    "    pm.collectionVariables.set('user_id', response.user.id);",
                    "}"
                  ],
                  "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                }
              }
            ]
          },
          {
            "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
            "name": "Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "me"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Profile retrieval successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Profile contains user data', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('email');",
                    "    pm.expect(response).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                }
              }
            ]
          },
          {
            "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
            "name": "Token Refresh",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "refresh"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Token refresh successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "if (pm.response.code === 200) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('auth_token', response.access_token);",
                    "}"
                  ],
                  "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                }
              }
            ]
          },
          {
            "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Logout successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
        "name": "üë• Client Management CRUD",
        "description": {
          "content": "Complete client management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
            "name": "Create Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('client_id', response.id);",
                    "    ",
                    "    pm.test('Client data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('email');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                }
              }
            ]
          },
          {
            "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
            "name": "Get All Clients",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get clients successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                }
              }
            ]
          },
          {
            "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
            "name": "Get Client by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get client by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Client data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                }
              }
            ]
          },
          {
            "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
            "name": "Update Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "});"
                  ],
                  "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                }
              }
            ]
          },
          {
            "id": "d2819278-b442-4de3-9403-a96ca4010478",
            "name": "Delete Client",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "{{client_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Client deletion successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
        "name": "ü§ñ Chatbot Management CRUD",
        "description": {
          "content": "Complete chatbot management operations",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
            "name": "Create Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('chatbot_id', response.id);",
                    "    ",
                    "    pm.test('Chatbot data is correct', function () {",
                    "        pm.expect(response).to.have.property('name');",
                    "        pm.expect(response).to.have.property('personality');",
                    "        pm.expect(response).to.have.property('id');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                }
              }
            ]
          },
          {
            "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
            "name": "Get All Chatbots",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbots successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                }
              }
            ]
          },
          {
            "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
            "name": "Get Chatbot by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get chatbot by ID successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Chatbot data is complete', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('id');",
                    "    pm.expect(response).to.have.property('name');",
                    "    pm.expect(response).to.have.property('personality');",
                    "});"
                  ],
                  "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                }
              }
            ]
          },
          {
            "id": "f26048d9-f394-4867-920c-eef776290acb",
            "name": "Update Chatbot",
            "request": {
              "url": {
                "path": [
                  "api",
                  "chatbots",
                  "{{chatbot_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Chatbot update successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Updated data is reflected', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.name).to.include('Updated');",
                    "    pm.expect(response.personality).to.eql('professional');",
                    "});"
                  ],
                  "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
        "name": "üí¨ Chat & Conversation Management",
        "description": {
          "content": "Test chat functionality and conversation management",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
            "name": "Start Conversation",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation creation successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "if (pm.response.code === 201) {",
                    "    const response = pm.response.json();",
                    "    pm.collectionVariables.set('conversation_id', response.id);",
                    "    ",
                    "    pm.test('Conversation data is correct', function () {",
                    "        pm.expect(response).to.have.property('id');",
                    "        pm.expect(response).to.have.property('chatbot_id');",
                    "        pm.expect(response).to.have.property('messages');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                }
              }
            ]
          },
          {
            "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
            "name": "Send Message",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}",
                  "messages"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Message sent successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Bot response received', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('bot_response');",
                    "    pm.expect(response.bot_response).to.be.a('string');",
                    "});"
                  ],
                  "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                }
              }
            ]
          },
          {
            "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
            "name": "Get Conversation History",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations",
                  "{{conversation_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation history retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Messages are present', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('messages');",
                    "    pm.expect(response.messages).to.be.an('array');",
                    "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                }
              }
            ]
          },
          {
            "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
            "name": "Get All Conversations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Get conversations successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "32eaa75b-af86-428f-8e7a-2a0bf9d9b073",
        "name": "üìä Analytics & Reporting",
        "description": {
          "content": "Test analytics and reporting endpoints",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "978e2489-d199-4896-abb6-adf496cffed2",
            "name": "Get Dashboard Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Analytics data retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics contains key metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('total_conversations');",
                    "    pm.expect(response).to.have.property('active_chatbots');",
                    "    pm.expect(response).to.have.property('total_clients');",
                    "});"
                  ],
                  "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
                }
              }
            ]
          },
          {
            "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
            "name": "Get Conversation Analytics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "conversations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "period",
                    "value": "7d"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Conversation analytics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Analytics data is structured', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
                }
              }
            ]
          },
          {
            "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
            "name": "Get Performance Metrics",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "performance"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Performance metrics retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Performance data contains metrics', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('response_time');",
                    "    pm.expect(response).to.have.property('success_rate');",
                    "});"
                  ],
                  "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "389b0487-e729-4b30-94f4-0acbb10695ac",
        "name": "üîÑ Error Handling & Edge Cases",
        "description": {
          "content": "Test error scenarios and edge cases",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
            "name": "Unauthorized Access Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized access blocked', function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test('Error message is informative', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
                }
              }
            ]
          },
          {
            "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
            "name": "Invalid Token Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer invalid-token-12345"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid token rejected', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
                }
              }
            ]
          },
          {
            "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
            "name": "Non-existent Resource Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients",
                  "99999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Non-existent resource returns 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error message is clear', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
                }
              }
            ]
          },
          {
            "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
            "name": "Invalid Data Format Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f0e1d26d-3eaf-4906-8ab2-a14e90c8ecfb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid data rejected', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                    "});",
                    "",
                    "pm.test('Validation errors provided', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('detail');",
                    "});"
                  ],
                  "_lastExecutionId": "2bbb6424-dbf0-48b9-8cfb-58cf37011c73"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3f2d8307-3ccd-43dc-9235-b73db6ca9977",
        "name": "‚ö° Performance & Load Tests",
        "description": {
          "content": "Test API performance and load handling",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c09bf8f5-f62f-4f2c-801c-2d870abb59a6",
            "name": "Response Time Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "clients"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e5887167-8c07-4eb3-a9d7-b6680c7ad965",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Response time is acceptable', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "",
                    "pm.test('API responds successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "7379499a-4d3a-4609-9df9-25289e1944a0"
                }
              }
            ]
          },
          {
            "id": "706e7f4d-25d6-4c12-be0c-972f6456b590",
            "name": "Concurrent Request Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d33ef61b-f50c-44e7-8bde-412dbb43993d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles concurrent requests', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response structure is consistent', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "5808f817-58e7-4b88-8c97-1cae63c14112"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "950e13bb-54dc-43b6-9c15-49428a41836e",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "// Add any global setup here",
            "console.log('Running test:', pm.info.requestName);"
          ],
          "_lastExecutionId": "21926962-4cb4-4730-8667-c591cd187d4c"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "2db15605-cc08-4625-b482-a7ccd3a27bf5",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Status code is not 5xx', function () {",
            "    pm.expect(pm.response.code).to.be.below(500);",
            "});",
            "",
            "pm.test('Response time is reasonable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});"
          ],
          "_lastExecutionId": "a2e14e58-fb5b-403e-9a71-4e0967934984"
        }
      }
    ],
    "variable": [
      {
        "description": {
          "content": "API base URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8002",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Frontend URL",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:3002",
        "key": "frontend_url"
      },
      {
        "description": {
          "content": "JWT access token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "description": {
          "content": "JWT refresh token",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "user_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "client_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "chatbot_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "conversation_id"
      },
      {
        "type": "string",
        "value": "testuser@pixel.ai",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "TestPass123!",
        "key": "test_password"
      }
    ],
    "info": {
      "_postman_id": "955f3a6c-57b5-494c-86dc-0ceb83ef1bf1",
      "name": "Pixel-AI-Creator Complete API Test Suite",
      "version": {
        "raw": "3.0.0",
        "major": 3,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "3.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing covering all endpoints, authentication, CRUD operations, error handling, and integration scenarios",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "5ca146d8-415b-4526-8d57-3a2efdd96095",
    "values": []
  },
  "globals": {
    "id": "38193695-7f4c-46f1-a66d-9589ee40fef0",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 90,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 30,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 111,
        "pending": 0,
        "failed": 38
      },
      "testScripts": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 30,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 11.6,
      "responseMin": 2,
      "responseMax": 119,
      "responseSd": 21.64347476723642,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1757606292012,
      "completed": 1757606308407
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 30,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "45f1457a-0dc2-43c5-9a4e-05e34a49fc86",
          "httpRequestId": "80ef6daa-3681-4b13-9ef2-94e2fc0ae67f"
        },
        "item": {
          "id": "813954a3-7627-4e2d-bdcf-e32103a0d60c",
          "name": "API Health Check",
          "request": {
            "description": {
              "content": "Verify API is running and healthy",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0861c49f-dffe-49f0-8d82-5f8bea878553",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response has correct headers', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});"
                ],
                "_lastExecutionId": "08353252-84b5-4fbf-9e59-64fd89aae830"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verify API is running and healthy",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "21693737-621b-4353-8d90-47b5fea8f196",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5280862e-d876-4546-915d-23247bbdf874",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "49"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              112,
              105,
              120,
              101,
              108,
              45,
              97,
              105,
              45,
              99,
              114,
              101,
              97,
              116,
              111,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 34,
          "responseSize": 49
        },
        "id": "813954a3-7627-4e2d-bdcf-e32103a0d60c",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API is healthy",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has correct headers",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a06f89fd-b44f-4808-93e6-40870c62f19b",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9e3851ec-e3d1-46b2-a3a2-0f26fe1f9d35"
        },
        "item": {
          "id": "ffed7153-48c8-4635-82b1-2448071b4d45",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ca5df38-50e4-4097-92d7-ac2f1e60c553",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "e0531b2c-e668-4ac5-8364-8a696668c802"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "docs"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dcb4dc48-ac43-4d8c-97c9-fd49c7eadcc5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dd49b977-ace1-421d-82a6-b121a1e34c71",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "ffed7153-48c8-4635-82b1-2448071b4d45",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "API documentation is accessible",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "API documentation is accessible",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5969c7bd-4cb5-4ac4-8017-66f00c05da3b",
          "length": 30,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4f810d98-627b-4de0-b6cb-97a70efae69f"
        },
        "item": {
          "id": "22e5a1f4-79df-4fbd-9906-721cc8effeed",
          "name": "CORS Preflight Check",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Origin",
                "value": "{{frontend_url}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type,Authorization"
              }
            ],
            "method": "OPTIONS"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5c6a71c8-d5cc-49d3-a152-269bf094814c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('CORS headers are present', function () {",
                  "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                  "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                  "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                  "});"
                ],
                "_lastExecutionId": "475ce112-a4e6-4341-b068-386cad545cf0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "Access-Control-Request-Method",
              "value": "POST"
            },
            {
              "key": "Access-Control-Request-Headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7c7fe21c-f250-454b-97a8-9a5a633782de",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "OPTIONS"
        },
        "response": {
          "id": "345c22ec-7ad9-4006-8851-c1840e394ee8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-methods",
              "value": "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
            },
            {
              "key": "access-control-max-age",
              "value": "600"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            },
            {
              "key": "access-control-allow-origin",
              "value": "http://localhost:3002"
            },
            {
              "key": "access-control-allow-headers",
              "value": "Content-Type,Authorization"
            },
            {
              "key": "content-length",
              "value": "2"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              79,
              75
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 2
        },
        "id": "22e5a1f4-79df-4fbd-9906-721cc8effeed",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "CORS headers are present",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2ec07df8-0ef3-471c-a31c-2f19dc505676",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7b642466-e614-42a6-ae74-681f5c152641"
        },
        "item": {
          "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a4238cc-344e-4785-93ba-1f4e4c9e4f1a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "116",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
          }
        },
        "response": {
          "id": "b0b20677-e43e-4c04-a20e-a64630878cef",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "467"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              117,
              115,
              101,
              114,
              64,
              112,
              105,
              120,
              101,
              108,
              46,
              97,
              105,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              80,
              97,
              115,
              115,
              49,
              50,
              51,
              33,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              115,
              101,
              114,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 40,
          "responseSize": 467
        },
        "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Registration successful or user exists",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Registration successful or user exists",
              "message": "expected 422 to be one of [ 201, 400, 409 ]",
              "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2ee764c-d7f1-4a9e-8ebc-3e09cc546dac",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "55a56d45-9b03-42c4-ba33-18cc58f71444"
        },
        "item": {
          "id": "1a754dc9-f335-40bb-94da-781041750c52",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5eef09a9-4c2c-43b9-bf40-0e0b4c04799a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testuser@pixel.ai\",\n  \"password\": \"TestPass123!\"\n}"
          }
        },
        "response": {
          "id": "421b0422-0335-4272-bd8d-5ce7de469dc2",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "32"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 119,
          "responseSize": 32
        },
        "id": "1a754dc9-f335-40bb-94da-781041750c52",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response contains tokens",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains tokens",
              "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
              "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "55825b3d-55c8-4311-a958-9ef49ec7bd71",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "97ddc049-a58d-4492-aabc-6d1519a2a154"
        },
        "item": {
          "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4ce0bd9d-5df1-4056-b24e-efcae8a5922f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f3b2ad9f-efb6-4d84-87fd-aebbe1ef4cf6",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 22
        },
        "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Profile retrieval successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Profile retrieval successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Profile contains user data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Profile contains user data",
              "message": "expected { detail: 'Not Found' } to have property 'email'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f06da12d-2edf-406d-af94-fdea2c75c564",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "645ea218-a63f-4e45-8ef0-1afe2341cf86"
        },
        "item": {
          "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "refresh"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "227ba4af-1514-4a33-9112-07bec10f0a81",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "25",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"refresh_token\": \"\"\n}"
          }
        },
        "response": {
          "id": "aec91112-3f1c-4e5a-9e6b-820cb86fd8c0",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Token refresh successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token refresh successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "944d8725-c060-4f53-b913-9f7ed766f39f",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ddc1aa1e-0e5e-419e-bc07-19720d50fd9b"
        },
        "item": {
          "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4104f8ac-375f-4470-b6cc-06e05eba7bfd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "52b484aa-e099-4300-b77f-dd5d196ab32c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 22
        },
        "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Logout successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logout successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2acc617-1a3d-4401-84d2-c07be8507735",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "538aa377-84ff-4150-8c86-161767da6cbb"
        },
        "item": {
          "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "764d4858-490d-41a8-b982-bc26044db8c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "213",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
          }
        },
        "response": {
          "id": "687cae10-c326-4b07-8073-48ff2d28fa06",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "68"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 68
        },
        "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client creation successful",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a8f5871a-2f5e-4a1e-ba0b-eb0d18ea1b15",
          "length": 30,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "449c4197-7494-4dab-b175-815060f3ed77"
        },
        "item": {
          "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
          "name": "Get All Clients",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get clients successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95fa35c2-79d0-4b66-88d7-e893abd74285",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d8708019-a099-4a57-b42f-e4974e57d5ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 2748
        },
        "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get clients successful",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9f74793a-1bfb-468d-94be-d220ce73405f",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fd706988-b0a4-4259-a9a4-09a15bf36c1f"
        },
        "item": {
          "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8da272ee-7acf-43ed-9a21-adb897636758",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c9dddb75-89d2-48e8-b895-e932842c3373",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 30
        },
        "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get client by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get client by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Client data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Client data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "757b68f3-fdb4-4688-b865-ba7724ed37b3",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68e26e68-1cf5-4eec-b7b7-44137c966fb6"
        },
        "item": {
          "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2969a6ec-976e-49fc-819b-428d9f51caed",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "188",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
          }
        },
        "response": {
          "id": "a9f1191d-529d-4b80-8dad-5f8fb5803541",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:18 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5e14ab4d-d4ad-457b-9633-746b2e47b568",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "21c08806-d8f2-47f5-9603-81999f9a7483"
        },
        "item": {
          "id": "d2819278-b442-4de3-9403-a96ca4010478",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04b7e3fc-9dfb-4268-998e-55f11d27e8bc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "112b92c4-1737-43e1-bf5e-899f77e1012b",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:18 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 31
        },
        "id": "d2819278-b442-4de3-9403-a96ca4010478",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Client deletion successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Client deletion successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4518f2c1-dae7-46e2-9abb-a72eddde4691",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2772cc7d-a11d-4750-be3a-02fa4aed2cca"
        },
        "item": {
          "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "105176be-0995-41a0-952e-bfd34aa5df3b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "217",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "c9676e51-288a-44b8-bf94-bc22d4237ec9",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 30
        },
        "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1e3f1a38-b731-4fb7-813e-044814a9b87a",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb3e610f-cda3-463a-a5e6-19861bd37fec"
        },
        "item": {
          "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a6cc3072-3609-42e7-94f8-d3d49d7a5855",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b3420ec3-de26-41ef-9508-a0f523a47652",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 30
        },
        "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbots successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbots successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9acc37f7-2b1e-4dee-a63f-5e0c6eaf624e",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "debd98db-d7c6-4153-a9ae-98863397a318"
        },
        "item": {
          "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9576cdd0-24e2-4785-8c29-1815bdb6bc81",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5daab25c-3544-4b0c-94cc-86d4a5caac58",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get chatbot by ID successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get chatbot by ID successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Chatbot data is complete",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Chatbot data is complete",
              "message": "expected { detail: 'Not authenticated' } to have property 'id'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "13ce817b-9ab3-4c63-a8d1-8f4f6dd5ee07",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "447f38a8-f520-457a-95d1-0225c4e98931"
        },
        "item": {
          "id": "f26048d9-f394-4867-920c-eef776290acb",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "chatbots",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c00635b7-4a34-4968-8bec-5a0a27d28549",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "230",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
          }
        },
        "response": {
          "id": "ac23375c-d792-4ab5-ac49-77a15c324518",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 31
        },
        "id": "f26048d9-f394-4867-920c-eef776290acb",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Chatbot update successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Chatbot update successful",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Updated data is reflected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Updated data is reflected",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "19ccd309-568e-4d1b-b3ae-bc7201547cdd",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "598262bc-d80a-4606-a2e6-3aa812e89d28"
        },
        "item": {
          "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "901a4a7c-8a30-424a-a113-9da9e6a20bd9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "90",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chatbot_id\": \"\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "caa922dd-7d9f-4abd-9354-f104a358516a",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation creation successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation creation successful",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1719e328-6c03-43bf-b1df-7bb368d1bc16",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cdf34d0e-173b-4937-a0d2-f7f1af9f022e"
        },
        "item": {
          "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              "",
              "messages"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "89e9ad80-0ef8-42bc-a4a6-0b48e4e0b93a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "78",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"\"\n}"
          }
        },
        "response": {
          "id": "1bba9ea4-2911-485e-899b-1352e07ad421",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Message sent successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Message sent successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Bot response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Bot response received",
              "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d61a62a4-4fb0-45b7-8321-fb63d4acb299",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "50c52bae-452c-4a81-94b6-6ce1fd24e4d0"
        },
        "item": {
          "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a993031a-de1a-4907-ba59-6c42a8540ce2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "175458a9-bc7f-41c3-a1fd-8e8fc2bc56d4",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 30
        },
        "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation history retrieved",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Messages are present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Messages are present",
              "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d0f2514e-df7d-4866-9570-32e4cd2d22c7",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6e2c6c46-2513-494b-b69c-0a43261c762d"
        },
        "item": {
          "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "23f0ff63-9439-4e1e-8635-eb93d150f1e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f5616b11-74ec-467c-9ae5-86d05b18ebda",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 30
        },
        "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Get conversations successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Get conversations successful",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response is array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is array",
              "message": "expected { detail: 'Not authenticated' } to be an array",
              "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cc03ca23-696f-4501-ad10-ad3f3a08d449",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b3c75370-4096-4d49-9178-a6dd57003e27"
        },
        "item": {
          "id": "978e2489-d199-4896-abb6-adf496cffed2",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce1bb1d5-608c-4826-8cf0-f4865c83db8c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5d356cd6-e6f9-48c2-8852-27363adb7916",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:23 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "978e2489-d199-4896-abb6-adf496cffed2",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Analytics data retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Analytics data retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Analytics contains key metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Analytics contains key metrics",
              "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c13e4c8a-b1a2-4eed-a84d-d6edba8d7a71",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f5a1ea85-9a72-4d28-9981-78d28b5b6236"
        },
        "item": {
          "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "conversations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "period",
                "value": "7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cf924c3a-e25f-415c-bd92-91fbc841291f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0102ba43-f1f0-43e1-ac00-521dbfab760c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:23 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Conversation analytics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Conversation analytics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Analytics data is structured",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "77b9c34c-3e43-4924-b072-c345fdc328ae",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "327fb47c-4b06-4565-ac59-614dc49ef46d"
        },
        "item": {
          "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "performance"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09bf8f30-ec78-4715-8caf-a0466c31c7a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c35b05bd-13f4-4360-9572-665b00aa4bff",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Performance metrics retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Performance metrics retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Performance data contains metrics",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Performance data contains metrics",
              "message": "expected { detail: 'Not Found' } to have property 'response_time'",
              "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5c5964b7-97d7-471a-b811-706d712fddd5",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc028ee4-56b5-4f52-b05a-7d73abc35652"
        },
        "item": {
          "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6a3aeea9-3e8f-4699-8973-9bf043a98d84",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2d36ec93-4201-4188-816a-9363fa6db2d5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 2748
        },
        "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Unauthorized access blocked",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unauthorized access blocked",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Error message is informative",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Error message is informative",
              "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
              "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d80d9017-09ce-4730-89d9-f63805779b4c",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a029f6de-17cc-442c-acec-f527624ce7c0"
        },
        "item": {
          "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer invalid-token-12345"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "61505757-8d1e-44c5-bffc-3bb81eb88357",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0d5651d0-a670-496a-bbb7-7f9742065cb6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 2748
        },
        "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid token rejected",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Invalid token rejected",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "76454b91-279c-4455-b1d5-058cdaed2fb8",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "03e2ed37-d4ce-409c-bc82-d17c342d9821"
        },
        "item": {
          "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients",
              "99999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1d6d949-c0f1-45a8-9d31-542f584b11a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f8c46418-8f72-49a4-a2e7-62c5b003f717",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "30"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 30
        },
        "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Non-existent resource returns 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Non-existent resource returns 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Error message is clear",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "16d31444-ef43-493f-8e6e-86d10fcdc264",
          "length": 30,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fa93543c-03c1-4f03-b058-0c4595ff8639"
        },
        "item": {
          "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
          "name": "Invalid Data Format Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0e1d26d-3eaf-4906-8ab2-a14e90c8ecfb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Validation errors provided', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "2bbb6424-dbf0-48b9-8cfb-58cf37011c73"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e259ccbf-2331-4d25-abb3-18c7a4c83e34",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
          }
        },
        "response": {
          "id": "78445441-d33d-40f7-a945-c579d4c6faa4",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "385"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              44,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              34,
              58,
              34,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              100,
              97,
              116,
              97,
              34,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              95,
              102,
              105,
              101,
              108,
              100,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              101,
              114,
              114,
              111,
              114,
              115,
              46,
              112,
              121,
              100,
              97,
              110,
              116,
              105,
              99,
              46,
              100,
              101,
              118,
              47,
              50,
              46,
              53,
              47,
              118,
              47,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 385
        },
        "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Invalid data rejected",
            "skipped": false
          },
          {
            "assertion": "Validation errors provided",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "111c3bb7-9351-43b3-8077-d930c3b70a8b",
          "length": 30,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b0faa5a4-fe0f-4fe9-834b-a4f23260181d"
        },
        "item": {
          "id": "c09bf8f5-f62f-4f2c-801c-2d870abb59a6",
          "name": "Response Time Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5887167-8c07-4eb3-a9d7-b6680c7ad965",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "7379499a-4d3a-4609-9df9-25289e1944a0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "clients"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f2c01b4c-6068-4640-b1ed-605c5650b8b1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a07d587e-69be-4ff1-b8f1-23a70bc0247a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "2748"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              54,
              58,
              52,
              56,
              46,
              55,
              49,
              53,
              48,
              55,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              53,
              56,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              51,
              53,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              49,
              55,
              58,
              52,
              56,
              46,
              55,
              50,
              51,
              57,
              52,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              49,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              50,
              58,
              53,
              55,
              46,
              51,
              53,
              50,
              50,
              54,
              57,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              54,
              50,
              57,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              51,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              53,
              48,
              46,
              55,
              54,
              48,
              56,
              52,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              55,
              52,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              52,
              54,
              46,
              55,
              54,
              52,
              51,
              57,
              53,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              49,
              55,
              53,
              55,
              53,
              56,
              56,
              56,
              49,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              52,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              49,
              58,
              48,
              54,
              58,
              53,
              49,
              46,
              50,
              48,
              54,
              56,
              53,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              108,
              105,
              101,
              110,
              116,
              64,
              116,
              101,
              115,
              116,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              67,
              111,
              109,
              112,
              97,
              110,
              121,
              32,
              73,
              110,
              99,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              45,
              53,
              53,
              53,
              45,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              55,
              34,
              44,
              34,
              105,
              110,
              100,
              117,
              115,
              116,
              114,
              121,
              34,
              58,
              34,
              84,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              116,
              119,
              105,
              116,
              116,
              101,
              114,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              115,
              116,
              97,
              103,
              114,
              97,
              109,
              95,
              104,
              97,
              110,
              100,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              105,
              110,
              107,
              101,
              100,
              105,
              110,
              95,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              111,
              99,
              105,
              97,
              108,
              95,
              109,
              101,
              100,
              105,
              97,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              49,
              84,
              49,
              53,
              58,
              53,
              52,
              58,
              52,
              52,
              46,
              49,
              48,
              57,
              48,
              53,
              57,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 2748
        },
        "id": "c09bf8f5-f62f-4f2c-801c-2d870abb59a6",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "API responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98e09ee1-af97-4ed4-b501-dd250dbe3081",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "35f942e1-d5d8-421c-80dd-50aa75e49773"
        },
        "item": {
          "id": "706e7f4d-25d6-4c12-be0c-972f6456b590",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d33ef61b-f50c-44e7-8bde-412dbb43993d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "5808f817-58e7-4b88-8c97-1cae63c14112"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8002",
            "path": [
              "api",
              "analytics",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8378b3fb-bdaa-4133-af2c-cb2b2702e819",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8002",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f7462e18-a199-43f2-9fb0-bfd55972fdc5",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 11 Sep 2025 15:58:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 22
        },
        "id": "706e7f4d-25d6-4c12-be0c-972f6456b590",
        "assertions": [
          {
            "assertion": "Status code is not 5xx",
            "skipped": false
          },
          {
            "assertion": "Response time is reasonable",
            "skipped": false
          },
          {
            "assertion": "Handles concurrent requests",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles concurrent requests",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "Response structure is consistent",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 12526
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "API documentation is accessible",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "80a0a7d99e1112daaa35c2b6420d67a9",
          "id": "6c291beb-e0ec-4951-ada6-b1bdf9ddcad0",
          "timestamp": 1757606293162,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ffed7153-48c8-4635-82b1-2448071b4d45",
          "name": "API Documentation/OpenAPI",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ca5df38-50e4-4097-92d7-ac2f1e60c553",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API documentation is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "e0531b2c-e668-4ac5-8364-8a696668c802"
              }
            }
          ]
        },
        "parent": {
          "id": "7ed01334-0a44-4bb8-a934-fe4155d182a9",
          "name": "üè• System Health & Infrastructure",
          "description": {
            "content": "Test system health, CORS, and basic connectivity",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "813954a3-7627-4e2d-bdcf-e32103a0d60c",
              "name": "API Health Check",
              "request": {
                "description": {
                  "content": "Verify API is running and healthy",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0861c49f-dffe-49f0-8d82-5f8bea878553",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API is healthy', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test('Response has correct headers', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "08353252-84b5-4fbf-9e59-64fd89aae830"
                  }
                }
              ]
            },
            {
              "id": "ffed7153-48c8-4635-82b1-2448071b4d45",
              "name": "API Documentation/OpenAPI",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ca5df38-50e4-4097-92d7-ac2f1e60c553",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('API documentation is accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "e0531b2c-e668-4ac5-8364-8a696668c802"
                  }
                }
              ]
            },
            {
              "id": "22e5a1f4-79df-4fbd-9906-721cc8effeed",
              "name": "CORS Preflight Check",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Origin",
                    "value": "{{frontend_url}}"
                  },
                  {
                    "key": "Access-Control-Request-Method",
                    "value": "POST"
                  },
                  {
                    "key": "Access-Control-Request-Headers",
                    "value": "Content-Type,Authorization"
                  }
                ],
                "method": "OPTIONS"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5c6a71c8-d5cc-49d3-a152-269bf094814c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('CORS headers are present', function () {",
                      "    pm.response.to.have.header('Access-Control-Allow-Origin');",
                      "    pm.response.to.have.header('Access-Control-Allow-Methods');",
                      "    pm.response.to.have.header('Access-Control-Allow-Headers');",
                      "});"
                    ],
                    "_lastExecutionId": "475ce112-a4e6-4341-b068-386cad545cf0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a06f89fd-b44f-4808-93e6-40870c62f19b",
          "length": 30,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9e3851ec-e3d1-46b2-a3a2-0f26fe1f9d35",
          "scriptId": "9ca5df38-50e4-4097-92d7-ac2f1e60c553",
          "execution": "e0531b2c-e668-4ac5-8364-8a696668c802"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Registration successful or user exists",
          "message": "expected 422 to be one of [ 201, 400, 409 ]",
          "stack": "AssertionError: expected 422 to be one of [ 201, 400, 409 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "f69628823c5cd7f928373b07f566c976",
          "id": "579077b2-1944-49dc-90c5-02347ad9d15f",
          "timestamp": 1757606294279,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
          "name": "User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful or user exists', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(response).to.have.property('user');",
                  "        pm.expect(response.user).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2ec07df8-0ef3-471c-a31c-2f19dc505676",
          "length": 30,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7b642466-e614-42a6-ae74-681f5c152641",
          "scriptId": "010ba2fd-ecc1-46da-8f53-c3962257870c",
          "execution": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "bf2ffec64b8236201754c4c1c7d1ea04",
          "id": "1ea20313-a8ab-40e9-9641-4961eecd40a0",
          "timestamp": 1757606294933,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1a754dc9-f335-40bb-94da-781041750c52",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2ee764c-d7f1-4a9e-8ebc-3e09cc546dac",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "55a56d45-9b03-42c4-ba33-18cc58f71444",
          "scriptId": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
          "execution": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains tokens",
          "message": "expected { detail: 'Invalid credentials' } to have property 'access_token'",
          "stack": "AssertionError: expected { detail: 'Invalid credentials' } to have property 'access_token'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "65c42e8b12b5e4e51c4e835482bcddd8",
          "id": "75d5d5f8-5b6c-4345-99ec-4a8b91ba5ef6",
          "timestamp": 1757606294935,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1a754dc9-f335-40bb-94da-781041750c52",
          "name": "User Login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tokens', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('user');",
                  "});",
                  "",
                  "// Store tokens for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "}"
                ],
                "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2ee764c-d7f1-4a9e-8ebc-3e09cc546dac",
          "length": 30,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "55a56d45-9b03-42c4-ba33-18cc58f71444",
          "scriptId": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
          "execution": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Profile retrieval successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "a7ed004296ef62f65ad487070dba0be4",
          "id": "ecc7efbe-7134-480a-a06b-a828fbeb7f4b",
          "timestamp": 1757606295467,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "55825b3d-55c8-4311-a958-9ef49ec7bd71",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "97ddc049-a58d-4492-aabc-6d1519a2a154",
          "scriptId": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
          "execution": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Profile contains user data",
          "message": "expected { detail: 'Not Found' } to have property 'email'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'email'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "8a63d3f10bcfccf73ca45c545ed6394e",
          "id": "9a8c85ae-b9df-43cc-ba0f-81eb544e7940",
          "timestamp": 1757606295468,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
          "name": "Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieval successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "55825b3d-55c8-4311-a958-9ef49ec7bd71",
          "length": 30,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "97ddc049-a58d-4492-aabc-6d1519a2a154",
          "scriptId": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
          "execution": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token refresh successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8dc8087685865bb2c9b0c357b3d9b3ef",
          "id": "b3f2d8ee-b2a6-451e-9dda-a7cbda94d8a2",
          "timestamp": 1757606296008,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
          "name": "Token Refresh",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "refresh"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.access_token);",
                  "}"
                ],
                "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f06da12d-2edf-406d-af94-fdea2c75c564",
          "length": 30,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "645ea218-a63f-4e45-8ef0-1afe2341cf86",
          "scriptId": "12b62e44-ef7e-494a-a52b-8b017b64d331",
          "execution": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logout successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "d9b01805b4dc8168cb7e835a2a713806",
          "id": "86ae6d8c-ffae-48ea-b506-db20a04ae4f0",
          "timestamp": 1757606296539,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
              }
            }
          ]
        },
        "parent": {
          "id": "cc57929c-18e6-4256-99f7-00f1e914c844",
          "name": "üîê Authentication & Authorization",
          "description": {
            "content": "Complete authentication flow testing",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "4a78c0bc-12f6-4d9d-92fc-29a29d92bbf8",
              "name": "User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"name\": \"Test User\",\n  \"company\": \"Test Company\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "010ba2fd-ecc1-46da-8f53-c3962257870c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Registration successful or user exists', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.test('Response contains user data', function () {",
                      "        pm.expect(response).to.have.property('user');",
                      "        pm.expect(response.user).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "45032f7a-4f69-4449-b995-c1af1ef2b54d"
                  }
                }
              ]
            },
            {
              "id": "1a754dc9-f335-40bb-94da-781041750c52",
              "name": "User Login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a32c457-d30a-45dc-beca-b62f7fbf0d97",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response contains tokens', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('access_token');",
                      "    pm.expect(response).to.have.property('refresh_token');",
                      "    pm.expect(response).to.have.property('user');",
                      "});",
                      "",
                      "// Store tokens for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "    pm.collectionVariables.set('refresh_token', response.refresh_token);",
                      "    pm.collectionVariables.set('user_id', response.user.id);",
                      "}"
                    ],
                    "_lastExecutionId": "fb12fd94-7e3d-446a-9e80-274eddcd68fd"
                  }
                }
              ]
            },
            {
              "id": "9f8a4f52-4922-4146-9fdd-e438d70ba624",
              "name": "Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68904ecf-d960-4e6d-97a3-bbe5b2edd38d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Profile retrieval successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Profile contains user data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "93f2d3c9-5210-4d14-be84-d67f2221afc8"
                  }
                }
              ]
            },
            {
              "id": "5067a87f-13d6-4845-ac99-3e10ddfcf73f",
              "name": "Token Refresh",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "refresh"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12b62e44-ef7e-494a-a52b-8b017b64d331",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Token refresh successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('auth_token', response.access_token);",
                      "}"
                    ],
                    "_lastExecutionId": "3e0831be-c9ea-484f-a194-3da0ef1c21fc"
                  }
                }
              ]
            },
            {
              "id": "35e0a658-17dc-4e16-920e-136f57d2aa2f",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "944d8725-c060-4f53-b913-9f7ed766f39f",
          "length": 30,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ddc1aa1e-0e5e-419e-bc07-19720d50fd9b",
          "scriptId": "c601e9e9-e08f-4aa3-828a-b2296eb39b4d",
          "execution": "0cb37f8e-8b87-4a0c-8372-311e5d73ac9d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client creation successful",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "17b17297b45d090fd11260c212b8b0da",
          "id": "f56798e8-5d6d-40d5-811d-7c833cbd0c10",
          "timestamp": 1757606297091,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
          "name": "Create Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('client_id', response.id);",
                  "    ",
                  "    pm.test('Client data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('email');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
              }
            }
          ]
        },
        "parent": {
          "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                  }
                }
              ]
            },
            {
              "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                  }
                }
              ]
            },
            {
              "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                  }
                }
              ]
            },
            {
              "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                  }
                }
              ]
            },
            {
              "id": "d2819278-b442-4de3-9403-a96ca4010478",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2acc617-1a3d-4401-84d2-c07be8507735",
          "length": 30,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "538aa377-84ff-4150-8c86-161767da6cbb",
          "scriptId": "623a54f2-a2e7-4c50-b2d5-645893aae582",
          "execution": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get client by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "96f625988eadbbd724a2a69338077272",
          "id": "c69bea11-06ab-4cf3-9acd-0e9eacf81109",
          "timestamp": 1757606298164,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
              }
            }
          ]
        },
        "parent": {
          "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                  }
                }
              ]
            },
            {
              "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                  }
                }
              ]
            },
            {
              "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                  }
                }
              ]
            },
            {
              "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                  }
                }
              ]
            },
            {
              "id": "d2819278-b442-4de3-9403-a96ca4010478",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9f74793a-1bfb-468d-94be-d220ce73405f",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fd706988-b0a4-4259-a9a4-09a15bf36c1f",
          "scriptId": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
          "execution": "2526b81c-019d-46e6-b7dc-966d873629cc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Client data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "f506310853bb6b97ed72870e4d92f793",
          "id": "7bb81255-cf5c-4320-9540-2bf4c2dc6a77",
          "timestamp": 1757606298165,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
          "name": "Get Client by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get client by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
              }
            }
          ]
        },
        "parent": {
          "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                  }
                }
              ]
            },
            {
              "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                  }
                }
              ]
            },
            {
              "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                  }
                }
              ]
            },
            {
              "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                  }
                }
              ]
            },
            {
              "id": "d2819278-b442-4de3-9403-a96ca4010478",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9f74793a-1bfb-468d-94be-d220ce73405f",
          "length": 30,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fd706988-b0a4-4259-a9a4-09a15bf36c1f",
          "scriptId": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
          "execution": "2526b81c-019d-46e6-b7dc-966d873629cc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "1cf5a2b583858a1135548ac38355999d",
          "id": "945f4a35-819e-4a68-ac51-973b3d330598",
          "timestamp": 1757606298697,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
              }
            }
          ]
        },
        "parent": {
          "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                  }
                }
              ]
            },
            {
              "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                  }
                }
              ]
            },
            {
              "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                  }
                }
              ]
            },
            {
              "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                  }
                }
              ]
            },
            {
              "id": "d2819278-b442-4de3-9403-a96ca4010478",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "757b68f3-fdb4-4688-b865-ba7724ed37b3",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68e26e68-1cf5-4eec-b7b7-44137c966fb6",
          "scriptId": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
          "execution": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "10d4a63b077a79561acdda3edff711c3",
          "id": "0f2430ce-9915-4382-b6f9-8b615c6ce5ea",
          "timestamp": 1757606298698,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
          "name": "Update Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "});"
                ],
                "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
              }
            }
          ]
        },
        "parent": {
          "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                  }
                }
              ]
            },
            {
              "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                  }
                }
              ]
            },
            {
              "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                  }
                }
              ]
            },
            {
              "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                  }
                }
              ]
            },
            {
              "id": "d2819278-b442-4de3-9403-a96ca4010478",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "757b68f3-fdb4-4688-b865-ba7724ed37b3",
          "length": 30,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "68e26e68-1cf5-4eec-b7b7-44137c966fb6",
          "scriptId": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
          "execution": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Client deletion successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "4493450e4c6607e1cae559563339502e",
          "id": "28352253-19cc-4e24-9b84-ef0057a9146a",
          "timestamp": 1757606299226,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d2819278-b442-4de3-9403-a96ca4010478",
          "name": "Delete Client",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "{{client_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Client deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9bd16b9f-9bbe-4240-b4a5-48d9a77e6b6f",
          "name": "üë• Client Management CRUD",
          "description": {
            "content": "Complete client management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "b828f452-75ac-47c2-b61a-03c1f8b92d13",
              "name": "Create Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Client Company\",\n  \"email\": \"client@testcompany.com\",\n  \"company\": \"Test Company Inc\",\n  \"description\": \"A test client for API testing\",\n  \"industry\": \"Technology\",\n  \"phone\": \"+1-555-123-4567\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623a54f2-a2e7-4c50-b2d5-645893aae582",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('client_id', response.id);",
                      "    ",
                      "    pm.test('Client data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('email');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dfd3dd59-de1b-40a8-a9a2-cc8c2c05ccaf"
                  }
                }
              ]
            },
            {
              "id": "d76aebac-5d1a-460a-b428-2f8416ad1443",
              "name": "Get All Clients",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d471dfcb-d13e-4f39-91bd-a71b9cbb592a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get clients successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "496bcd6a-dc5c-4e9e-b6b5-e25740b43191"
                  }
                }
              ]
            },
            {
              "id": "614775d2-4b94-4f3f-8a5f-701c54d07f94",
              "name": "Get Client by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e10d974-3ed8-44ef-a6a9-0353e06877ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get client by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Client data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "2526b81c-019d-46e6-b7dc-966d873629cc"
                  }
                }
              ]
            },
            {
              "id": "19cd0caa-ebf2-48e6-a3d0-87f5bc311b01",
              "name": "Update Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Client Company\",\n  \"email\": \"updated-client@testcompany.com\",\n  \"company\": \"Updated Test Company Inc\",\n  \"description\": \"An updated test client for API testing\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8550b645-431a-4366-ad55-a3ee99d6d3bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "});"
                    ],
                    "_lastExecutionId": "7d2b2d3a-26ce-4296-ac7d-53e0aa19b405"
                  }
                }
              ]
            },
            {
              "id": "d2819278-b442-4de3-9403-a96ca4010478",
              "name": "Delete Client",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "{{client_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9affde86-1084-4f63-a412-1526bb290ce7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Client deletion successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "d8c85fe0-a610-46e1-8f56-2879656159f4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e14ab4d-d4ad-457b-9633-746b2e47b568",
          "length": 30,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "21c08806-d8f2-47f5-9603-81999f9a7483",
          "scriptId": "9affde86-1084-4f63-a412-1526bb290ce7",
          "execution": "d8c85fe0-a610-46e1-8f56-2879656159f4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "eabef9a6ffb6400a330c2c368cf95d41",
          "id": "5e9e451b-2460-447a-a980-fa8338dc9eba",
          "timestamp": 1757606299771,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
          "name": "Create Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatbot_id', response.id);",
                  "    ",
                  "    pm.test('Chatbot data is correct', function () {",
                  "        pm.expect(response).to.have.property('name');",
                  "        pm.expect(response).to.have.property('personality');",
                  "        pm.expect(response).to.have.property('id');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4518f2c1-dae7-46e2-9abb-a72eddde4691",
          "length": 30,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2772cc7d-a11d-4750-be3a-02fa4aed2cca",
          "scriptId": "0b3487b8-e400-493b-8e52-53e58b00ae85",
          "execution": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbots successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "d6f39246dba8fe46523ad2aa2e14f725",
          "id": "bd479823-b2b1-4041-9577-cee40769db59",
          "timestamp": 1757606300308,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1e3f1a38-b731-4fb7-813e-044814a9b87a",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb3e610f-cda3-463a-a5e6-19861bd37fec",
          "scriptId": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
          "execution": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "1f5d4cced9d1d28e82c776848860bc18",
          "id": "c87ae159-67df-44de-97fb-36b88c176f00",
          "timestamp": 1757606300309,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
          "name": "Get All Chatbots",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbots successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1e3f1a38-b731-4fb7-813e-044814a9b87a",
          "length": 30,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb3e610f-cda3-463a-a5e6-19861bd37fec",
          "scriptId": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
          "execution": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get chatbot by ID successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "71ab0a54b29a62c80d33eb289ce0189b",
          "id": "0177e985-66cc-4181-8852-cbeb7af20dd4",
          "timestamp": 1757606300851,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9acc37f7-2b1e-4dee-a63f-5e0c6eaf624e",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "debd98db-d7c6-4153-a9ae-98863397a318",
          "scriptId": "f3663987-7289-4a47-af19-11c7525a22c2",
          "execution": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Chatbot data is complete",
          "message": "expected { detail: 'Not authenticated' } to have property 'id'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'id'\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "ad178618c7e67b96384574ed5a015906",
          "id": "feca3482-1556-4055-9c2e-3cc7db2c35e0",
          "timestamp": 1757606300853,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
          "name": "Get Chatbot by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get chatbot by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Chatbot data is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('personality');",
                  "});"
                ],
                "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9acc37f7-2b1e-4dee-a63f-5e0c6eaf624e",
          "length": 30,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "debd98db-d7c6-4153-a9ae-98863397a318",
          "scriptId": "f3663987-7289-4a47-af19-11c7525a22c2",
          "execution": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Chatbot update successful",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "b36693e3b0a6c2665778679f7cf89418",
          "id": "f8d1065a-4b42-472b-a01f-4bc1b8e7f216",
          "timestamp": 1757606301389,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f26048d9-f394-4867-920c-eef776290acb",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13ce817b-9ab3-4c63-a8d1-8f4f6dd5ee07",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "447f38a8-f520-457a-95d1-0225c4e98931",
          "scriptId": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
          "execution": "31241286-8c3f-43bf-8b7f-64e216712912"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Updated data is reflected",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "6605396d5dfa960f2df20e74ea117867",
          "id": "3c03e882-5972-4e76-a3d3-8db8329b7b38",
          "timestamp": 1757606301391,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f26048d9-f394-4867-920c-eef776290acb",
          "name": "Update Chatbot",
          "request": {
            "url": {
              "path": [
                "api",
                "chatbots",
                "{{chatbot_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chatbot update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated data is reflected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.include('Updated');",
                  "    pm.expect(response.personality).to.eql('professional');",
                  "});"
                ],
                "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
              }
            }
          ]
        },
        "parent": {
          "id": "5525acfe-ca1b-4b45-8ec5-53e8ad695f89",
          "name": "ü§ñ Chatbot Management CRUD",
          "description": {
            "content": "Complete chatbot management operations",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "75b2b586-b687-44c7-ba2f-b9d57915d913",
              "name": "Create Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Support Bot\",\n  \"description\": \"A test chatbot for customer support\",\n  \"personality\": \"helpful\",\n  \"type\": \"support\",\n  \"prompt\": \"You are a helpful customer support assistant.\",\n  \"client_id\": \"{{client_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b3487b8-e400-493b-8e52-53e58b00ae85",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('chatbot_id', response.id);",
                      "    ",
                      "    pm.test('Chatbot data is correct', function () {",
                      "        pm.expect(response).to.have.property('name');",
                      "        pm.expect(response).to.have.property('personality');",
                      "        pm.expect(response).to.have.property('id');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68ebddbf-b43c-4ed2-8aad-048fe25207c8"
                  }
                }
              ]
            },
            {
              "id": "29c0a79f-fd92-416a-a7a2-84982ec58c42",
              "name": "Get All Chatbots",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc9cba45-e38d-4a40-ae4c-f380e971d1e5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbots successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "aa67ef4f-eab8-4e9c-97cb-52e546370b36"
                  }
                }
              ]
            },
            {
              "id": "354a25c8-da59-4d32-a940-6f4cd38f5f63",
              "name": "Get Chatbot by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3663987-7289-4a47-af19-11c7525a22c2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get chatbot by ID successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Chatbot data is complete', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('personality');",
                      "});"
                    ],
                    "_lastExecutionId": "1ad53f73-1f6a-4168-b53a-fe9be06e06d4"
                  }
                }
              ]
            },
            {
              "id": "f26048d9-f394-4867-920c-eef776290acb",
              "name": "Update Chatbot",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "chatbots",
                    "{{chatbot_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Support Bot\",\n  \"description\": \"An updated test chatbot for customer support\",\n  \"personality\": \"professional\",\n  \"prompt\": \"You are a professional customer support assistant with updated capabilities.\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Chatbot update successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Updated data is reflected', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.name).to.include('Updated');",
                      "    pm.expect(response.personality).to.eql('professional');",
                      "});"
                    ],
                    "_lastExecutionId": "31241286-8c3f-43bf-8b7f-64e216712912"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "13ce817b-9ab3-4c63-a8d1-8f4f6dd5ee07",
          "length": 30,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "447f38a8-f520-457a-95d1-0225c4e98931",
          "scriptId": "a31a8ef7-0539-49bf-ab01-f0f5418a2788",
          "execution": "31241286-8c3f-43bf-8b7f-64e216712912"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation creation successful",
          "message": "expected response to have status code 201 but got 403",
          "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "5c86b0639aec75245af52f9fa7cf3615",
          "id": "0bfd5605-15fd-4855-a594-4791c59f5123",
          "timestamp": 1757606301921,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
          "name": "Start Conversation",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    ",
                  "    pm.test('Conversation data is correct', function () {",
                  "        pm.expect(response).to.have.property('id');",
                  "        pm.expect(response).to.have.property('chatbot_id');",
                  "        pm.expect(response).to.have.property('messages');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19ccd309-568e-4d1b-b3ae-bc7201547cdd",
          "length": 30,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "598262bc-d80a-4606-a2e6-3aa812e89d28",
          "scriptId": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
          "execution": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Message sent successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "3d3e25839ea629fc1e5d30f35a0cc7b5",
          "id": "8c8a2ed9-6da5-49a3-9df8-c98edcbfc636",
          "timestamp": 1757606302452,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1719e328-6c03-43bf-b1df-7bb368d1bc16",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cdf34d0e-173b-4937-a0d2-f7f1af9f022e",
          "scriptId": "0866a69a-68e3-4544-879a-8ac62609161a",
          "execution": "4bee2fde-611f-41c3-b041-4785fd0788a1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Bot response received",
          "message": "expected { detail: 'Not Found' } to have property 'bot_response'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'bot_response'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "e698891e922fd739547a86ca7fa54377",
          "id": "9a2ad86a-555d-4d9a-aef9-1c86215b612d",
          "timestamp": 1757606302453,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
          "name": "Send Message",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}",
                "messages"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Message sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bot response received', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('bot_response');",
                  "    pm.expect(response.bot_response).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1719e328-6c03-43bf-b1df-7bb368d1bc16",
          "length": 30,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cdf34d0e-173b-4937-a0d2-f7f1af9f022e",
          "scriptId": "0866a69a-68e3-4544-879a-8ac62609161a",
          "execution": "4bee2fde-611f-41c3-b041-4785fd0788a1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation history retrieved",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "53418adcf942bd6254463943052fc95c",
          "id": "296c0184-3ac1-41d4-9efb-56d39caf6320",
          "timestamp": 1757606302981,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d61a62a4-4fb0-45b7-8321-fb63d4acb299",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "50c52bae-452c-4a81-94b6-6ce1fd24e4d0",
          "scriptId": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
          "execution": "dd32933d-134a-4199-b73b-23e01a0305a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Messages are present",
          "message": "expected { detail: 'Not authenticated' } to have property 'messages'",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to have property 'messages'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "c3e00d9df1b4d1d196deb3dbea108533",
          "id": "b8e629d1-e0da-4640-9535-09cbc3212b6d",
          "timestamp": 1757606302982,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
          "name": "Get Conversation History",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations",
                "{{conversation_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Messages are present', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d61a62a4-4fb0-45b7-8321-fb63d4acb299",
          "length": 30,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "50c52bae-452c-4a81-94b6-6ce1fd24e4d0",
          "scriptId": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
          "execution": "dd32933d-134a-4199-b73b-23e01a0305a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Get conversations successful",
          "message": "expected response to have status code 200 but got 403",
          "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "b62167b2a91e528b41e4b2ab7728d895",
          "id": "248e8300-dcaf-4138-8416-6d52d7b3a9ce",
          "timestamp": 1757606303519,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0f2514e-df7d-4866-9570-32e4cd2d22c7",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6e2c6c46-2513-494b-b69c-0a43261c762d",
          "scriptId": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
          "execution": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is array",
          "message": "expected { detail: 'Not authenticated' } to be an array",
          "stack": "AssertionError: expected { detail: 'Not authenticated' } to be an array\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "6a179b72a3918374b60b4cd4ac2a7d6b",
          "id": "feb9a980-307e-4092-8061-8da926e6b678",
          "timestamp": 1757606303521,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
          "name": "Get All Conversations",
          "request": {
            "url": {
              "path": [
                "api",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
              }
            }
          ]
        },
        "parent": {
          "id": "fbbbdb92-967c-4985-a4d4-38f877ec5d9e",
          "name": "üí¨ Chat & Conversation Management",
          "description": {
            "content": "Test chat functionality and conversation management",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "1ccf863b-f236-4ecd-8cef-96868deab22b",
              "name": "Start Conversation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"chatbot_id\": \"{{chatbot_id}}\",\n  \"message\": \"Hello, I need help with my account\",\n  \"user_id\": \"{{user_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0506e7b1-f1a6-4ae7-a25c-f7aaf45b13b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation creation successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('conversation_id', response.id);",
                      "    ",
                      "    pm.test('Conversation data is correct', function () {",
                      "        pm.expect(response).to.have.property('id');",
                      "        pm.expect(response).to.have.property('chatbot_id');",
                      "        pm.expect(response).to.have.property('messages');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "cb3e48d6-8ba3-45d0-8171-abcc4626cb1b"
                  }
                }
              ]
            },
            {
              "id": "5c928dcb-3e72-4942-bea8-80863ef62578",
              "name": "Send Message",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}",
                    "messages"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Can you help me reset my password?\",\n  \"conversation_id\": \"{{conversation_id}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0866a69a-68e3-4544-879a-8ac62609161a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Message sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bot response received', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('bot_response');",
                      "    pm.expect(response.bot_response).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "4bee2fde-611f-41c3-b041-4785fd0788a1"
                  }
                }
              ]
            },
            {
              "id": "f99215fb-74aa-4708-bd29-86aa667aacfb",
              "name": "Get Conversation History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations",
                    "{{conversation_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04ea918d-c5a8-4e99-895f-fc21f7ee6766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Messages are present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('messages');",
                      "    pm.expect(response.messages).to.be.an('array');",
                      "    pm.expect(response.messages.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "dd32933d-134a-4199-b73b-23e01a0305a3"
                  }
                }
              ]
            },
            {
              "id": "c4bdefd7-4fbe-4dc0-961d-62d6f9a07121",
              "name": "Get All Conversations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Get conversations successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0f2514e-df7d-4866-9570-32e4cd2d22c7",
          "length": 30,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6e2c6c46-2513-494b-b69c-0a43261c762d",
          "scriptId": "9eb6bc11-2aca-403a-b3ad-b422196ce33c",
          "execution": "40f8d153-ecd6-4d19-aaf7-03ed863e9b11"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Analytics data retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "9c7f8a840cad5167639396ee07874522",
          "id": "1dd0cd06-bad6-4781-b652-7df5ceed5b63",
          "timestamp": 1757606304053,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "978e2489-d199-4896-abb6-adf496cffed2",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
              }
            }
          ]
        },
        "parent": {
          "id": "32eaa75b-af86-428f-8e7a-2a0bf9d9b073",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "978e2489-d199-4896-abb6-adf496cffed2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
                  }
                }
              ]
            },
            {
              "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
                  }
                }
              ]
            },
            {
              "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cc03ca23-696f-4501-ad10-ad3f3a08d449",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b3c75370-4096-4d49-9178-a6dd57003e27",
          "scriptId": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
          "execution": "ee666333-d608-482e-92b0-bb7d9a38b859"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Analytics contains key metrics",
          "message": "expected { detail: 'Not Found' } to have property 'total_conversations'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'total_conversations'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "4685efb4372b72b465200ff206a21599",
          "id": "c64d4902-74fc-4934-a24c-159bc2d702f1",
          "timestamp": 1757606304054,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "978e2489-d199-4896-abb6-adf496cffed2",
          "name": "Get Dashboard Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Analytics data retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics contains key metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total_conversations');",
                  "    pm.expect(response).to.have.property('active_chatbots');",
                  "    pm.expect(response).to.have.property('total_clients');",
                  "});"
                ],
                "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
              }
            }
          ]
        },
        "parent": {
          "id": "32eaa75b-af86-428f-8e7a-2a0bf9d9b073",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "978e2489-d199-4896-abb6-adf496cffed2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
                  }
                }
              ]
            },
            {
              "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
                  }
                }
              ]
            },
            {
              "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cc03ca23-696f-4501-ad10-ad3f3a08d449",
          "length": 30,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b3c75370-4096-4d49-9178-a6dd57003e27",
          "scriptId": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
          "execution": "ee666333-d608-482e-92b0-bb7d9a38b859"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Conversation analytics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "222f308c69cdf27862b3303c9a92bf17",
          "id": "16697dfc-5e69-4074-a7bd-d58c2b3b1e1c",
          "timestamp": 1757606304585,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
          "name": "Get Conversation Analytics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "conversations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "7d"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Conversation analytics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data is structured', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
              }
            }
          ]
        },
        "parent": {
          "id": "32eaa75b-af86-428f-8e7a-2a0bf9d9b073",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "978e2489-d199-4896-abb6-adf496cffed2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
                  }
                }
              ]
            },
            {
              "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
                  }
                }
              ]
            },
            {
              "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c13e4c8a-b1a2-4eed-a84d-d6edba8d7a71",
          "length": 30,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f5a1ea85-9a72-4d28-9981-78d28b5b6236",
          "scriptId": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
          "execution": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Performance metrics retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "0031538784c482fe2b6ad7cc568f81f7",
          "id": "1537c8a0-6d5e-44f8-b12a-58212201a0ee",
          "timestamp": 1757606305110,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
              }
            }
          ]
        },
        "parent": {
          "id": "32eaa75b-af86-428f-8e7a-2a0bf9d9b073",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "978e2489-d199-4896-abb6-adf496cffed2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
                  }
                }
              ]
            },
            {
              "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
                  }
                }
              ]
            },
            {
              "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77b9c34c-3e43-4924-b072-c345fdc328ae",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "327fb47c-4b06-4565-ac59-614dc49ef46d",
          "scriptId": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
          "execution": "5af2c001-939e-4f62-8950-5cdb01df6db2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Performance data contains metrics",
          "message": "expected { detail: 'Not Found' } to have property 'response_time'",
          "stack": "AssertionError: expected { detail: 'Not Found' } to have property 'response_time'\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "2a8c8dc17871f01da41a93b6622e9516",
          "id": "0f038b1e-759a-4f04-9175-2cec68752eb0",
          "timestamp": 1757606305111,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
          "name": "Get Performance Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "performance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Performance data contains metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('response_time');",
                  "    pm.expect(response).to.have.property('success_rate');",
                  "});"
                ],
                "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
              }
            }
          ]
        },
        "parent": {
          "id": "32eaa75b-af86-428f-8e7a-2a0bf9d9b073",
          "name": "üìä Analytics & Reporting",
          "description": {
            "content": "Test analytics and reporting endpoints",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "978e2489-d199-4896-abb6-adf496cffed2",
              "name": "Get Dashboard Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f2a6c168-6f9b-4dd2-8956-4df85bc63784",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Analytics data retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics contains key metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('total_conversations');",
                      "    pm.expect(response).to.have.property('active_chatbots');",
                      "    pm.expect(response).to.have.property('total_clients');",
                      "});"
                    ],
                    "_lastExecutionId": "ee666333-d608-482e-92b0-bb7d9a38b859"
                  }
                }
              ]
            },
            {
              "id": "d9ef105c-dbee-4617-8521-8702dfa35e7f",
              "name": "Get Conversation Analytics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "conversations"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "period",
                      "value": "7d"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9bd29b1-3f4c-42e8-96ea-f2ce4fb4e94f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Conversation analytics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Analytics data is structured', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "7a5eb7cf-8c14-4d75-ad2f-bff3e930793a"
                  }
                }
              ]
            },
            {
              "id": "b3780a82-d1f4-4656-8d00-ecf4ccbee8ff",
              "name": "Get Performance Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "performance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Performance metrics retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Performance data contains metrics', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('response_time');",
                      "    pm.expect(response).to.have.property('success_rate');",
                      "});"
                    ],
                    "_lastExecutionId": "5af2c001-939e-4f62-8950-5cdb01df6db2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77b9c34c-3e43-4924-b072-c345fdc328ae",
          "length": 30,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "327fb47c-4b06-4565-ac59-614dc49ef46d",
          "scriptId": "d9f9edd7-9431-4ea5-992f-9ee1ad09f104",
          "execution": "5af2c001-939e-4f62-8950-5cdb01df6db2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unauthorized access blocked",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "665a7d559fea89c6bb7a122c956f0676",
          "id": "6754e8c7-f4e1-401c-bc8c-c1ab17c3c51d",
          "timestamp": 1757606305649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
              }
            }
          ]
        },
        "parent": {
          "id": "389b0487-e729-4b30-94f4-0acbb10695ac",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
                  }
                }
              ]
            },
            {
              "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
                  }
                }
              ]
            },
            {
              "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
                  }
                }
              ]
            },
            {
              "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0e1d26d-3eaf-4906-8ab2-a14e90c8ecfb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2bbb6424-dbf0-48b9-8cfb-58cf37011c73"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c5964b7-97d7-471a-b811-706d712fddd5",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc028ee4-56b5-4f52-b05a-7d73abc35652",
          "scriptId": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
          "execution": "866ace5e-7fad-42e9-8823-fe674d0f206a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Error message is informative",
          "message": "expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'",
          "stack": "AssertionError: expected [ { id: 1, ‚Ä¶(15) }, ‚Ä¶(6) ] to have property 'detail'\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "adebd60b7cf76e607cf36e74f9bf028a",
          "id": "18e22cbc-1867-4e22-baf4-0c47f938ca49",
          "timestamp": 1757606305650,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is informative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
              }
            }
          ]
        },
        "parent": {
          "id": "389b0487-e729-4b30-94f4-0acbb10695ac",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
                  }
                }
              ]
            },
            {
              "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
                  }
                }
              ]
            },
            {
              "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
                  }
                }
              ]
            },
            {
              "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0e1d26d-3eaf-4906-8ab2-a14e90c8ecfb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2bbb6424-dbf0-48b9-8cfb-58cf37011c73"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c5964b7-97d7-471a-b811-706d712fddd5",
          "length": 30,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc028ee4-56b5-4f52-b05a-7d73abc35652",
          "scriptId": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
          "execution": "866ace5e-7fad-42e9-8823-fe674d0f206a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Invalid token rejected",
          "message": "expected response to have status code 401 but got 200",
          "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "bebfa55b9be79c18afafdf5e031b58cc",
          "id": "47d05213-c63a-42e9-b1e1-aed0e232e78c",
          "timestamp": 1757606306193,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
          "name": "Invalid Token Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-12345"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
              }
            }
          ]
        },
        "parent": {
          "id": "389b0487-e729-4b30-94f4-0acbb10695ac",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
                  }
                }
              ]
            },
            {
              "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
                  }
                }
              ]
            },
            {
              "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
                  }
                }
              ]
            },
            {
              "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0e1d26d-3eaf-4906-8ab2-a14e90c8ecfb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2bbb6424-dbf0-48b9-8cfb-58cf37011c73"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d80d9017-09ce-4730-89d9-f63805779b4c",
          "length": 30,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a029f6de-17cc-442c-acec-f527624ce7c0",
          "scriptId": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
          "execution": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Non-existent resource returns 404",
          "message": "expected response to have status code 404 but got 403",
          "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "ee21ee64ae89c94503834a01fbd4094a",
          "id": "270a0b99-f3df-4c10-bec3-ea2f4ece8f18",
          "timestamp": 1757606306743,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
          "name": "Non-existent Resource Test",
          "request": {
            "url": {
              "path": [
                "api",
                "clients",
                "99999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Non-existent resource returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message is clear', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('detail');",
                  "});"
                ],
                "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
              }
            }
          ]
        },
        "parent": {
          "id": "389b0487-e729-4b30-94f4-0acbb10695ac",
          "name": "üîÑ Error Handling & Edge Cases",
          "description": {
            "content": "Test error scenarios and edge cases",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "ce5b9f4f-0db7-49c7-b9d1-2f48bc002f8b",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53c0af6e-7876-43ed-b5cf-a6e64d1ca982",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access blocked', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is informative', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "866ace5e-7fad-42e9-8823-fe674d0f206a"
                  }
                }
              ]
            },
            {
              "id": "e5ad0cd6-a3a5-41c0-8f58-553d2812f971",
              "name": "Invalid Token Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid-token-12345"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc6cfc34-ce3e-4241-9392-252e5212abd9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid token rejected', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "d885cc2a-6a2f-4f1c-94a5-96d07dd9207e"
                  }
                }
              ]
            },
            {
              "id": "1569062b-ad08-4bd8-bff5-d09f374875f1",
              "name": "Non-existent Resource Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients",
                    "99999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5350abd-366a-4c56-93c3-5d3024ef7306",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Non-existent resource returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error message is clear', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
                  }
                }
              ]
            },
            {
              "id": "8ba70052-3f03-4478-80ba-f8e0b7189b6f",
              "name": "Invalid Data Format Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"invalid_field\": \"invalid data\",\n  \"missing_required_fields\": true\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0e1d26d-3eaf-4906-8ab2-a14e90c8ecfb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid data rejected', function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                      "});",
                      "",
                      "pm.test('Validation errors provided', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('detail');",
                      "});"
                    ],
                    "_lastExecutionId": "2bbb6424-dbf0-48b9-8cfb-58cf37011c73"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76454b91-279c-4455-b1d5-058cdaed2fb8",
          "length": 30,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "03e2ed37-d4ce-409c-bc82-d17c342d9821",
          "scriptId": "a5350abd-366a-4c56-93c3-5d3024ef7306",
          "execution": "5c9bd8a0-d956-4a96-808a-fb68fe953b34"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles concurrent requests",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "d63d7f17cfb8ac12a385b6a5d1cf589e",
          "id": "04c62a5c-62b0-43df-bf1f-41a42523c28f",
          "timestamp": 1757606308401,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "706e7f4d-25d6-4c12-be0c-972f6456b590",
          "name": "Concurrent Request Test",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d33ef61b-f50c-44e7-8bde-412dbb43993d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "5808f817-58e7-4b88-8c97-1cae63c14112"
              }
            }
          ]
        },
        "parent": {
          "id": "3f2d8307-3ccd-43dc-9235-b73db6ca9977",
          "name": "‚ö° Performance & Load Tests",
          "description": {
            "content": "Test API performance and load handling",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "c09bf8f5-f62f-4f2c-801c-2d870abb59a6",
              "name": "Response Time Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "clients"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5887167-8c07-4eb3-a9d7-b6680c7ad965",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response time is acceptable', function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "",
                      "pm.test('API responds successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "7379499a-4d3a-4609-9df9-25289e1944a0"
                  }
                }
              ]
            },
            {
              "id": "706e7f4d-25d6-4c12-be0c-972f6456b590",
              "name": "Concurrent Request Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d33ef61b-f50c-44e7-8bde-412dbb43993d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response structure is consistent', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "5808f817-58e7-4b88-8c97-1cae63c14112"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "98e09ee1-af97-4ed4-b501-dd250dbe3081",
          "length": 30,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "35f942e1-d5d8-421c-80dd-50aa75e49773",
          "scriptId": "d33ef61b-f50c-44e7-8bde-412dbb43993d",
          "execution": "5808f817-58e7-4b88-8c97-1cae63c14112"
        }
      }
    ],
    "error": null
  }
}